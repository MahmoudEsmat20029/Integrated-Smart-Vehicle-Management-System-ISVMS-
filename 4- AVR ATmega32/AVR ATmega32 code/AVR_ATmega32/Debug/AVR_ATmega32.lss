
AVR_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00007656  000076ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800196  00800196  00007820  2**0
                  ALLOC
  3 .stab         00006f90  00000000  00000000  00007820  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f81  00000000  00000000  0000e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00011731  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000118d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00011ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00013ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00015254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001642c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000165ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000168e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__vector_1>
       8:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__vector_2>
       c:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__vector_3>
      10:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__vector_4>
      14:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_5>
      18:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_6>
      1c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_9>
      28:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_10>
      2c:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f6 e7       	ldi	r31, 0x76	; 118
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 28 	call	0x5026	; 0x5026 <main>
      8a:	0c 94 29 3b 	jmp	0x7652	; 0x7652 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 3a 	jmp	0x7582	; 0x7582 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 3a 	jmp	0x75ba	; 0x75ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 3a 	jmp	0x759a	; 0x759a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 3a 	jmp	0x75d2	; 0x75d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 3a 	jmp	0x759a	; 0x759a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 3a 	jmp	0x75d2	; 0x75d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 3a 	jmp	0x7582	; 0x7582 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 3a 	jmp	0x75ba	; 0x75ba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 3a 	jmp	0x7592	; 0x7592 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e7       	ldi	r22, 0x79	; 121
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e5 3a 	jmp	0x75ca	; 0x75ca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cd 3a 	jmp	0x759a	; 0x759a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e9 3a 	jmp	0x75d2	; 0x75d2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cd 3a 	jmp	0x759a	; 0x759a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e9 3a 	jmp	0x75d2	; 0x75d2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cd 3a 	jmp	0x759a	; 0x759a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e9 3a 	jmp	0x75d2	; 0x75d2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d1 3a 	jmp	0x75a2	; 0x75a2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ed 3a 	jmp	0x75da	; 0x75da <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c9 3a 	jmp	0x7592	; 0x7592 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e5 3a 	jmp	0x75ca	; 0x75ca <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 57       	subi	r30, 0x7F	; 127
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:
/* Callbacks */
static void (*RxCallback)(uint8) = 0;
static void (*TxCallback)(void) = 0;

void UART_Init(UART_ConfigType *config)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	28 97       	sbiw	r28, 0x08	; 8
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
    /* Set baud rate */
    uint16 ubrr = (F_CPU / (16 * config->baudRate)) - 1;
     e46:	ed 81       	ldd	r30, Y+5	; 0x05
     e48:	fe 81       	ldd	r31, Y+6	; 0x06
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	a2 81       	ldd	r26, Z+2	; 0x02
     e50:	b3 81       	ldd	r27, Z+3	; 0x03
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	9c 01       	movw	r18, r24
     e74:	ad 01       	movw	r20, r26
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	94 e2       	ldi	r25, 0x24	; 36
     e7a:	a4 ef       	ldi	r26, 0xF4	; 244
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 8b 3a 	call	0x7516	; 0x7516 <__udivmodsi4>
     e86:	da 01       	movw	r26, r20
     e88:	c9 01       	movw	r24, r18
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	8b 83       	std	Y+3, r24	; 0x03
    UBRRH = (uint8)(ubrr >> 8);
     e90:	e0 e4       	ldi	r30, 0x40	; 64
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	89 2f       	mov	r24, r25
     e9a:	99 27       	eor	r25, r25
     e9c:	80 83       	st	Z, r24
    UBRRL = (uint8)ubrr;
     e9e:	e9 e2       	ldi	r30, 0x29	; 41
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	80 83       	st	Z, r24

    /* Set frame format */
    uint8 ucsrb = (1 << RXEN) | (1 << TXEN);  /* Enable RX and TX */
     ea6:	88 e1       	ldi	r24, 0x18	; 24
     ea8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 ucsrc = (1 << URSEL);	/* URSEL must be 1 when writing to UCSRC */
     eaa:	80 e8       	ldi	r24, 0x80	; 128
     eac:	89 83       	std	Y+1, r24	; 0x01

    /* Data bits */
    switch (config->dataBits)
     eae:	ed 81       	ldd	r30, Y+5	; 0x05
     eb0:	fe 81       	ldd	r31, Y+6	; 0x06
     eb2:	84 81       	ldd	r24, Z+4	; 0x04
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	38 87       	std	Y+8, r19	; 0x08
     eba:	2f 83       	std	Y+7, r18	; 0x07
     ebc:	8f 81       	ldd	r24, Y+7	; 0x07
     ebe:	98 85       	ldd	r25, Y+8	; 0x08
     ec0:	87 30       	cpi	r24, 0x07	; 7
     ec2:	91 05       	cpc	r25, r1
     ec4:	f9 f0       	breq	.+62     	; 0xf04 <UART_Init+0xd6>
     ec6:	2f 81       	ldd	r18, Y+7	; 0x07
     ec8:	38 85       	ldd	r19, Y+8	; 0x08
     eca:	28 30       	cpi	r18, 0x08	; 8
     ecc:	31 05       	cpc	r19, r1
     ece:	5c f4       	brge	.+22     	; 0xee6 <UART_Init+0xb8>
     ed0:	8f 81       	ldd	r24, Y+7	; 0x07
     ed2:	98 85       	ldd	r25, Y+8	; 0x08
     ed4:	85 30       	cpi	r24, 0x05	; 5
     ed6:	91 05       	cpc	r25, r1
     ed8:	19 f1       	breq	.+70     	; 0xf20 <UART_Init+0xf2>
     eda:	2f 81       	ldd	r18, Y+7	; 0x07
     edc:	38 85       	ldd	r19, Y+8	; 0x08
     ede:	26 30       	cpi	r18, 0x06	; 6
     ee0:	31 05       	cpc	r19, r1
     ee2:	61 f0       	breq	.+24     	; 0xefc <UART_Init+0xce>
     ee4:	1d c0       	rjmp	.+58     	; 0xf20 <UART_Init+0xf2>
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	98 85       	ldd	r25, Y+8	; 0x08
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	91 05       	cpc	r25, r1
     eee:	71 f0       	breq	.+28     	; 0xf0c <UART_Init+0xde>
     ef0:	2f 81       	ldd	r18, Y+7	; 0x07
     ef2:	38 85       	ldd	r19, Y+8	; 0x08
     ef4:	29 30       	cpi	r18, 0x09	; 9
     ef6:	31 05       	cpc	r19, r1
     ef8:	69 f0       	breq	.+26     	; 0xf14 <UART_Init+0xe6>
     efa:	12 c0       	rjmp	.+36     	; 0xf20 <UART_Init+0xf2>
    {
        case 5: ucsrc |= (0 << UCSZ0) | (0 << UCSZ1); break;
        case 6: ucsrc |= (1 << UCSZ0) | (0 << UCSZ1); break;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <UART_Init+0xf2>
        case 7: ucsrc |= (0 << UCSZ0) | (1 << UCSZ1); break;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	84 60       	ori	r24, 0x04	; 4
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <UART_Init+0xf2>
        case 8: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); break;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	86 60       	ori	r24, 0x06	; 6
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <UART_Init+0xf2>
        case 9: ucsrc |= (1 << UCSZ0) | (1 << UCSZ1); ucsrb |= (1 << UCSZ2); break;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	86 60       	ori	r24, 0x06	; 6
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	8a 83       	std	Y+2, r24	; 0x02
    }

    if (config->parity == 1) ucsrc |= (1 << UPM1);	/* Even parity */
     f20:	ed 81       	ldd	r30, Y+5	; 0x05
     f22:	fe 81       	ldd	r31, Y+6	; 0x06
     f24:	85 81       	ldd	r24, Z+5	; 0x05
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	21 f4       	brne	.+8      	; 0xf32 <UART_Init+0x104>
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 62       	ori	r24, 0x20	; 32
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <UART_Init+0x114>
    else if (config->parity == 2) ucsrc |= (1 << UPM1) | (1 << UPM0);	/* Odd parity */
     f32:	ed 81       	ldd	r30, Y+5	; 0x05
     f34:	fe 81       	ldd	r31, Y+6	; 0x06
     f36:	85 81       	ldd	r24, Z+5	; 0x05
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	19 f4       	brne	.+6      	; 0xf42 <UART_Init+0x114>
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 63       	ori	r24, 0x30	; 48
     f40:	89 83       	std	Y+1, r24	; 0x01

    if (config->stopBits == 2) ucsrc |= (1 << USBS);	/* Stop bits */
     f42:	ed 81       	ldd	r30, Y+5	; 0x05
     f44:	fe 81       	ldd	r31, Y+6	; 0x06
     f46:	86 81       	ldd	r24, Z+6	; 0x06
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	19 f4       	brne	.+6      	; 0xf52 <UART_Init+0x124>
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	89 83       	std	Y+1, r24	; 0x01

    // Apply configurations
    UCSRB = ucsrb;
     f52:	ea e2       	ldi	r30, 0x2A	; 42
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	80 83       	st	Z, r24
    UCSRC = ucsrc;
     f5a:	e0 e4       	ldi	r30, 0x40	; 64
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	80 83       	st	Z, r24

    sei();		/* Enable Global Interrupts */
     f62:	78 94       	sei
}
     f64:	28 96       	adiw	r28, 0x08	; 8
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <UART_Transmit>:

/* Transmit data */
void UART_Transmit (uint8 data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1 << UDRE)));  // Wait for empty transmit buffer
     f82:	eb e2       	ldi	r30, 0x2B	; 43
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	80 72       	andi	r24, 0x20	; 32
     f8e:	90 70       	andi	r25, 0x00	; 0
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	b9 f3       	breq	.-18     	; 0xf82 <UART_Transmit+0xc>
    UDR = data;
     f94:	ec e2       	ldi	r30, 0x2C	; 44
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 83       	st	Z, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_Receive>:

/* Receive data */
uint8 UART_Receive (void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
    while (!(UCSRA & (1 << RXC)));  // Wait for data to be received
     fac:	eb e2       	ldi	r30, 0x2B	; 43
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	dc f7       	brge	.-10     	; 0xfac <UART_Receive+0x8>
    return UDR;
     fb6:	ec e2       	ldi	r30, 0x2C	; 44
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <UART_SetRxCallback>:

/* Set RX callback */
void UART_SetRxCallback(void (*callback)(uint8))
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <UART_SetRxCallback+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
    RxCallback = callback;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	90 93 97 01 	sts	0x0197, r25
     fd8:	80 93 96 01 	sts	0x0196, r24
    UCSRB |= (1 << RXCIE);		/* Enable RX interrupt */
     fdc:	aa e2       	ldi	r26, 0x2A	; 42
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ea e2       	ldi	r30, 0x2A	; 42
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <UART_SetTxCallback>:

/* Set TX callback */
void UART_SetTxCallback(void (*callback)(void))
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <UART_SetTxCallback+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    TxCallback = callback;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	90 93 99 01 	sts	0x0199, r25
    100a:	80 93 98 01 	sts	0x0198, r24
    UCSRB |= (1 << TXCIE);		/* Enable TX interrupt */
    100e:	aa e2       	ldi	r26, 0x2A	; 42
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ea e2       	ldi	r30, 0x2A	; 42
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8c 93       	st	X, r24
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <__vector_13>:

ISR (USART_RXC_vect)		/* ISR for RX complete */
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    if (RxCallback)
    1050:	80 91 96 01 	lds	r24, 0x0196
    1054:	90 91 97 01 	lds	r25, 0x0197
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	41 f0       	breq	.+16     	; 0x106c <__vector_13+0x46>
    {
        RxCallback(UDR);
    105c:	e0 91 96 01 	lds	r30, 0x0196
    1060:	f0 91 97 01 	lds	r31, 0x0197
    1064:	ac e2       	ldi	r26, 0x2C	; 44
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	8c 91       	ld	r24, X
    106a:	09 95       	icall
    }
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_15>:

ISR (USART_TXC_vect)		/* ISR for TX complete */
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    if (TxCallback)
    10bc:	80 91 98 01 	lds	r24, 0x0198
    10c0:	90 91 99 01 	lds	r25, 0x0199
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	29 f0       	breq	.+10     	; 0x10d2 <__vector_15+0x40>
    {
        TxCallback();
    10c8:	e0 91 98 01 	lds	r30, 0x0198
    10cc:	f0 91 99 01 	lds	r31, 0x0199
    10d0:	09 95       	icall
    }
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <UART_SendNumbersWithDelimiter>:

void UART_SendNumbersWithDelimiter(const uint16* numbers, uint8 count, char delimiter)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	60 97       	sbiw	r28, 0x10	; 16
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	9e 87       	std	Y+14, r25	; 0x0e
    110e:	8d 87       	std	Y+13, r24	; 0x0d
    1110:	6f 87       	std	Y+15, r22	; 0x0f
    1112:	48 8b       	std	Y+16, r20	; 0x10
    char buffer[10];
    for (uint8 i = 0; i < count; i++)
    1114:	1a 82       	std	Y+2, r1	; 0x02
    1116:	40 c0       	rjmp	.+128    	; 0x1198 <UART_SendNumbersWithDelimiter+0xa0>
    {
        itoa(numbers[i], buffer, 10);  /* From integer to string */
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9c 01       	movw	r18, r24
    1120:	22 0f       	add	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9e 85       	ldd	r25, Y+14	; 0x0e
    1128:	fc 01       	movw	r30, r24
    112a:	e2 0f       	add	r30, r18
    112c:	f3 1f       	adc	r31, r19
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	9e 01       	movw	r18, r28
    1134:	2d 5f       	subi	r18, 0xFD	; 253
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	b9 01       	movw	r22, r18
    113a:	4a e0       	ldi	r20, 0x0A	; 10
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <itoa>
        for (uint8 j = 0; buffer[j] != '\0'; j++)
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <UART_SendNumbersWithDelimiter+0x6a>
        {
            UART_Transmit(buffer[j]);
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	ce 01       	movw	r24, r28
    114e:	03 96       	adiw	r24, 0x03	; 3
    1150:	fc 01       	movw	r30, r24
    1152:	e2 0f       	add	r30, r18
    1154:	f3 1f       	adc	r31, r19
    1156:	80 81       	ld	r24, Z
    1158:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_Transmit>
{
    char buffer[10];
    for (uint8 i = 0; i < count; i++)
    {
        itoa(numbers[i], buffer, 10);  /* From integer to string */
        for (uint8 j = 0; buffer[j] != '\0'; j++)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	ce 01       	movw	r24, r28
    116a:	03 96       	adiw	r24, 0x03	; 3
    116c:	fc 01       	movw	r30, r24
    116e:	e2 0f       	add	r30, r18
    1170:	f3 1f       	adc	r31, r19
    1172:	80 81       	ld	r24, Z
    1174:	88 23       	and	r24, r24
    1176:	39 f7       	brne	.-50     	; 0x1146 <UART_SendNumbersWithDelimiter+0x4e>
        {
            UART_Transmit(buffer[j]);
        }

        if (i < count - 1)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	28 17       	cp	r18, r24
    1188:	39 07       	cpc	r19, r25
    118a:	1c f4       	brge	.+6      	; 0x1192 <UART_SendNumbersWithDelimiter+0x9a>
        {
            UART_Transmit(delimiter);
    118c:	88 89       	ldd	r24, Y+16	; 0x10
    118e:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_Transmit>
}

void UART_SendNumbersWithDelimiter(const uint16* numbers, uint8 count, char delimiter)
{
    char buffer[10];
    for (uint8 i = 0; i < count; i++)
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	8f 85       	ldd	r24, Y+15	; 0x0f
    119c:	98 17       	cp	r25, r24
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <UART_SendNumbersWithDelimiter+0xaa>
    11a0:	bb cf       	rjmp	.-138    	; 0x1118 <UART_SendNumbersWithDelimiter+0x20>
        if (i < count - 1)
        {
            UART_Transmit(delimiter);
        }
    }
    UART_Transmit('\n'); 	/* If i want */
    11a2:	8a e0       	ldi	r24, 0x0A	; 10
    11a4:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_Transmit>
}
    11a8:	60 96       	adiw	r28, 0x10	; 16
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSRA & (1<<UDRE)));  // wait until UDR is empty
    11c6:	eb e2       	ldi	r30, 0x2B	; 43
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	80 72       	andi	r24, 0x20	; 32
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	b9 f3       	breq	.-18     	; 0x11c6 <UART_sendByte+0xc>
	UDR = data;                     // send the data
    11d8:	ec e2       	ldi	r30, 0x2C	; 44
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	80 83       	st	Z, r24
}
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <UART_sendString>:


void UART_sendString(const uint8 *str)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <UART_sendString+0x6>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	0a c0       	rjmp	.+20     	; 0x120c <UART_sendString+0x24>
	while(*str != '\0')  // loop until end of string
	{
		UART_sendByte(*str);  // send each character
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	80 81       	ld	r24, Z
    11fe:	0e 94 dd 08 	call	0x11ba	; 0x11ba <UART_sendByte>
		str++;  // move to next character
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
}


void UART_sendString(const uint8 *str)
{
	while(*str != '\0')  // loop until end of string
    120c:	e9 81       	ldd	r30, Y+1	; 0x01
    120e:	fa 81       	ldd	r31, Y+2	; 0x02
    1210:	80 81       	ld	r24, Z
    1212:	88 23       	and	r24, r24
    1214:	89 f7       	brne	.-30     	; 0x11f8 <UART_sendString+0x10>
	{
		UART_sendByte(*str);  // send each character
		str++;  // move to next character
	}
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <__vector_11>:
 *******************************************************************************/
/*
 * ISR For Timer0 Overflow
 */
ISR(TIMER0_OVF_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    124a:	80 91 9a 01 	lds	r24, 0x019A
    124e:	90 91 9b 01 	lds	r25, 0x019B
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	29 f0       	breq	.+10     	; 0x1260 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer0)();
    1256:	e0 91 9a 01 	lds	r30, 0x019A
    125a:	f0 91 9b 01 	lds	r31, 0x019B
    125e:	09 95       	icall
	}
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_10>:

/*
 * ISR For Timer0 Compare Match
 */
ISR(TIMER0_COMP_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    12b0:	80 91 9a 01 	lds	r24, 0x019A
    12b4:	90 91 9b 01 	lds	r25, 0x019B
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer0)();
    12bc:	e0 91 9a 01 	lds	r30, 0x019A
    12c0:	f0 91 9b 01 	lds	r31, 0x019B
    12c4:	09 95       	icall
	}
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_9>:

/*
 * ISR For Timer1 Overflow
 */
ISR(TIMER1_OVF_vect)
{
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    1316:	80 91 9c 01 	lds	r24, 0x019C
    131a:	90 91 9d 01 	lds	r25, 0x019D
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	29 f0       	breq	.+10     	; 0x132c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer1)();
    1322:	e0 91 9c 01 	lds	r30, 0x019C
    1326:	f0 91 9d 01 	lds	r31, 0x019D
    132a:	09 95       	icall
	}
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_7>:

/*
 * ISR For Timer1 Compare Match A
 */
ISR(TIMER1_COMPA_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    137c:	80 91 9c 01 	lds	r24, 0x019C
    1380:	90 91 9d 01 	lds	r25, 0x019D
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	29 f0       	breq	.+10     	; 0x1392 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer1)();
    1388:	e0 91 9c 01 	lds	r30, 0x019C
    138c:	f0 91 9d 01 	lds	r31, 0x019D
    1390:	09 95       	icall
	}
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	ff 91       	pop	r31
    1398:	ef 91       	pop	r30
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <__vector_5>:

/*
 * ISR For Timer2 Overflow
 */
ISR(TIMER2_OVF_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	2f 93       	push	r18
    13c4:	3f 93       	push	r19
    13c6:	4f 93       	push	r20
    13c8:	5f 93       	push	r21
    13ca:	6f 93       	push	r22
    13cc:	7f 93       	push	r23
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	af 93       	push	r26
    13d4:	bf 93       	push	r27
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    13e2:	80 91 9e 01 	lds	r24, 0x019E
    13e6:	90 91 9f 01 	lds	r25, 0x019F
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	29 f0       	breq	.+10     	; 0x13f8 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the overflow interrupt */
		(*g_callBackPtr_timer2)();
    13ee:	e0 91 9e 01 	lds	r30, 0x019E
    13f2:	f0 91 9f 01 	lds	r31, 0x019F
    13f6:	09 95       	icall
	}
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <__vector_4>:

/*
 * ISR For Timer2 Compare Match
 */
ISR(TIMER2_COMP_vect)
{
    141e:	1f 92       	push	r1
    1420:	0f 92       	push	r0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	2f 93       	push	r18
    142a:	3f 93       	push	r19
    142c:	4f 93       	push	r20
    142e:	5f 93       	push	r21
    1430:	6f 93       	push	r22
    1432:	7f 93       	push	r23
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	af 93       	push	r26
    143a:	bf 93       	push	r27
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    1448:	80 91 9e 01 	lds	r24, 0x019E
    144c:	90 91 9f 01 	lds	r25, 0x019F
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	29 f0       	breq	.+10     	; 0x145e <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the compare match interrupt */
		(*g_callBackPtr_timer2)();
    1454:	e0 91 9e 01 	lds	r30, 0x019E
    1458:	f0 91 9f 01 	lds	r31, 0x019F
    145c:	09 95       	icall
	}
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	ff 91       	pop	r31
    1464:	ef 91       	pop	r30
    1466:	bf 91       	pop	r27
    1468:	af 91       	pop	r26
    146a:	9f 91       	pop	r25
    146c:	8f 91       	pop	r24
    146e:	7f 91       	pop	r23
    1470:	6f 91       	pop	r22
    1472:	5f 91       	pop	r21
    1474:	4f 91       	pop	r20
    1476:	3f 91       	pop	r19
    1478:	2f 91       	pop	r18
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <Timer_init>:
/*
 * Function to initialize the Timer driver.
 * Config_Ptr: Pointer to the Timer configuration structure.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <Timer_init+0x6>
    148a:	00 d0       	rcall	.+0      	; 0x148c <Timer_init+0x8>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	84 81       	ldd	r24, Z+4	; 0x04
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3c 83       	std	Y+4, r19	; 0x04
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <Timer_init+0x2a>
    14ac:	47 c0       	rjmp	.+142    	; 0x153c <Timer_init+0xb8>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <Timer_init+0x36>
    14b8:	85 c0       	rjmp	.+266    	; 0x15c4 <Timer_init+0x140>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <Timer_init+0x40>
    14c2:	bb c0       	rjmp	.+374    	; 0x163a <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS00 & CS01 & CS02.
		 */
		TCCR0 = (1<<FOC0) | ((Config_Ptr->timer_mode)<<WGM01) | ((Config_Ptr->timer_clock)<<CS00);
    14c4:	a3 e5       	ldi	r26, 0x53	; 83
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	86 81       	ldd	r24, Z+6	; 0x06
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	98 2f       	mov	r25, r24
    14e0:	90 68       	ori	r25, 0x80	; 128
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	85 81       	ldd	r24, Z+5	; 0x05
    14e8:	89 2b       	or	r24, r25
    14ea:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT0 */
		TCNT0 = Config_Ptr->timer_InitialValue;
    14ec:	a2 e5       	ldi	r26, 0x52	; 82
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e9 81       	ldd	r30, Y+1	; 0x01
    14f2:	fa 81       	ldd	r31, Y+2	; 0x02
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	86 81       	ldd	r24, Z+6	; 0x06
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	39 f4       	brne	.+14     	; 0x1512 <Timer_init+0x8e>
		{
			/* Set Output Compare Register – OCR0 */
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    1504:	ac e5       	ldi	r26, 0x5C	; 92
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e9 81       	ldd	r30, Y+1	; 0x01
    150a:	fa 81       	ldd	r31, Y+2	; 0x02
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1512:	e9 81       	ldd	r30, Y+1	; 0x01
    1514:	fa 81       	ldd	r31, Y+2	; 0x02
    1516:	86 81       	ldd	r24, Z+6	; 0x06
    1518:	88 23       	and	r24, r24
    151a:	41 f4       	brne	.+16     	; 0x152c <Timer_init+0xa8>
		{
			TIMSK |= (1<<TOIE0);
    151c:	a9 e5       	ldi	r26, 0x59	; 89
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e9 e5       	ldi	r30, 0x59	; 89
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	8c 93       	st	X, r24
    152a:	87 c0       	rjmp	.+270    	; 0x163a <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE0);
    152c:	a9 e5       	ldi	r26, 0x59	; 89
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e9 e5       	ldi	r30, 0x59	; 89
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	82 60       	ori	r24, 0x02	; 2
    1538:	8c 93       	st	X, r24
    153a:	7f c0       	rjmp	.+254    	; 0x163a <Timer_init+0x1b6>
		 * The FOC1A/FOC1B = 1 when the WGM13:0 bits specifies a non-PWM mode.
		 * Normal mode WGM10 = 0, WGM11 = 0, WGM12 = 0; WGM13 = 0
		 * Compare mode WGM10 = 0, WGM11 = 0, WGM12 = 1; WGM13 = 0
		 * Set clock as we need from CS10 & CS11 & CS12.
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    153c:	ef e4       	ldi	r30, 0x4F	; 79
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8c e0       	ldi	r24, 0x0C	; 12
    1542:	80 83       	st	Z, r24
		TCCR1B = ((Config_Ptr->timer_mode)<<WGM12) | ((Config_Ptr->timer_clock)<<CS10);
    1544:	ae e4       	ldi	r26, 0x4E	; 78
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	86 81       	ldd	r24, Z+6	; 0x06
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	98 2f       	mov	r25, r24
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	85 81       	ldd	r24, Z+5	; 0x05
    1566:	89 2b       	or	r24, r25
    1568:	8c 93       	st	X, r24

		/* Set Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = Config_Ptr->timer_InitialValue;
    156a:	ac e4       	ldi	r26, 0x4C	; 76
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e9 81       	ldd	r30, Y+1	; 0x01
    1570:	fa 81       	ldd	r31, Y+2	; 0x02
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	9c 93       	st	X, r25
    157a:	8e 93       	st	-X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	86 81       	ldd	r24, Z+6	; 0x06
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	51 f4       	brne	.+20     	; 0x159a <Timer_init+0x116>
		{
			/* Set Output Compare Register 1 A – OCR1AH and OCR1AL */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1586:	ea e4       	ldi	r30, 0x4A	; 74
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	a9 81       	ldd	r26, Y+1	; 0x01
    158c:	ba 81       	ldd	r27, Y+2	; 0x02
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	8d 91       	ld	r24, X+
    1592:	9c 91       	ld	r25, X
    1594:	13 97       	sbiw	r26, 0x03	; 3
    1596:	91 83       	std	Z+1, r25	; 0x01
    1598:	80 83       	st	Z, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    159a:	e9 81       	ldd	r30, Y+1	; 0x01
    159c:	fa 81       	ldd	r31, Y+2	; 0x02
    159e:	86 81       	ldd	r24, Z+6	; 0x06
    15a0:	88 23       	and	r24, r24
    15a2:	41 f4       	brne	.+16     	; 0x15b4 <Timer_init+0x130>
		{
			TIMSK |= (1<<TOIE1);
    15a4:	a9 e5       	ldi	r26, 0x59	; 89
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e9 e5       	ldi	r30, 0x59	; 89
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	8c 93       	st	X, r24
    15b2:	43 c0       	rjmp	.+134    	; 0x163a <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE1A);
    15b4:	a9 e5       	ldi	r26, 0x59	; 89
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e9 e5       	ldi	r30, 0x59	; 89
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 61       	ori	r24, 0x10	; 16
    15c0:	8c 93       	st	X, r24
    15c2:	3b c0       	rjmp	.+118    	; 0x163a <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS20 & CS21 & CS22.
		 */
		TCCR2 = (1<<FOC2) | ((Config_Ptr->timer_mode)<<WGM21) | ((Config_Ptr->timer_clock)<<CS20);
    15c4:	a5 e4       	ldi	r26, 0x45	; 69
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ca:	fa 81       	ldd	r31, Y+2	; 0x02
    15cc:	86 81       	ldd	r24, Z+6	; 0x06
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	98 2f       	mov	r25, r24
    15e0:	90 68       	ori	r25, 0x80	; 128
    15e2:	e9 81       	ldd	r30, Y+1	; 0x01
    15e4:	fa 81       	ldd	r31, Y+2	; 0x02
    15e6:	85 81       	ldd	r24, Z+5	; 0x05
    15e8:	89 2b       	or	r24, r25
    15ea:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT2 */
		TCNT2 = Config_Ptr->timer_InitialValue;
    15ec:	a4 e4       	ldi	r26, 0x44	; 68
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e9 81       	ldd	r30, Y+1	; 0x01
    15f2:	fa 81       	ldd	r31, Y+2	; 0x02
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    15fa:	e9 81       	ldd	r30, Y+1	; 0x01
    15fc:	fa 81       	ldd	r31, Y+2	; 0x02
    15fe:	86 81       	ldd	r24, Z+6	; 0x06
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	39 f4       	brne	.+14     	; 0x1612 <Timer_init+0x18e>
		{
			/* Set Output Compare Register – OCR2 */
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    1604:	a3 e4       	ldi	r26, 0x43	; 67
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e9 81       	ldd	r30, Y+1	; 0x01
    160a:	fa 81       	ldd	r31, Y+2	; 0x02
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1612:	e9 81       	ldd	r30, Y+1	; 0x01
    1614:	fa 81       	ldd	r31, Y+2	; 0x02
    1616:	86 81       	ldd	r24, Z+6	; 0x06
    1618:	88 23       	and	r24, r24
    161a:	41 f4       	brne	.+16     	; 0x162c <Timer_init+0x1a8>
		{
			TIMSK |= (1<<TOIE2);
    161c:	a9 e5       	ldi	r26, 0x59	; 89
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e9 e5       	ldi	r30, 0x59	; 89
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 64       	ori	r24, 0x40	; 64
    1628:	8c 93       	st	X, r24
    162a:	07 c0       	rjmp	.+14     	; 0x163a <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE2);
    162c:	a9 e5       	ldi	r26, 0x59	; 89
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e9 e5       	ldi	r30, 0x59	; 89
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 68       	ori	r24, 0x80	; 128
    1638:	8c 93       	st	X, r24
		}
		break;
	}
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <Timer_deInit>:
/*
 * Function to disable the Timer via Timer_ID.
 * timer_type: The ID of the timer to be disabled.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <Timer_deInit+0x6>
    164e:	0f 92       	push	r0
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3b 83       	std	Y+3, r19	; 0x03
    165e:	2a 83       	std	Y+2, r18	; 0x02
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	11 f1       	breq	.+68     	; 0x16ae <Timer_deInit+0x66>
    166a:	2a 81       	ldd	r18, Y+2	; 0x02
    166c:	3b 81       	ldd	r19, Y+3	; 0x03
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	d1 f1       	breq	.+116    	; 0x16e8 <Timer_deInit+0xa0>
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	9b 81       	ldd	r25, Y+3	; 0x03
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	09 f0       	breq	.+2      	; 0x167e <Timer_deInit+0x36>
    167c:	4c c0       	rjmp	.+152    	; 0x1716 <Timer_deInit+0xce>
	case TIMER0_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR0 = 0;
    167e:	e3 e5       	ldi	r30, 0x53	; 83
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT0 */
		TCNT0 = 0;
    1684:	e2 e5       	ldi	r30, 0x52	; 82
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR0 */
		OCR0 = 0;
    168a:	ec e5       	ldi	r30, 0x5C	; 92
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE0);
    1690:	a9 e5       	ldi	r26, 0x59	; 89
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e9 e5       	ldi	r30, 0x59	; 89
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8e 7f       	andi	r24, 0xFE	; 254
    169c:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    169e:	a9 e5       	ldi	r26, 0x59	; 89
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e9 e5       	ldi	r30, 0x59	; 89
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8d 7f       	andi	r24, 0xFD	; 253
    16aa:	8c 93       	st	X, r24
    16ac:	34 c0       	rjmp	.+104    	; 0x1716 <Timer_deInit+0xce>
	case TIMER1_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR1A = 0;
    16ae:	ef e4       	ldi	r30, 0x4F	; 79
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	10 82       	st	Z, r1
		TCCR1B = 0;
    16b4:	ee e4       	ldi	r30, 0x4E	; 78
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	10 82       	st	Z, r1

		/* Reset Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = 0;
    16ba:	ec e4       	ldi	r30, 0x4C	; 76
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	11 82       	std	Z+1, r1	; 0x01
    16c0:	10 82       	st	Z, r1

		/* Reset Output Compare Register 1 A – OCR1AH and OCR1AL */
		OCR1A = 0;
    16c2:	ea e4       	ldi	r30, 0x4A	; 74
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	11 82       	std	Z+1, r1	; 0x01
    16c8:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE1);
    16ca:	a9 e5       	ldi	r26, 0x59	; 89
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e9 e5       	ldi	r30, 0x59	; 89
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8b 7f       	andi	r24, 0xFB	; 251
    16d6:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    16d8:	a9 e5       	ldi	r26, 0x59	; 89
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e9 e5       	ldi	r30, 0x59	; 89
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7e       	andi	r24, 0xEF	; 239
    16e4:	8c 93       	st	X, r24
    16e6:	17 c0       	rjmp	.+46     	; 0x1716 <Timer_deInit+0xce>
	case TIMER2_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR2 = 0;
    16e8:	e5 e4       	ldi	r30, 0x45	; 69
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT2 */
		TCNT2 = 0;
    16ee:	e4 e4       	ldi	r30, 0x44	; 68
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR2 */
		OCR2 = 0;
    16f4:	e3 e4       	ldi	r30, 0x43	; 67
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE2);
    16fa:	a9 e5       	ldi	r26, 0x59	; 89
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e9 e5       	ldi	r30, 0x59	; 89
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 7b       	andi	r24, 0xBF	; 191
    1706:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    1708:	a9 e5       	ldi	r26, 0x59	; 89
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e9 e5       	ldi	r30, 0x59	; 89
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8f 77       	andi	r24, 0x7F	; 127
    1714:	8c 93       	st	X, r24
		break;
	}
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <Timer_getTimerValue>:
 * Function to get the Timer Value.
 * timer_type: The ID of the timer to get the value from.
 * Returns: The current value of the timer.
 */
uint16 Timer_getTimerValue(Timer_ID_Type timer_type)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	27 97       	sbiw	r28, 0x07	; 7
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3d 83       	std	Y+5, r19	; 0x05
    1740:	2c 83       	std	Y+4, r18	; 0x04
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	89 f0       	breq	.+34     	; 0x176e <Timer_getTimerValue+0x4c>
    174c:	2c 81       	ldd	r18, Y+4	; 0x04
    174e:	3d 81       	ldd	r19, Y+5	; 0x05
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	99 f0       	breq	.+38     	; 0x177c <Timer_getTimerValue+0x5a>
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	9d 81       	ldd	r25, Y+5	; 0x05
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	b9 f4       	brne	.+46     	; 0x178c <Timer_getTimerValue+0x6a>
	{
	case TIMER0_ID:
		return TCNT0;
    175e:	e2 e5       	ldi	r30, 0x52	; 82
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3b 83       	std	Y+3, r19	; 0x03
    176a:	2a 83       	std	Y+2, r18	; 0x02
    176c:	10 c0       	rjmp	.+32     	; 0x178e <Timer_getTimerValue+0x6c>
		break;
	case TIMER1_ID:
		return TCNT1;
    176e:	ec e4       	ldi	r30, 0x4C	; 76
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	91 81       	ldd	r25, Z+1	; 0x01
    1776:	9b 83       	std	Y+3, r25	; 0x03
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	09 c0       	rjmp	.+18     	; 0x178e <Timer_getTimerValue+0x6c>
		break;
	case TIMER2_ID:
		return TCNT2;
    177c:	e4 e4       	ldi	r30, 0x44	; 68
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3b 83       	std	Y+3, r19	; 0x03
    1788:	2a 83       	std	Y+2, r18	; 0x02
    178a:	01 c0       	rjmp	.+2      	; 0x178e <Timer_getTimerValue+0x6c>
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <Timer_getTimerValue+0x74>
		break;
	}
}
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	9f 83       	std	Y+7, r25	; 0x07
    1794:	8e 83       	std	Y+6, r24	; 0x06
    1796:	8e 81       	ldd	r24, Y+6	; 0x06
    1798:	9f 81       	ldd	r25, Y+7	; 0x07
    179a:	27 96       	adiw	r28, 0x07	; 7
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <Timer_setCallBack>:
 * Function to set the Call Back function address to the required Timer.
 * a_ptr: Pointer to the callback function.
 * timer_type: The ID of the timer to set the callback for.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_type)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <Timer_setCallBack+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <Timer_setCallBack+0x8>
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3d 83       	std	Y+5, r19	; 0x05
    17c8:	2c 83       	std	Y+4, r18	; 0x04
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	91 05       	cpc	r25, r1
    17d2:	81 f0       	breq	.+32     	; 0x17f4 <Timer_setCallBack+0x48>
    17d4:	2c 81       	ldd	r18, Y+4	; 0x04
    17d6:	3d 81       	ldd	r19, Y+5	; 0x05
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	91 f0       	breq	.+36     	; 0x1802 <Timer_setCallBack+0x56>
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	a1 f4       	brne	.+40     	; 0x180e <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_timer0 = a_ptr;
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	90 93 9b 01 	sts	0x019B, r25
    17ee:	80 93 9a 01 	sts	0x019A, r24
    17f2:	0d c0       	rjmp	.+26     	; 0x180e <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_timer1 = a_ptr;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	90 93 9d 01 	sts	0x019D, r25
    17fc:	80 93 9c 01 	sts	0x019C, r24
    1800:	06 c0       	rjmp	.+12     	; 0x180e <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_timer2 = a_ptr;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	90 93 9f 01 	sts	0x019F, r25
    180a:	80 93 9e 01 	sts	0x019E, r24
		break;
	}
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <PWM_Timer0_Start>:
 * Function to initialize Timer0 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer0_Start(const Timer_Configuration * Config_Ptr)
{
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <PWM_Timer0_Start+0xa>
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = 0;  /* Set Timer Initial value to 0. */
    1830:	e2 e5       	ldi	r30, 0x52	; 82
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR0) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR0 is calculated as:
     * OCR0 = (duty_cycle * 255) / 100
     */
    OCR0  = (Config_Ptr->duty_cycle * 255) / 100;
    1836:	0c e5       	ldi	r16, 0x5C	; 92
    1838:	10 e0       	ldi	r17, 0x00	; 0
    183a:	e9 81       	ldd	r30, Y+1	; 0x01
    183c:	fa 81       	ldd	r31, Y+2	; 0x02
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	48 2f       	mov	r20, r24
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	ca 01       	movw	r24, r20
    1846:	9c 01       	movw	r18, r24
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	c9 01       	movw	r24, r18
    184e:	96 95       	lsr	r25
    1850:	98 2f       	mov	r25, r24
    1852:	88 27       	eor	r24, r24
    1854:	97 95       	ror	r25
    1856:	87 95       	ror	r24
    1858:	82 1b       	sub	r24, r18
    185a:	93 0b       	sbc	r25, r19
    185c:	84 0f       	add	r24, r20
    185e:	95 1f       	adc	r25, r21
    1860:	24 e6       	ldi	r18, 0x64	; 100
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	b9 01       	movw	r22, r18
    1866:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <__divmodhi4>
    186a:	cb 01       	movw	r24, r22
    186c:	f8 01       	movw	r30, r16
    186e:	80 83       	st	Z, r24

    /* Set PB3/OC0 as output pin (DDRB |= (1<<PB3)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRB  = DDRB | (1<<PB3);
    1870:	a7 e3       	ldi	r26, 0x37	; 55
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e7 e3       	ldi	r30, 0x37	; 55
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	88 60       	ori	r24, 0x08	; 8
    187c:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM01:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC0 on compare match.
     *    - INVERTING: Set OC0 on compare match.
     * 3. Set clock source (CS02:0) as per Config_Ptr->timer_clock.
     */
    TCCR0 = (1<<WGM00) | (1<<WGM01) | ((Config_Ptr->mode)<<COM00) | ((Config_Ptr->timer_clock)<<CS00);
    187e:	a3 e5       	ldi	r26, 0x53	; 83
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	80 81       	ld	r24, Z
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	82 95       	swap	r24
    188e:	92 95       	swap	r25
    1890:	90 7f       	andi	r25, 0xF0	; 240
    1892:	98 27       	eor	r25, r24
    1894:	80 7f       	andi	r24, 0xF0	; 240
    1896:	98 27       	eor	r25, r24
    1898:	98 2f       	mov	r25, r24
    189a:	98 64       	ori	r25, 0x48	; 72
    189c:	e9 81       	ldd	r30, Y+1	; 0x01
    189e:	fa 81       	ldd	r31, Y+2	; 0x02
    18a0:	81 81       	ldd	r24, Z+1	; 0x01
    18a2:	89 2b       	or	r24, r25
    18a4:	8c 93       	st	X, r24
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	08 95       	ret

000018b4 <PWM_Timer2_Start>:
 * Function to initialize Timer2 with Fast PWM mode.
 * Parameters  :
 * - Config_Ptr: Pointer to the Timer configuration structure.
 */
void PWM_Timer2_Start(const Timer_Configuration * Config_Ptr)
{
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <PWM_Timer2_Start+0xa>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = 0;  /* Set Timer Initial value to 0. */
    18c6:	e4 e4       	ldi	r30, 0x44	; 68
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1

    /* Calculate and set the Compare Value (OCR2) for the desired duty cycle.
     * Duty cycle is given as a percentage (0-100), and OCR2 is calculated as:
     * OCR2 = (duty_cycle * 255) / 100
     */
    OCR2  = (Config_Ptr->duty_cycle * 255) / 100;
    18cc:	03 e4       	ldi	r16, 0x43	; 67
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	e9 81       	ldd	r30, Y+1	; 0x01
    18d2:	fa 81       	ldd	r31, Y+2	; 0x02
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	48 2f       	mov	r20, r24
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	ca 01       	movw	r24, r20
    18dc:	9c 01       	movw	r18, r24
    18de:	22 0f       	add	r18, r18
    18e0:	33 1f       	adc	r19, r19
    18e2:	c9 01       	movw	r24, r18
    18e4:	96 95       	lsr	r25
    18e6:	98 2f       	mov	r25, r24
    18e8:	88 27       	eor	r24, r24
    18ea:	97 95       	ror	r25
    18ec:	87 95       	ror	r24
    18ee:	82 1b       	sub	r24, r18
    18f0:	93 0b       	sbc	r25, r19
    18f2:	84 0f       	add	r24, r20
    18f4:	95 1f       	adc	r25, r21
    18f6:	24 e6       	ldi	r18, 0x64	; 100
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	b9 01       	movw	r22, r18
    18fc:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <__divmodhi4>
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	80 83       	st	Z, r24

    /* Set PD7/OC2 as output pin (DDRD |= (1<<PD7)).
     * This is the pin where the PWM signal will be generated.
     */
    DDRD  = DDRD | (1<<PD7);
    1906:	a1 e3       	ldi	r26, 0x31	; 49
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e1 e3       	ldi	r30, 0x31	; 49
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 68       	ori	r24, 0x80	; 128
    1912:	8c 93       	st	X, r24
     * 2. Set Compare Output Mode (COM21:0) based on the selected PWM mode:
     *    - NON_INVERTING: Clear OC2 on compare match.
     *    - INVERTING: Set OC2 on compare match.
     * 3. Set clock source (CS22:0) as per Config_Ptr->timer_clock.
     */
    TCCR2 = (1<<WGM20) | (1<<WGM21) | ((Config_Ptr->mode)<<COM20) | ((Config_Ptr->timer_clock)<<CS20);
    1914:	a5 e4       	ldi	r26, 0x45	; 69
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e9 81       	ldd	r30, Y+1	; 0x01
    191a:	fa 81       	ldd	r31, Y+2	; 0x02
    191c:	80 81       	ld	r24, Z
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 95       	swap	r24
    1924:	92 95       	swap	r25
    1926:	90 7f       	andi	r25, 0xF0	; 240
    1928:	98 27       	eor	r25, r24
    192a:	80 7f       	andi	r24, 0xF0	; 240
    192c:	98 27       	eor	r25, r24
    192e:	98 2f       	mov	r25, r24
    1930:	98 64       	ori	r25, 0x48	; 72
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	81 81       	ldd	r24, Z+1	; 0x01
    1938:	89 2b       	or	r24, r25
    193a:	8c 93       	st	X, r24
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <__vector_6>:
 * Description :
 * Interrupt Service Routine for Timer1 Input Capture Event.
 * This ISR is triggered when an edge is detected on the ICP1/PD6 pin.
 */
ISR(TIMER1_CAPT_vect)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr != NULL_PTR)
    1974:	80 91 a0 01 	lds	r24, 0x01A0
    1978:	90 91 a1 01 	lds	r25, 0x01A1
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	29 f0       	breq	.+10     	; 0x198a <__vector_6+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr)();  /* Another method: g_callBackPtr(); */
    1980:	e0 91 a0 01 	lds	r30, 0x01A0
    1984:	f0 91 a1 01 	lds	r31, 0x01A1
    1988:	09 95       	icall
    }
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <ICU_init>:
 * 4. Initialize Timer1 Registers.
 * Parameters  :
 * - Config_Ptr: Pointer to the ICU configuration structure.
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <ICU_init+0x6>
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
    /* Configure ICP1/PD6 as an input pin (DDRD &= ~(1<<PD6)) */
    DDRD &= ~(1<<PD6);
    19be:	a1 e3       	ldi	r26, 0x31	; 49
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e1 e3       	ldi	r30, 0x31	; 49
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8f 7b       	andi	r24, 0xBF	; 191
    19ca:	8c 93       	st	X, r24

    /* Timer1 always operates in Normal Mode (WGM13:0 = 0000) */
    TCCR1A = (1<<FOC1A) | (1<<FOC1B);  /* Force Output Compare for non-PWM mode */
    19cc:	ef e4       	ldi	r30, 0x4F	; 79
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	8c e0       	ldi	r24, 0x0C	; 12
    19d2:	80 83       	st	Z, r24

    /*
     * Insert the required clock value in the first three bits (CS10, CS11, and CS12)
     * of the TCCR1B Register.
     */
    TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    19d4:	ae e4       	ldi	r26, 0x4E	; 78
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ee e4       	ldi	r30, 0x4E	; 78
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	98 2f       	mov	r25, r24
    19e0:	98 7f       	andi	r25, 0xF8	; 248
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	80 81       	ld	r24, Z
    19e8:	89 2b       	or	r24, r25
    19ea:	8c 93       	st	X, r24
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    19ec:	ae e4       	ldi	r26, 0x4E	; 78
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ee e4       	ldi	r30, 0x4E	; 78
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	28 2f       	mov	r18, r24
    19f8:	2f 7b       	andi	r18, 0xBF	; 191
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	81 81       	ldd	r24, Z+1	; 0x01
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	00 24       	eor	r0, r0
    1a06:	96 95       	lsr	r25
    1a08:	87 95       	ror	r24
    1a0a:	07 94       	ror	r0
    1a0c:	96 95       	lsr	r25
    1a0e:	87 95       	ror	r24
    1a10:	07 94       	ror	r0
    1a12:	98 2f       	mov	r25, r24
    1a14:	80 2d       	mov	r24, r0
    1a16:	82 2b       	or	r24, r18
    1a18:	8c 93       	st	X, r24

    /* Initialize Timer1 counter value to 0 */
    TCNT1 = 0;
    1a1a:	ec e4       	ldi	r30, 0x4C	; 76
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	11 82       	std	Z+1, r1	; 0x01
    1a20:	10 82       	st	Z, r1

    /* Initialize the Input Capture Register (ICR1) to 0 */
    ICR1 = 0;
    1a22:	e6 e4       	ldi	r30, 0x46	; 70
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	11 82       	std	Z+1, r1	; 0x01
    1a28:	10 82       	st	Z, r1

    /* Enable the Input Capture interrupt to generate an interrupt when an edge is detected on ICP1/PD6 pin */
    TIMSK |= (1<<TICIE1);
    1a2a:	a9 e5       	ldi	r26, 0x59	; 89
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e9 e5       	ldi	r30, 0x59	; 89
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 62       	ori	r24, 0x20	; 32
    1a36:	8c 93       	st	X, r24

    /* Enable global interrupts (SREG |= (1<<7)) */
    SREG |= (1<<7);
    1a38:	af e5       	ldi	r26, 0x5F	; 95
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ef e5       	ldi	r30, 0x5F	; 95
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 68       	ori	r24, 0x80	; 128
    1a44:	8c 93       	st	X, r24
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <ICU_setCallBack>:
 * Function to set the callback function address.
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <ICU_setCallBack+0x6>
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    /* Save the address of the callback function in a global variable */
    g_callBackPtr = a_ptr;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	90 93 a1 01 	sts	0x01A1, r25
    1a66:	80 93 a0 01 	sts	0x01A0, r24
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <ICU_setEdgeDetectionType>:
 * Function to set the required edge detection.
 * Parameters  :
 * - a_edgeType: The edge detection type (FALLING or RAISING).
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	0f 92       	push	r0
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Insert the required edge type in the ICES1 bit of the TCCR1B Register.
     * ICES1 = 0: Falling edge detection.
     * ICES1 = 1: Rising edge detection.
     */
    TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1a80:	ae e4       	ldi	r26, 0x4E	; 78
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ee e4       	ldi	r30, 0x4E	; 78
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	2f 7b       	andi	r18, 0xBF	; 191
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	00 24       	eor	r0, r0
    1a96:	96 95       	lsr	r25
    1a98:	87 95       	ror	r24
    1a9a:	07 94       	ror	r0
    1a9c:	96 95       	lsr	r25
    1a9e:	87 95       	ror	r24
    1aa0:	07 94       	ror	r0
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	80 2d       	mov	r24, r0
    1aa6:	82 2b       	or	r24, r18
    1aa8:	8c 93       	st	X, r24
}
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <ICU_getInputCaptureValue>:
 * The value is stored in the Input Capture Register (ICR1).
 * Returns     :
 * - The captured value from ICR1.
 */
uint16 ICU_getInputCaptureValue(void)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    1aba:	e6 e4       	ldi	r30, 0x46	; 70
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <ICU_clearTimerValue>:
/*
 * Description :
 * Function to clear the Timer1 value to start counting from ZERO.
 */
void ICU_clearTimerValue(void)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
    1ad0:	ec e4       	ldi	r30, 0x4C	; 76
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	11 82       	std	Z+1, r1	; 0x01
    1ad6:	10 82       	st	Z, r1
}
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <ICU_deInit>:
/*
 * Description :
 * Function to disable Timer1 to stop the ICU driver.
 */
void ICU_deInit(void)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    /* Clear all Timer1/ICU registers */
    TCCR1A = 0;
    1ae6:	ef e4       	ldi	r30, 0x4F	; 79
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	10 82       	st	Z, r1
    TCCR1B = 0;
    1aec:	ee e4       	ldi	r30, 0x4E	; 78
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	10 82       	st	Z, r1
    TCNT1 = 0;
    1af2:	ec e4       	ldi	r30, 0x4C	; 76
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	11 82       	std	Z+1, r1	; 0x01
    1af8:	10 82       	st	Z, r1
    ICR1 = 0;
    1afa:	e6 e4       	ldi	r30, 0x46	; 70
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	11 82       	std	Z+1, r1	; 0x01
    1b00:	10 82       	st	Z, r1

    /* Disable the Input Capture interrupt */
    TIMSK &= ~(1<<TICIE1);
    1b02:	a9 e5       	ldi	r26, 0x59	; 89
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e9 e5       	ldi	r30, 0x59	; 89
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8f 7d       	andi	r24, 0xDF	; 223
    1b0e:	8c 93       	st	X, r24

    /* Reset the global callback pointer to NULL */
    g_callBackPtr = NULL_PTR;
    1b10:	10 92 a1 01 	sts	0x01A1, r1
    1b14:	10 92 a0 01 	sts	0x01A0, r1
}
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <GPIO_setupPinDirection>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - direction: The direction of the pin (PIN_INPUT or PIN_OUTPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <GPIO_setupPinDirection+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <GPIO_setupPinDirection+0x8>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	6a 83       	std	Y+2, r22	; 0x02
    1b30:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <GPIO_setupPinDirection+0x1c>
    1b38:	d5 c0       	rjmp	.+426    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	84 30       	cpi	r24, 0x04	; 4
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <GPIO_setupPinDirection+0x24>
    1b40:	d1 c0       	rjmp	.+418    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Setup the pin direction as required */
        switch (port_num)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	3d 83       	std	Y+5, r19	; 0x05
    1b4a:	2c 83       	std	Y+4, r18	; 0x04
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <GPIO_setupPinDirection+0x3a>
    1b56:	43 c0       	rjmp	.+134    	; 0x1bde <GPIO_setupPinDirection+0xc0>
    1b58:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5c:	22 30       	cpi	r18, 0x02	; 2
    1b5e:	31 05       	cpc	r19, r1
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <GPIO_setupPinDirection+0x4e>
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <GPIO_setupPinDirection+0x68>
    1b6a:	bc c0       	rjmp	.+376    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
    1b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	31 05       	cpc	r19, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <GPIO_setupPinDirection+0x5a>
    1b76:	5f c0       	rjmp	.+190    	; 0x1c36 <GPIO_setupPinDirection+0x118>
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <GPIO_setupPinDirection+0x66>
    1b82:	85 c0       	rjmp	.+266    	; 0x1c8e <GPIO_setupPinDirection+0x170>
    1b84:	af c0       	rjmp	.+350    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
        {
        case PORTA_ID:
            if (direction == PIN_OUTPUT)
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	a1 f4       	brne	.+40     	; 0x1bb4 <GPIO_setupPinDirection+0x96>
            {
                SET_BIT(DDRA, pin_num);  /* Set pin as output */
    1b8c:	aa e3       	ldi	r26, 0x3A	; 58
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ea e3       	ldi	r30, 0x3A	; 58
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <GPIO_setupPinDirection+0x8c>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <GPIO_setupPinDirection+0x88>
    1bae:	84 2b       	or	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	98 c0       	rjmp	.+304    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRA, pin_num);  /* Set pin as input */
    1bb4:	aa e3       	ldi	r26, 0x3A	; 58
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ea e3       	ldi	r30, 0x3A	; 58
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_setupPinDirection+0xb4>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_setupPinDirection+0xb0>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	83 c0       	rjmp	.+262    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTB_ID:
            if (direction == PIN_OUTPUT)
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <GPIO_setupPinDirection+0xee>
            {
                SET_BIT(DDRB, pin_num);  /* Set pin as output */
    1be4:	a7 e3       	ldi	r26, 0x37	; 55
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e7 e3       	ldi	r30, 0x37	; 55
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <GPIO_setupPinDirection+0xe4>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <GPIO_setupPinDirection+0xe0>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	6c c0       	rjmp	.+216    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRB, pin_num);  /* Set pin as input */
    1c0c:	a7 e3       	ldi	r26, 0x37	; 55
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e7 e3       	ldi	r30, 0x37	; 55
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_setupPinDirection+0x10c>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_setupPinDirection+0x108>
    1c2e:	80 95       	com	r24
    1c30:	84 23       	and	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	57 c0       	rjmp	.+174    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTC_ID:
            if (direction == PIN_OUTPUT)
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	a1 f4       	brne	.+40     	; 0x1c64 <GPIO_setupPinDirection+0x146>
            {
                SET_BIT(DDRC, pin_num);  /* Set pin as output */
    1c3c:	a4 e3       	ldi	r26, 0x34	; 52
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e4 e3       	ldi	r30, 0x34	; 52
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <GPIO_setupPinDirection+0x13c>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <GPIO_setupPinDirection+0x138>
    1c5e:	84 2b       	or	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	40 c0       	rjmp	.+128    	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRC, pin_num);  /* Set pin as input */
    1c64:	a4 e3       	ldi	r26, 0x34	; 52
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e4 e3       	ldi	r30, 0x34	; 52
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <GPIO_setupPinDirection+0x164>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <GPIO_setupPinDirection+0x160>
    1c86:	80 95       	com	r24
    1c88:	84 23       	and	r24, r20
    1c8a:	8c 93       	st	X, r24
    1c8c:	2b c0       	rjmp	.+86     	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
            }
            break;
        case PORTD_ID:
            if (direction == PIN_OUTPUT)
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	a1 f4       	brne	.+40     	; 0x1cbc <GPIO_setupPinDirection+0x19e>
            {
                SET_BIT(DDRD, pin_num);  /* Set pin as output */
    1c94:	a1 e3       	ldi	r26, 0x31	; 49
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e1 e3       	ldi	r30, 0x31	; 49
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <GPIO_setupPinDirection+0x194>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <GPIO_setupPinDirection+0x190>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	14 c0       	rjmp	.+40     	; 0x1ce4 <GPIO_setupPinDirection+0x1c6>
            }
            else
            {
                CLEAR_BIT(DDRD, pin_num);  /* Set pin as input */
    1cbc:	a1 e3       	ldi	r26, 0x31	; 49
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e1 e3       	ldi	r30, 0x31	; 49
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <GPIO_setupPinDirection+0x1bc>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <GPIO_setupPinDirection+0x1b8>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <GPIO_writePin>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * - value: The value to write (Logic High or Logic Low).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <GPIO_writePin+0x6>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <GPIO_writePin+0x8>
    1cfc:	0f 92       	push	r0
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	6a 83       	std	Y+2, r22	; 0x02
    1d06:	4b 83       	std	Y+3, r20	; 0x03
    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, do nothing.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	88 30       	cpi	r24, 0x08	; 8
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <GPIO_writePin+0x1c>
    1d0e:	d5 c0       	rjmp	.+426    	; 0x1eba <GPIO_writePin+0x1c6>
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	84 30       	cpi	r24, 0x04	; 4
    1d14:	08 f0       	brcs	.+2      	; 0x1d18 <GPIO_writePin+0x24>
    1d16:	d1 c0       	rjmp	.+418    	; 0x1eba <GPIO_writePin+0x1c6>
        /* Do Nothing */
    }
    else
    {
        /* Write the pin value as required */
        switch (port_num)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	3d 83       	std	Y+5, r19	; 0x05
    1d20:	2c 83       	std	Y+4, r18	; 0x04
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	9d 81       	ldd	r25, Y+5	; 0x05
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <GPIO_writePin+0x3a>
    1d2c:	43 c0       	rjmp	.+134    	; 0x1db4 <GPIO_writePin+0xc0>
    1d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d30:	3d 81       	ldd	r19, Y+5	; 0x05
    1d32:	22 30       	cpi	r18, 0x02	; 2
    1d34:	31 05       	cpc	r19, r1
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <GPIO_writePin+0x4e>
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	71 f0       	breq	.+28     	; 0x1d5c <GPIO_writePin+0x68>
    1d40:	bc c0       	rjmp	.+376    	; 0x1eba <GPIO_writePin+0x1c6>
    1d42:	2c 81       	ldd	r18, Y+4	; 0x04
    1d44:	3d 81       	ldd	r19, Y+5	; 0x05
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <GPIO_writePin+0x5a>
    1d4c:	5f c0       	rjmp	.+190    	; 0x1e0c <GPIO_writePin+0x118>
    1d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d50:	9d 81       	ldd	r25, Y+5	; 0x05
    1d52:	83 30       	cpi	r24, 0x03	; 3
    1d54:	91 05       	cpc	r25, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <GPIO_writePin+0x66>
    1d58:	85 c0       	rjmp	.+266    	; 0x1e64 <GPIO_writePin+0x170>
    1d5a:	af c0       	rjmp	.+350    	; 0x1eba <GPIO_writePin+0x1c6>
        {
        case PORTA_ID:
            if (value == LOGIC_HIGH)
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	a1 f4       	brne	.+40     	; 0x1d8a <GPIO_writePin+0x96>
            {
                SET_BIT(PORTA, pin_num);  /* Set pin to Logic High */
    1d62:	ab e3       	ldi	r26, 0x3B	; 59
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	eb e3       	ldi	r30, 0x3B	; 59
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 2e       	mov	r0, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <GPIO_writePin+0x8c>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	0a 94       	dec	r0
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <GPIO_writePin+0x88>
    1d84:	84 2b       	or	r24, r20
    1d86:	8c 93       	st	X, r24
    1d88:	98 c0       	rjmp	.+304    	; 0x1eba <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTA, pin_num);  /* Set pin to Logic Low */
    1d8a:	ab e3       	ldi	r26, 0x3B	; 59
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb e3       	ldi	r30, 0x3B	; 59
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <GPIO_writePin+0xb4>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <GPIO_writePin+0xb0>
    1dac:	80 95       	com	r24
    1dae:	84 23       	and	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	83 c0       	rjmp	.+262    	; 0x1eba <GPIO_writePin+0x1c6>
            }
            break;
        case PORTB_ID:
            if (value == LOGIC_HIGH)
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	a1 f4       	brne	.+40     	; 0x1de2 <GPIO_writePin+0xee>
            {
                SET_BIT(PORTB, pin_num);  /* Set pin to Logic High */
    1dba:	a8 e3       	ldi	r26, 0x38	; 56
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e8 e3       	ldi	r30, 0x38	; 56
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <GPIO_writePin+0xe4>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <GPIO_writePin+0xe0>
    1ddc:	84 2b       	or	r24, r20
    1dde:	8c 93       	st	X, r24
    1de0:	6c c0       	rjmp	.+216    	; 0x1eba <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTB, pin_num);  /* Set pin to Logic Low */
    1de2:	a8 e3       	ldi	r26, 0x38	; 56
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e8 e3       	ldi	r30, 0x38	; 56
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <GPIO_writePin+0x10c>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <GPIO_writePin+0x108>
    1e04:	80 95       	com	r24
    1e06:	84 23       	and	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	57 c0       	rjmp	.+174    	; 0x1eba <GPIO_writePin+0x1c6>
            }
            break;
        case PORTC_ID:
            if (value == LOGIC_HIGH)
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	a1 f4       	brne	.+40     	; 0x1e3a <GPIO_writePin+0x146>
            {
                SET_BIT(PORTC, pin_num);  /* Set pin to Logic High */
    1e12:	a5 e3       	ldi	r26, 0x35	; 53
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e3       	ldi	r30, 0x35	; 53
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 2e       	mov	r0, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <GPIO_writePin+0x13c>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	0a 94       	dec	r0
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <GPIO_writePin+0x138>
    1e34:	84 2b       	or	r24, r20
    1e36:	8c 93       	st	X, r24
    1e38:	40 c0       	rjmp	.+128    	; 0x1eba <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTC, pin_num);  /* Set pin to Logic Low */
    1e3a:	a5 e3       	ldi	r26, 0x35	; 53
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e5 e3       	ldi	r30, 0x35	; 53
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	48 2f       	mov	r20, r24
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 2e       	mov	r0, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <GPIO_writePin+0x164>
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	0a 94       	dec	r0
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <GPIO_writePin+0x160>
    1e5c:	80 95       	com	r24
    1e5e:	84 23       	and	r24, r20
    1e60:	8c 93       	st	X, r24
    1e62:	2b c0       	rjmp	.+86     	; 0x1eba <GPIO_writePin+0x1c6>
            }
            break;
        case PORTD_ID:
            if (value == LOGIC_HIGH)
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	a1 f4       	brne	.+40     	; 0x1e92 <GPIO_writePin+0x19e>
            {
                SET_BIT(PORTD, pin_num);  /* Set pin to Logic High */
    1e6a:	a2 e3       	ldi	r26, 0x32	; 50
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e2 e3       	ldi	r30, 0x32	; 50
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <GPIO_writePin+0x194>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <GPIO_writePin+0x190>
    1e8c:	84 2b       	or	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <GPIO_writePin+0x1c6>
            }
            else
            {
                CLEAR_BIT(PORTD, pin_num);  /* Set pin to Logic Low */
    1e92:	a2 e3       	ldi	r26, 0x32	; 50
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e2 e3       	ldi	r30, 0x32	; 50
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <GPIO_writePin+0x1bc>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <GPIO_writePin+0x1b8>
    1eb4:	80 95       	com	r24
    1eb6:	84 23       	and	r24, r20
    1eb8:	8c 93       	st	X, r24
            }
            break;
        }
    }
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <GPIO_readPin>:
 * - pin_num: The pin number (PIN0_ID to PIN7_ID).
 * Returns     :
 * - The value of the pin (Logic High or Logic Low).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <GPIO_readPin+0x6>
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <GPIO_readPin+0x8>
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	8a 83       	std	Y+2, r24	; 0x02
    1eda:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    1edc:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number or pin number is invalid.
     * If invalid, return Logic Low.
     */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	88 30       	cpi	r24, 0x08	; 8
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <GPIO_readPin+0x1c>
    1ee4:	84 c0       	rjmp	.+264    	; 0x1fee <GPIO_readPin+0x124>
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <GPIO_readPin+0x24>
    1eec:	80 c0       	rjmp	.+256    	; 0x1fee <GPIO_readPin+0x124>
        /* Do Nothing */
    }
    else
    {
        /* Read the pin value as required */
        switch (port_num)
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	3d 83       	std	Y+5, r19	; 0x05
    1ef6:	2c 83       	std	Y+4, r18	; 0x04
    1ef8:	4c 81       	ldd	r20, Y+4	; 0x04
    1efa:	5d 81       	ldd	r21, Y+5	; 0x05
    1efc:	41 30       	cpi	r20, 0x01	; 1
    1efe:	51 05       	cpc	r21, r1
    1f00:	79 f1       	breq	.+94     	; 0x1f60 <GPIO_readPin+0x96>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	82 30       	cpi	r24, 0x02	; 2
    1f08:	91 05       	cpc	r25, r1
    1f0a:	34 f4       	brge	.+12     	; 0x1f18 <GPIO_readPin+0x4e>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	21 15       	cp	r18, r1
    1f12:	31 05       	cpc	r19, r1
    1f14:	69 f0       	breq	.+26     	; 0x1f30 <GPIO_readPin+0x66>
    1f16:	6b c0       	rjmp	.+214    	; 0x1fee <GPIO_readPin+0x124>
    1f18:	4c 81       	ldd	r20, Y+4	; 0x04
    1f1a:	5d 81       	ldd	r21, Y+5	; 0x05
    1f1c:	42 30       	cpi	r20, 0x02	; 2
    1f1e:	51 05       	cpc	r21, r1
    1f20:	b9 f1       	breq	.+110    	; 0x1f90 <GPIO_readPin+0xc6>
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	9d 81       	ldd	r25, Y+5	; 0x05
    1f26:	83 30       	cpi	r24, 0x03	; 3
    1f28:	91 05       	cpc	r25, r1
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <GPIO_readPin+0x64>
    1f2c:	49 c0       	rjmp	.+146    	; 0x1fc0 <GPIO_readPin+0xf6>
    1f2e:	5f c0       	rjmp	.+190    	; 0x1fee <GPIO_readPin+0x124>
        {
        case PORTA_ID:
            if (BIT_IS_SET(PINA, pin_num))  /* Check if the pin is Logic High */
    1f30:	e9 e3       	ldi	r30, 0x39	; 57
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a9 01       	movw	r20, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <GPIO_readPin+0x7e>
    1f44:	55 95       	asr	r21
    1f46:	47 95       	ror	r20
    1f48:	8a 95       	dec	r24
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <GPIO_readPin+0x7a>
    1f4c:	ca 01       	movw	r24, r20
    1f4e:	81 70       	andi	r24, 0x01	; 1
    1f50:	90 70       	andi	r25, 0x00	; 0
    1f52:	88 23       	and	r24, r24
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <GPIO_readPin+0x92>
            {
                pin_value = LOGIC_HIGH;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	49 c0       	rjmp	.+146    	; 0x1fee <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1f5c:	19 82       	std	Y+1, r1	; 0x01
    1f5e:	47 c0       	rjmp	.+142    	; 0x1fee <GPIO_readPin+0x124>
            }
            break;
        case PORTB_ID:
            if (BIT_IS_SET(PINB, pin_num))  /* Check if the pin is Logic High */
    1f60:	e6 e3       	ldi	r30, 0x36	; 54
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a9 01       	movw	r20, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <GPIO_readPin+0xae>
    1f74:	55 95       	asr	r21
    1f76:	47 95       	ror	r20
    1f78:	8a 95       	dec	r24
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <GPIO_readPin+0xaa>
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	81 70       	andi	r24, 0x01	; 1
    1f80:	90 70       	andi	r25, 0x00	; 0
    1f82:	88 23       	and	r24, r24
    1f84:	19 f0       	breq	.+6      	; 0x1f8c <GPIO_readPin+0xc2>
            {
                pin_value = LOGIC_HIGH;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	31 c0       	rjmp	.+98     	; 0x1fee <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	2f c0       	rjmp	.+94     	; 0x1fee <GPIO_readPin+0x124>
            }
            break;
        case PORTC_ID:
            if (BIT_IS_SET(PINC, pin_num))  /* Check if the pin is Logic High */
    1f90:	e3 e3       	ldi	r30, 0x33	; 51
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <GPIO_readPin+0xde>
    1fa4:	55 95       	asr	r21
    1fa6:	47 95       	ror	r20
    1fa8:	8a 95       	dec	r24
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <GPIO_readPin+0xda>
    1fac:	ca 01       	movw	r24, r20
    1fae:	81 70       	andi	r24, 0x01	; 1
    1fb0:	90 70       	andi	r25, 0x00	; 0
    1fb2:	88 23       	and	r24, r24
    1fb4:	19 f0       	breq	.+6      	; 0x1fbc <GPIO_readPin+0xf2>
            {
                pin_value = LOGIC_HIGH;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	19 c0       	rjmp	.+50     	; 0x1fee <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	17 c0       	rjmp	.+46     	; 0x1fee <GPIO_readPin+0x124>
            }
            break;
        case PORTD_ID:
            if (BIT_IS_SET(PIND, pin_num))  /* Check if the pin is Logic High */
    1fc0:	e0 e3       	ldi	r30, 0x30	; 48
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a9 01       	movw	r20, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <GPIO_readPin+0x10e>
    1fd4:	55 95       	asr	r21
    1fd6:	47 95       	ror	r20
    1fd8:	8a 95       	dec	r24
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <GPIO_readPin+0x10a>
    1fdc:	ca 01       	movw	r24, r20
    1fde:	81 70       	andi	r24, 0x01	; 1
    1fe0:	90 70       	andi	r25, 0x00	; 0
    1fe2:	88 23       	and	r24, r24
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <GPIO_readPin+0x122>
            {
                pin_value = LOGIC_HIGH;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <GPIO_readPin+0x124>
            }
            else
            {
                pin_value = LOGIC_LOW;
    1fec:	19 82       	std	Y+1, r1	; 0x01
            }
            break;
        }
    }

    return pin_value;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <GPIO_setupPortDirection>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - direction: The direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_setupPortDirection+0x6>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <GPIO_setupPortDirection+0x8>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	84 30       	cpi	r24, 0x04	; 4
    2014:	90 f5       	brcc	.+100    	; 0x207a <GPIO_setupPortDirection+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Setup the port direction as required */
        switch (port_num)
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	3c 83       	std	Y+4, r19	; 0x04
    201e:	2b 83       	std	Y+3, r18	; 0x03
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	91 05       	cpc	r25, r1
    2028:	d1 f0       	breq	.+52     	; 0x205e <GPIO_setupPortDirection+0x5e>
    202a:	2b 81       	ldd	r18, Y+3	; 0x03
    202c:	3c 81       	ldd	r19, Y+4	; 0x04
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	2c f4       	brge	.+10     	; 0x203e <GPIO_setupPortDirection+0x3e>
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	61 f0       	breq	.+24     	; 0x2054 <GPIO_setupPortDirection+0x54>
    203c:	1e c0       	rjmp	.+60     	; 0x207a <GPIO_setupPortDirection+0x7a>
    203e:	2b 81       	ldd	r18, Y+3	; 0x03
    2040:	3c 81       	ldd	r19, Y+4	; 0x04
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	81 f0       	breq	.+32     	; 0x2068 <GPIO_setupPortDirection+0x68>
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	91 05       	cpc	r25, r1
    2050:	81 f0       	breq	.+32     	; 0x2072 <GPIO_setupPortDirection+0x72>
    2052:	13 c0       	rjmp	.+38     	; 0x207a <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;  /* Set port A direction */
    2054:	ea e3       	ldi	r30, 0x3A	; 58
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	80 83       	st	Z, r24
    205c:	0e c0       	rjmp	.+28     	; 0x207a <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;  /* Set port B direction */
    205e:	e7 e3       	ldi	r30, 0x37	; 55
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	80 83       	st	Z, r24
    2066:	09 c0       	rjmp	.+18     	; 0x207a <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;  /* Set port C direction */
    2068:	e4 e3       	ldi	r30, 0x34	; 52
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	80 83       	st	Z, r24
    2070:	04 c0       	rjmp	.+8      	; 0x207a <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;  /* Set port D direction */
    2072:	e1 e3       	ldi	r30, 0x31	; 49
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	80 83       	st	Z, r24
            break;
        }
    }
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <GPIO_writePort>:
 * Parameters  :
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * - value: The value to write on the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <GPIO_writePort+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <GPIO_writePort+0x8>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input port number is invalid.
     * If invalid, do nothing.
     */
    if (port_num >= NUM_OF_PORTS)
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	90 f5       	brcc	.+100    	; 0x2102 <GPIO_writePort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Write the port value as required */
        switch (port_num)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3c 83       	std	Y+4, r19	; 0x04
    20a6:	2b 83       	std	Y+3, r18	; 0x03
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	d1 f0       	breq	.+52     	; 0x20e6 <GPIO_writePort+0x5e>
    20b2:	2b 81       	ldd	r18, Y+3	; 0x03
    20b4:	3c 81       	ldd	r19, Y+4	; 0x04
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <GPIO_writePort+0x3e>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	61 f0       	breq	.+24     	; 0x20dc <GPIO_writePort+0x54>
    20c4:	1e c0       	rjmp	.+60     	; 0x2102 <GPIO_writePort+0x7a>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <GPIO_writePort+0x68>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	81 f0       	breq	.+32     	; 0x20fa <GPIO_writePort+0x72>
    20da:	13 c0       	rjmp	.+38     	; 0x2102 <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;  /* Write value to port A */
    20dc:	eb e3       	ldi	r30, 0x3B	; 59
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	80 83       	st	Z, r24
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;  /* Write value to port B */
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	80 83       	st	Z, r24
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;  /* Write value to port C */
    20f0:	e5 e3       	ldi	r30, 0x35	; 53
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	80 83       	st	Z, r24
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;  /* Write value to port D */
    20fa:	e2 e3       	ldi	r30, 0x32	; 50
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 83       	st	Z, r24
            break;
        }
    }
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <GPIO_readPort>:
 * - port_num: The port number (PORTA_ID, PORTB_ID, PORTC_ID, PORTD_ID).
 * Returns     :
 * - The value of the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <GPIO_readPort+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <GPIO_readPort+0x8>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
    211e:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Check if the input port number is invalid.
     * If invalid, return ZERO.
     */
    if (port_num >= NUM_OF_PORTS)
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	84 30       	cpi	r24, 0x04	; 4
    2124:	90 f5       	brcc	.+100    	; 0x218a <GPIO_readPort+0x7a>
        /* Do Nothing */
    }
    else
    {
        /* Read the port value as required */
        switch (port_num)
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3c 83       	std	Y+4, r19	; 0x04
    212e:	2b 83       	std	Y+3, r18	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	91 05       	cpc	r25, r1
    2138:	d1 f0       	breq	.+52     	; 0x216e <GPIO_readPort+0x5e>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	2c f4       	brge	.+10     	; 0x214e <GPIO_readPort+0x3e>
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	61 f0       	breq	.+24     	; 0x2164 <GPIO_readPort+0x54>
    214c:	1e c0       	rjmp	.+60     	; 0x218a <GPIO_readPort+0x7a>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	81 f0       	breq	.+32     	; 0x2178 <GPIO_readPort+0x68>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	91 05       	cpc	r25, r1
    2160:	81 f0       	breq	.+32     	; 0x2182 <GPIO_readPort+0x72>
    2162:	13 c0       	rjmp	.+38     	; 0x218a <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            value = PINA;  /* Read value from port A */
    2164:	e9 e3       	ldi	r30, 0x39	; 57
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	0e c0       	rjmp	.+28     	; 0x218a <GPIO_readPort+0x7a>
            break;
        case PORTB_ID:
            value = PINB;  /* Read value from port B */
    216e:	e6 e3       	ldi	r30, 0x36	; 54
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	09 c0       	rjmp	.+18     	; 0x218a <GPIO_readPort+0x7a>
            break;
        case PORTC_ID:
            value = PINC;  /* Read value from port C */
    2178:	e3 e3       	ldi	r30, 0x33	; 51
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	04 c0       	rjmp	.+8      	; 0x218a <GPIO_readPort+0x7a>
            break;
        case PORTD_ID:
            value = PIND;  /* Read value from port D */
    2182:	e0 e3       	ldi	r30, 0x30	; 48
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return value;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <__vector_1>:
 * Description :
 * Interrupt Service Routine for INT0.
 * This ISR is called when an interrupt is triggered on INT0.
 */
ISR(INT0_vect)
{
    219a:	1f 92       	push	r1
    219c:	0f 92       	push	r0
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	0f 92       	push	r0
    21a2:	11 24       	eor	r1, r1
    21a4:	2f 93       	push	r18
    21a6:	3f 93       	push	r19
    21a8:	4f 93       	push	r20
    21aa:	5f 93       	push	r21
    21ac:	6f 93       	push	r22
    21ae:	7f 93       	push	r23
    21b0:	8f 93       	push	r24
    21b2:	9f 93       	push	r25
    21b4:	af 93       	push	r26
    21b6:	bf 93       	push	r27
    21b8:	ef 93       	push	r30
    21ba:	ff 93       	push	r31
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT0 != NULL_PTR)
    21c4:	80 91 a2 01 	lds	r24, 0x01A2
    21c8:	90 91 a3 01 	lds	r25, 0x01A3
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	29 f0       	breq	.+10     	; 0x21da <__vector_1+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT0)();
    21d0:	e0 91 a2 01 	lds	r30, 0x01A2
    21d4:	f0 91 a3 01 	lds	r31, 0x01A3
    21d8:	09 95       	icall
    }
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	bf 91       	pop	r27
    21e4:	af 91       	pop	r26
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	7f 91       	pop	r23
    21ec:	6f 91       	pop	r22
    21ee:	5f 91       	pop	r21
    21f0:	4f 91       	pop	r20
    21f2:	3f 91       	pop	r19
    21f4:	2f 91       	pop	r18
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	0f 90       	pop	r0
    21fc:	1f 90       	pop	r1
    21fe:	18 95       	reti

00002200 <__vector_2>:
 * Description :
 * Interrupt Service Routine for INT1.
 * This ISR is called when an interrupt is triggered on INT1.
 */
ISR(INT1_vect)
{
    2200:	1f 92       	push	r1
    2202:	0f 92       	push	r0
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	0f 92       	push	r0
    2208:	11 24       	eor	r1, r1
    220a:	2f 93       	push	r18
    220c:	3f 93       	push	r19
    220e:	4f 93       	push	r20
    2210:	5f 93       	push	r21
    2212:	6f 93       	push	r22
    2214:	7f 93       	push	r23
    2216:	8f 93       	push	r24
    2218:	9f 93       	push	r25
    221a:	af 93       	push	r26
    221c:	bf 93       	push	r27
    221e:	ef 93       	push	r30
    2220:	ff 93       	push	r31
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT1 != NULL_PTR)
    222a:	80 91 a4 01 	lds	r24, 0x01A4
    222e:	90 91 a5 01 	lds	r25, 0x01A5
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	29 f0       	breq	.+10     	; 0x2240 <__vector_2+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT1)();
    2236:	e0 91 a4 01 	lds	r30, 0x01A4
    223a:	f0 91 a5 01 	lds	r31, 0x01A5
    223e:	09 95       	icall
    }
}
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	ff 91       	pop	r31
    2246:	ef 91       	pop	r30
    2248:	bf 91       	pop	r27
    224a:	af 91       	pop	r26
    224c:	9f 91       	pop	r25
    224e:	8f 91       	pop	r24
    2250:	7f 91       	pop	r23
    2252:	6f 91       	pop	r22
    2254:	5f 91       	pop	r21
    2256:	4f 91       	pop	r20
    2258:	3f 91       	pop	r19
    225a:	2f 91       	pop	r18
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	0f 90       	pop	r0
    2262:	1f 90       	pop	r1
    2264:	18 95       	reti

00002266 <__vector_3>:
 * Description :
 * Interrupt Service Routine for INT2.
 * This ISR is called when an interrupt is triggered on INT2.
 */
ISR(INT2_vect)
{
    2266:	1f 92       	push	r1
    2268:	0f 92       	push	r0
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	0f 92       	push	r0
    226e:	11 24       	eor	r1, r1
    2270:	2f 93       	push	r18
    2272:	3f 93       	push	r19
    2274:	4f 93       	push	r20
    2276:	5f 93       	push	r21
    2278:	6f 93       	push	r22
    227a:	7f 93       	push	r23
    227c:	8f 93       	push	r24
    227e:	9f 93       	push	r25
    2280:	af 93       	push	r26
    2282:	bf 93       	push	r27
    2284:	ef 93       	push	r30
    2286:	ff 93       	push	r31
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_INT2 != NULL_PTR)
    2290:	80 91 a6 01 	lds	r24, 0x01A6
    2294:	90 91 a7 01 	lds	r25, 0x01A7
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	29 f0       	breq	.+10     	; 0x22a6 <__vector_3+0x40>
    {
        /* Call the callback function in the application after the edge is detected */
        (*g_callBackPtr_INT2)();
    229c:	e0 91 a6 01 	lds	r30, 0x01A6
    22a0:	f0 91 a7 01 	lds	r31, 0x01A7
    22a4:	09 95       	icall
    }
}
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	ff 91       	pop	r31
    22ac:	ef 91       	pop	r30
    22ae:	bf 91       	pop	r27
    22b0:	af 91       	pop	r26
    22b2:	9f 91       	pop	r25
    22b4:	8f 91       	pop	r24
    22b6:	7f 91       	pop	r23
    22b8:	6f 91       	pop	r22
    22ba:	5f 91       	pop	r21
    22bc:	4f 91       	pop	r20
    22be:	3f 91       	pop	r19
    22c0:	2f 91       	pop	r18
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <external_interrupt_init>:
 * This function configures the interrupt sense control and enables the interrupt.
 * Parameters  :
 * - a_ptr: Pointer to the external interrupt configuration structure.
 */
void external_interrupt_init(const EXT_INT_ConfigType * a_ptr)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <external_interrupt_init+0x6>
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <external_interrupt_init+0x8>
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
    switch (a_ptr->INT_ID)
    22dc:	e9 81       	ldd	r30, Y+1	; 0x01
    22de:	fa 81       	ldd	r31, Y+2	; 0x02
    22e0:	80 81       	ld	r24, Z
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	3c 83       	std	Y+4, r19	; 0x04
    22e8:	2b 83       	std	Y+3, r18	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	91 05       	cpc	r25, r1
    22f2:	31 f1       	breq	.+76     	; 0x2340 <external_interrupt_init+0x74>
    22f4:	2b 81       	ldd	r18, Y+3	; 0x03
    22f6:	3c 81       	ldd	r19, Y+4	; 0x04
    22f8:	22 30       	cpi	r18, 0x02	; 2
    22fa:	31 05       	cpc	r19, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <external_interrupt_init+0x34>
    22fe:	41 c0       	rjmp	.+130    	; 0x2382 <external_interrupt_init+0xb6>
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	09 f0       	breq	.+2      	; 0x230a <external_interrupt_init+0x3e>
    2308:	5e c0       	rjmp	.+188    	; 0x23c6 <external_interrupt_init+0xfa>
    {
    case INT_0:
        DDRD &= (~(1 << PD2));  /* Configure INT0/PD2 as input pin */
    230a:	a1 e3       	ldi	r26, 0x31	; 49
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e1 e3       	ldi	r30, 0x31	; 49
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	8b 7f       	andi	r24, 0xFB	; 251
    2316:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT0:
         * - Falling edge: ISC00 = 0, ISC01 = 1
         * - Rising edge: ISC00 = 1, ISC01 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC00 | 1 << ISC01)) | ((a_ptr->INT_Sense) << ISC00);
    2318:	a5 e5       	ldi	r26, 0x55	; 85
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e5 e5       	ldi	r30, 0x55	; 85
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	98 2f       	mov	r25, r24
    2324:	9c 7f       	andi	r25, 0xFC	; 252
    2326:	e9 81       	ldd	r30, Y+1	; 0x01
    2328:	fa 81       	ldd	r31, Y+2	; 0x02
    232a:	81 81       	ldd	r24, Z+1	; 0x01
    232c:	89 2b       	or	r24, r25
    232e:	8c 93       	st	X, r24

        /* Enable external interrupt INT0 */
        GICR |= (1 << INT0);
    2330:	ab e5       	ldi	r26, 0x5B	; 91
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb e5       	ldi	r30, 0x5B	; 91
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 64       	ori	r24, 0x40	; 64
    233c:	8c 93       	st	X, r24
    233e:	43 c0       	rjmp	.+134    	; 0x23c6 <external_interrupt_init+0xfa>
        break;

    case INT_1:
        DDRD &= (~(1 << PD3));  /* Configure INT1/PD3 as input pin */
    2340:	a1 e3       	ldi	r26, 0x31	; 49
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e1 e3       	ldi	r30, 0x31	; 49
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	87 7f       	andi	r24, 0xF7	; 247
    234c:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT1:
         * - Falling edge: ISC10 = 0, ISC11 = 1
         * - Rising edge: ISC10 = 1, ISC11 = 1
         */
        MCUCR = (MCUCR & ~(1 << ISC10 | 1 << ISC11)) | ((a_ptr->INT_Sense) << ISC10);
    234e:	a5 e5       	ldi	r26, 0x55	; 85
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e5 e5       	ldi	r30, 0x55	; 85
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	23 7f       	andi	r18, 0xF3	; 243
    235c:	e9 81       	ldd	r30, Y+1	; 0x01
    235e:	fa 81       	ldd	r31, Y+2	; 0x02
    2360:	81 81       	ldd	r24, Z+1	; 0x01
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	82 2b       	or	r24, r18
    2370:	8c 93       	st	X, r24

        /* Enable external interrupt INT1 */
        GICR |= (1 << INT1);
    2372:	ab e5       	ldi	r26, 0x5B	; 91
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	eb e5       	ldi	r30, 0x5B	; 91
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	80 68       	ori	r24, 0x80	; 128
    237e:	8c 93       	st	X, r24
    2380:	22 c0       	rjmp	.+68     	; 0x23c6 <external_interrupt_init+0xfa>
        break;

    case INT_2:
        DDRB &= (~(1 << PB2));  /* Configure INT2/PB2 as input pin */
    2382:	a7 e3       	ldi	r26, 0x37	; 55
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e7 e3       	ldi	r30, 0x37	; 55
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8b 7f       	andi	r24, 0xFB	; 251
    238e:	8c 93       	st	X, r24
        /*
         * Configure the sense control for INT2:
         * - Falling edge: ISC2 = 0
         * - Rising edge: ISC2 = 1
         */
        if (a_ptr->INT_Sense == RISING_EDGE_INT2) {
    2390:	e9 81       	ldd	r30, Y+1	; 0x01
    2392:	fa 81       	ldd	r31, Y+2	; 0x02
    2394:	81 81       	ldd	r24, Z+1	; 0x01
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	41 f4       	brne	.+16     	; 0x23aa <external_interrupt_init+0xde>
            MCUCSR |= (1 << ISC2);
    239a:	a4 e5       	ldi	r26, 0x54	; 84
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e4 e5       	ldi	r30, 0x54	; 84
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	80 64       	ori	r24, 0x40	; 64
    23a6:	8c 93       	st	X, r24
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <external_interrupt_init+0xec>
        } else {
            MCUCSR &= ~(1 << ISC2);
    23aa:	a4 e5       	ldi	r26, 0x54	; 84
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e4 e5       	ldi	r30, 0x54	; 84
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	8f 7b       	andi	r24, 0xBF	; 191
    23b6:	8c 93       	st	X, r24
        }

        /* Enable external interrupt INT2 */
        GICR |= (1 << INT2);
    23b8:	ab e5       	ldi	r26, 0x5B	; 91
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	eb e5       	ldi	r30, 0x5B	; 91
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	80 62       	ori	r24, 0x20	; 32
    23c4:	8c 93       	st	X, r24
        break;
    }
}
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <external_interrupt_deinit>:
 * This function disables the specified external interrupt.
 * Parameters  :
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_deinit(EXT_INT_Type INT_ID)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <external_interrupt_deinit+0x6>
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
    switch (INT_ID)
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	3b 83       	std	Y+3, r19	; 0x03
    23ea:	2a 83       	std	Y+2, r18	; 0x02
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	9b 81       	ldd	r25, Y+3	; 0x03
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	91 05       	cpc	r25, r1
    23f4:	c1 f0       	breq	.+48     	; 0x2426 <external_interrupt_deinit+0x52>
    23f6:	2a 81       	ldd	r18, Y+2	; 0x02
    23f8:	3b 81       	ldd	r19, Y+3	; 0x03
    23fa:	22 30       	cpi	r18, 0x02	; 2
    23fc:	31 05       	cpc	r19, r1
    23fe:	11 f1       	breq	.+68     	; 0x2444 <external_interrupt_deinit+0x70>
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	61 f5       	brne	.+88     	; 0x2460 <external_interrupt_deinit+0x8c>
    {
    case INT_0:
        /* Clear the sense control bits for INT0 */
        MCUCR &= ~(1 << ISC00) & ~(1 << ISC01);
    2408:	a5 e5       	ldi	r26, 0x55	; 85
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e5 e5       	ldi	r30, 0x55	; 85
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8c 7f       	andi	r24, 0xFC	; 252
    2414:	8c 93       	st	X, r24

        /* Disable external interrupt INT0 */
        GICR &= ~(1 << INT0);
    2416:	ab e5       	ldi	r26, 0x5B	; 91
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	eb e5       	ldi	r30, 0x5B	; 91
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8f 7b       	andi	r24, 0xBF	; 191
    2422:	8c 93       	st	X, r24
    2424:	1d c0       	rjmp	.+58     	; 0x2460 <external_interrupt_deinit+0x8c>
        break;

    case INT_1:
        /* Clear the sense control bits for INT1 */
        MCUCR &= ~(1 << ISC10) & ~(1 << ISC11);
    2426:	a5 e5       	ldi	r26, 0x55	; 85
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e5 e5       	ldi	r30, 0x55	; 85
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	83 7f       	andi	r24, 0xF3	; 243
    2432:	8c 93       	st	X, r24

        /* Disable external interrupt INT1 */
        GICR &= ~(1 << INT1);
    2434:	ab e5       	ldi	r26, 0x5B	; 91
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	eb e5       	ldi	r30, 0x5B	; 91
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8f 77       	andi	r24, 0x7F	; 127
    2440:	8c 93       	st	X, r24
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <external_interrupt_deinit+0x8c>
        break;

    case INT_2:
        /* Clear the sense control bit for INT2 */
        MCUCSR &= ~(1 << ISC2);
    2444:	a4 e5       	ldi	r26, 0x54	; 84
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e4 e5       	ldi	r30, 0x54	; 84
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8f 7b       	andi	r24, 0xBF	; 191
    2450:	8c 93       	st	X, r24

        /* Disable external interrupt INT2 */
        GICR &= ~(1 << INT2);
    2452:	ab e5       	ldi	r26, 0x5B	; 91
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	eb e5       	ldi	r30, 0x5B	; 91
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8f 7d       	andi	r24, 0xDF	; 223
    245e:	8c 93       	st	X, r24
        break;
    }
}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <external_interrupt_setCallBack>:
 * Parameters  :
 * - a_ptr: Pointer to the callback function.
 * - INT_ID: The external interrupt ID (INT_0, INT_1, INT_2).
 */
void external_interrupt_setCallBack(void(*a_ptr)(void), EXT_INT_Type INT_ID)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <external_interrupt_setCallBack+0x6>
    2472:	00 d0       	rcall	.+0      	; 0x2474 <external_interrupt_setCallBack+0x8>
    2474:	0f 92       	push	r0
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	6b 83       	std	Y+3, r22	; 0x03
    switch (INT_ID)
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	3d 83       	std	Y+5, r19	; 0x05
    2488:	2c 83       	std	Y+4, r18	; 0x04
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
    248c:	9d 81       	ldd	r25, Y+5	; 0x05
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	81 f0       	breq	.+32     	; 0x24b4 <external_interrupt_setCallBack+0x48>
    2494:	2c 81       	ldd	r18, Y+4	; 0x04
    2496:	3d 81       	ldd	r19, Y+5	; 0x05
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	91 f0       	breq	.+36     	; 0x24c2 <external_interrupt_setCallBack+0x56>
    249e:	8c 81       	ldd	r24, Y+4	; 0x04
    24a0:	9d 81       	ldd	r25, Y+5	; 0x05
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	a1 f4       	brne	.+40     	; 0x24ce <external_interrupt_setCallBack+0x62>
    {
    case INT_0:
        g_callBackPtr_INT0 = a_ptr;  /* Set callback for INT0 */
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	90 93 a3 01 	sts	0x01A3, r25
    24ae:	80 93 a2 01 	sts	0x01A2, r24
    24b2:	0d c0       	rjmp	.+26     	; 0x24ce <external_interrupt_setCallBack+0x62>
        break;
    case INT_1:
        g_callBackPtr_INT1 = a_ptr;  /* Set callback for INT1 */
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	90 93 a5 01 	sts	0x01A5, r25
    24bc:	80 93 a4 01 	sts	0x01A4, r24
    24c0:	06 c0       	rjmp	.+12     	; 0x24ce <external_interrupt_setCallBack+0x62>
        break;
    case INT_2:
        g_callBackPtr_INT2 = a_ptr;  /* Set callback for INT2 */
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	90 93 a7 01 	sts	0x01A7, r25
    24ca:	80 93 a6 01 	sts	0x01A6, r24
        break;
    }
}
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <Ultrasonic_init>:

/*******************************************************************************
 *                      	Functions Definitions                              *
 *******************************************************************************/
void Ultrasonic_init(void)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <Ultrasonic_init+0x6>
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <Ultrasonic_init+0x8>
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, RISING_EDGE};
    24ea:	19 82       	std	Y+1, r1	; 0x01
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	8a 83       	std	Y+2, r24	; 0x02
	external_interrupt_setCallBack(Ultrasonic_edgeProcessing_INT0, INT_0); /* Set the callback function for INT0 */
    24f0:	83 e1       	ldi	r24, 0x13	; 19
    24f2:	96 e1       	ldi	r25, 0x16	; 22
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	0e 94 36 12 	call	0x246c	; 0x246c <external_interrupt_setCallBack>
	external_interrupt_init(&EXT_INT0_Configrations);	/* Initialize INT0 with the specified configuration */
    24fa:	ce 01       	movw	r24, r28
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	0e 94 66 11 	call	0x22cc	; 0x22cc <external_interrupt_init>

	EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, RISING_EDGE};
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	8b 83       	std	Y+3, r24	; 0x03
    2506:	83 e0       	ldi	r24, 0x03	; 3
    2508:	8c 83       	std	Y+4, r24	; 0x04
	external_interrupt_setCallBack(Ultrasonic_edgeProcessing_INT2, INT_1); /* Set the callback function for INT2 */
    250a:	8b e7       	ldi	r24, 0x7B	; 123
    250c:	96 e1       	ldi	r25, 0x16	; 22
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	0e 94 36 12 	call	0x246c	; 0x246c <external_interrupt_setCallBack>
	external_interrupt_init(&EXT_INT2_Configrations);	/* Initialize INT2 with the specified configuration */
    2514:	ce 01       	movw	r24, r28
    2516:	03 96       	adiw	r24, 0x03	; 3
    2518:	0e 94 66 11 	call	0x22cc	; 0x22cc <external_interrupt_init>

	/* Set up pin direction for trigger pin as output */
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, PIN_OUTPUT);
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, PIN_OUTPUT);
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	66 e0       	ldi	r22, 0x06	; 6
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, PIN_OUTPUT);
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	67 e0       	ldi	r22, 0x07	; 7
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <Ultrasonic_Trigger>:

static void Ultrasonic_Trigger(Ultrasonic ultrasonic)
{
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	cb 54       	subi	r28, 0x4B	; 75
    2556:	d0 40       	sbci	r29, 0x00	; 0
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	fe 01       	movw	r30, r28
    2564:	e7 5b       	subi	r30, 0xB7	; 183
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 83       	st	Z, r24
	switch(ultrasonic)
    256a:	fe 01       	movw	r30, r28
    256c:	e7 5b       	subi	r30, 0xB7	; 183
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	2c 96       	adiw	r28, 0x0c	; 12
    2578:	3f af       	std	Y+63, r19	; 0x3f
    257a:	2e af       	std	Y+62, r18	; 0x3e
    257c:	2c 97       	sbiw	r28, 0x0c	; 12
    257e:	2c 96       	adiw	r28, 0x0c	; 12
    2580:	8e ad       	ldd	r24, Y+62	; 0x3e
    2582:	9f ad       	ldd	r25, Y+63	; 0x3f
    2584:	2c 97       	sbiw	r28, 0x0c	; 12
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	91 05       	cpc	r25, r1
    258a:	89 f0       	breq	.+34     	; 0x25ae <Ultrasonic_Trigger+0x66>
    258c:	2c 96       	adiw	r28, 0x0c	; 12
    258e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2590:	ff ad       	ldd	r31, Y+63	; 0x3f
    2592:	2c 97       	sbiw	r28, 0x0c	; 12
    2594:	e2 30       	cpi	r30, 0x02	; 2
    2596:	f1 05       	cpc	r31, r1
    2598:	09 f4       	brne	.+2      	; 0x259c <Ultrasonic_Trigger+0x54>
    259a:	ba c1       	rjmp	.+884    	; 0x2910 <Ultrasonic_Trigger+0x3c8>
    259c:	2c 96       	adiw	r28, 0x0c	; 12
    259e:	2e ad       	ldd	r18, Y+62	; 0x3e
    25a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    25a2:	2c 97       	sbiw	r28, 0x0c	; 12
    25a4:	21 15       	cp	r18, r1
    25a6:	31 05       	cpc	r19, r1
    25a8:	09 f4       	brne	.+2      	; 0x25ac <Ultrasonic_Trigger+0x64>
    25aa:	e9 c0       	rjmp	.+466    	; 0x277e <Ultrasonic_Trigger+0x236>
    25ac:	79 c2       	rjmp	.+1266   	; 0x2aa0 <Ultrasonic_Trigger+0x558>
	{
	case U_right:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, LOGIC_HIGH);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	65 e0       	ldi	r22, 0x05	; 5
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 5b       	subi	r30, 0xBB	; 187
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a0 e2       	ldi	r26, 0x20	; 32
    25c4:	b1 e4       	ldi	r27, 0x41	; 65
    25c6:	80 83       	st	Z, r24
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	a2 83       	std	Z+2, r26	; 0x02
    25cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ce:	8e 01       	movw	r16, r28
    25d0:	0f 5b       	subi	r16, 0xBF	; 191
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	fe 01       	movw	r30, r28
    25d6:	eb 5b       	subi	r30, 0xBB	; 187
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	2b ea       	ldi	r18, 0xAB	; 171
    25e4:	3a ea       	ldi	r19, 0xAA	; 170
    25e6:	4a ea       	ldi	r20, 0xAA	; 170
    25e8:	50 e4       	ldi	r21, 0x40	; 64
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	f8 01       	movw	r30, r16
    25f4:	80 83       	st	Z, r24
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	a2 83       	std	Z+2, r26	; 0x02
    25fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25fc:	fe 01       	movw	r30, r28
    25fe:	ef 5b       	subi	r30, 0xBF	; 191
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	34 f4       	brge	.+12     	; 0x2626 <Ultrasonic_Trigger+0xde>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	fe 01       	movw	r30, r28
    261e:	e0 5c       	subi	r30, 0xC0	; 192
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 83       	st	Z, r24
    2624:	9d c0       	rjmp	.+314    	; 0x2760 <Ultrasonic_Trigger+0x218>
	else if (__tmp > 255)
    2626:	fe 01       	movw	r30, r28
    2628:	ef 5b       	subi	r30, 0xBF	; 191
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4f e7       	ldi	r20, 0x7F	; 127
    263a:	53 e4       	ldi	r21, 0x43	; 67
    263c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2640:	18 16       	cp	r1, r24
    2642:	0c f0       	brlt	.+2      	; 0x2646 <Ultrasonic_Trigger+0xfe>
    2644:	7e c0       	rjmp	.+252    	; 0x2742 <Ultrasonic_Trigger+0x1fa>
	{
		_delay_ms(__us / 1000.0);
    2646:	fe 01       	movw	r30, r28
    2648:	eb 5b       	subi	r30, 0xBB	; 187
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a e7       	ldi	r20, 0x7A	; 122
    265a:	54 e4       	ldi	r21, 0x44	; 68
    265c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8c af       	std	Y+60, r24	; 0x3c
    2666:	9d af       	std	Y+61, r25	; 0x3d
    2668:	ae af       	std	Y+62, r26	; 0x3e
    266a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266c:	6c ad       	ldd	r22, Y+60	; 0x3c
    266e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2670:	8e ad       	ldd	r24, Y+62	; 0x3e
    2672:	9f ad       	ldd	r25, Y+63	; 0x3f
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4a e7       	ldi	r20, 0x7A	; 122
    267a:	55 e4       	ldi	r21, 0x45	; 69
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	88 af       	std	Y+56, r24	; 0x38
    2686:	99 af       	std	Y+57, r25	; 0x39
    2688:	aa af       	std	Y+58, r26	; 0x3a
    268a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    268c:	68 ad       	ldd	r22, Y+56	; 0x38
    268e:	79 ad       	ldd	r23, Y+57	; 0x39
    2690:	8a ad       	ldd	r24, Y+58	; 0x3a
    2692:	9b ad       	ldd	r25, Y+59	; 0x3b
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	2c f4       	brge	.+10     	; 0x26ae <Ultrasonic_Trigger+0x166>
		__ticks = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9f ab       	std	Y+55, r25	; 0x37
    26aa:	8e ab       	std	Y+54, r24	; 0x36
    26ac:	3f c0       	rjmp	.+126    	; 0x272c <Ultrasonic_Trigger+0x1e4>
	else if (__tmp > 65535)
    26ae:	68 ad       	ldd	r22, Y+56	; 0x38
    26b0:	79 ad       	ldd	r23, Y+57	; 0x39
    26b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    26b4:	9b ad       	ldd	r25, Y+59	; 0x3b
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	4c f5       	brge	.+82     	; 0x2718 <Ultrasonic_Trigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c6:	6c ad       	ldd	r22, Y+60	; 0x3c
    26c8:	7d ad       	ldd	r23, Y+61	; 0x3d
    26ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    26cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9f ab       	std	Y+55, r25	; 0x37
    26ec:	8e ab       	std	Y+54, r24	; 0x36
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <Ultrasonic_Trigger+0x1c6>
    26f0:	80 e9       	ldi	r24, 0x90	; 144
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	9d ab       	std	Y+53, r25	; 0x35
    26f6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26f8:	8c a9       	ldd	r24, Y+52	; 0x34
    26fa:	9d a9       	ldd	r25, Y+53	; 0x35
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <Ultrasonic_Trigger+0x1b4>
    2700:	9d ab       	std	Y+53, r25	; 0x35
    2702:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2704:	8e a9       	ldd	r24, Y+54	; 0x36
    2706:	9f a9       	ldd	r25, Y+55	; 0x37
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	9f ab       	std	Y+55, r25	; 0x37
    270c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	8e a9       	ldd	r24, Y+54	; 0x36
    2710:	9f a9       	ldd	r25, Y+55	; 0x37
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	69 f7       	brne	.-38     	; 0x26f0 <Ultrasonic_Trigger+0x1a8>
    2716:	2d c0       	rjmp	.+90     	; 0x2772 <Ultrasonic_Trigger+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2718:	68 ad       	ldd	r22, Y+56	; 0x38
    271a:	79 ad       	ldd	r23, Y+57	; 0x39
    271c:	8a ad       	ldd	r24, Y+58	; 0x3a
    271e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9f ab       	std	Y+55, r25	; 0x37
    272a:	8e ab       	std	Y+54, r24	; 0x36
    272c:	8e a9       	ldd	r24, Y+54	; 0x36
    272e:	9f a9       	ldd	r25, Y+55	; 0x37
    2730:	9b ab       	std	Y+51, r25	; 0x33
    2732:	8a ab       	std	Y+50, r24	; 0x32
    2734:	8a a9       	ldd	r24, Y+50	; 0x32
    2736:	9b a9       	ldd	r25, Y+51	; 0x33
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <Ultrasonic_Trigger+0x1f0>
    273c:	9b ab       	std	Y+51, r25	; 0x33
    273e:	8a ab       	std	Y+50, r24	; 0x32
    2740:	18 c0       	rjmp	.+48     	; 0x2772 <Ultrasonic_Trigger+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2742:	fe 01       	movw	r30, r28
    2744:	ef 5b       	subi	r30, 0xBF	; 191
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	fe 01       	movw	r30, r28
    275a:	e0 5c       	subi	r30, 0xC0	; 192
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 83       	st	Z, r24
    2760:	fe 01       	movw	r30, r28
    2762:	e0 5c       	subi	r30, 0xC0	; 192
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    276a:	89 a9       	ldd	r24, Y+49	; 0x31
    276c:	8a 95       	dec	r24
    276e:	f1 f7       	brne	.-4      	; 0x276c <Ultrasonic_Trigger+0x224>
    2770:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER1_PIN, LOGIC_LOW);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	65 e0       	ldi	r22, 0x05	; 5
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    277c:	91 c1       	rjmp	.+802    	; 0x2aa0 <Ultrasonic_Trigger+0x558>
		break;

	case U_forward:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, LOGIC_HIGH);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	66 e0       	ldi	r22, 0x06	; 6
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 e2       	ldi	r26, 0x20	; 32
    278e:	b1 e4       	ldi	r27, 0x41	; 65
    2790:	8d a7       	std	Y+45, r24	; 0x2d
    2792:	9e a7       	std	Y+46, r25	; 0x2e
    2794:	af a7       	std	Y+47, r26	; 0x2f
    2796:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2798:	6d a5       	ldd	r22, Y+45	; 0x2d
    279a:	7e a5       	ldd	r23, Y+46	; 0x2e
    279c:	8f a5       	ldd	r24, Y+47	; 0x2f
    279e:	98 a9       	ldd	r25, Y+48	; 0x30
    27a0:	2b ea       	ldi	r18, 0xAB	; 171
    27a2:	3a ea       	ldi	r19, 0xAA	; 170
    27a4:	4a ea       	ldi	r20, 0xAA	; 170
    27a6:	50 e4       	ldi	r21, 0x40	; 64
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	89 a7       	std	Y+41, r24	; 0x29
    27b2:	9a a7       	std	Y+42, r25	; 0x2a
    27b4:	ab a7       	std	Y+43, r26	; 0x2b
    27b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    27b8:	69 a5       	ldd	r22, Y+41	; 0x29
    27ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    27bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27be:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	1c f4       	brge	.+6      	; 0x27d6 <Ultrasonic_Trigger+0x28e>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	88 a7       	std	Y+40, r24	; 0x28
    27d4:	91 c0       	rjmp	.+290    	; 0x28f8 <Ultrasonic_Trigger+0x3b0>
	else if (__tmp > 255)
    27d6:	69 a5       	ldd	r22, Y+41	; 0x29
    27d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    27da:	8b a5       	ldd	r24, Y+43	; 0x2b
    27dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	53 e4       	ldi	r21, 0x43	; 67
    27e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	0c f0       	brlt	.+2      	; 0x27f0 <Ultrasonic_Trigger+0x2a8>
    27ee:	7b c0       	rjmp	.+246    	; 0x28e6 <Ultrasonic_Trigger+0x39e>
	{
		_delay_ms(__us / 1000.0);
    27f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    27f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    27f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f6:	98 a9       	ldd	r25, Y+48	; 0x30
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a e7       	ldi	r20, 0x7A	; 122
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8c a3       	std	Y+36, r24	; 0x24
    280a:	9d a3       	std	Y+37, r25	; 0x25
    280c:	ae a3       	std	Y+38, r26	; 0x26
    280e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	6c a1       	ldd	r22, Y+36	; 0x24
    2812:	7d a1       	ldd	r23, Y+37	; 0x25
    2814:	8e a1       	ldd	r24, Y+38	; 0x26
    2816:	9f a1       	ldd	r25, Y+39	; 0x27
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a e7       	ldi	r20, 0x7A	; 122
    281e:	55 e4       	ldi	r21, 0x45	; 69
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	88 a3       	std	Y+32, r24	; 0x20
    282a:	99 a3       	std	Y+33, r25	; 0x21
    282c:	aa a3       	std	Y+34, r26	; 0x22
    282e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2830:	68 a1       	ldd	r22, Y+32	; 0x20
    2832:	79 a1       	ldd	r23, Y+33	; 0x21
    2834:	8a a1       	ldd	r24, Y+34	; 0x22
    2836:	9b a1       	ldd	r25, Y+35	; 0x23
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <Ultrasonic_Trigger+0x30a>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9f 8f       	std	Y+31, r25	; 0x1f
    284e:	8e 8f       	std	Y+30, r24	; 0x1e
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <Ultrasonic_Trigger+0x388>
	else if (__tmp > 65535)
    2852:	68 a1       	ldd	r22, Y+32	; 0x20
    2854:	79 a1       	ldd	r23, Y+33	; 0x21
    2856:	8a a1       	ldd	r24, Y+34	; 0x22
    2858:	9b a1       	ldd	r25, Y+35	; 0x23
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <Ultrasonic_Trigger+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	6c a1       	ldd	r22, Y+36	; 0x24
    286c:	7d a1       	ldd	r23, Y+37	; 0x25
    286e:	8e a1       	ldd	r24, Y+38	; 0x26
    2870:	9f a1       	ldd	r25, Y+39	; 0x27
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9f 8f       	std	Y+31, r25	; 0x1f
    2890:	8e 8f       	std	Y+30, r24	; 0x1e
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <Ultrasonic_Trigger+0x36a>
    2894:	80 e9       	ldi	r24, 0x90	; 144
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	9d 8f       	std	Y+29, r25	; 0x1d
    289a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    289c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    289e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <Ultrasonic_Trigger+0x358>
    28a4:	9d 8f       	std	Y+29, r25	; 0x1d
    28a6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9f 8f       	std	Y+31, r25	; 0x1f
    28b0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <Ultrasonic_Trigger+0x34c>
    28ba:	24 c0       	rjmp	.+72     	; 0x2904 <Ultrasonic_Trigger+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	68 a1       	ldd	r22, Y+32	; 0x20
    28be:	79 a1       	ldd	r23, Y+33	; 0x21
    28c0:	8a a1       	ldd	r24, Y+34	; 0x22
    28c2:	9b a1       	ldd	r25, Y+35	; 0x23
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9f 8f       	std	Y+31, r25	; 0x1f
    28ce:	8e 8f       	std	Y+30, r24	; 0x1e
    28d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28d4:	9b 8f       	std	Y+27, r25	; 0x1b
    28d6:	8a 8f       	std	Y+26, r24	; 0x1a
    28d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <Ultrasonic_Trigger+0x394>
    28e0:	9b 8f       	std	Y+27, r25	; 0x1b
    28e2:	8a 8f       	std	Y+26, r24	; 0x1a
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <Ultrasonic_Trigger+0x3bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28e6:	69 a5       	ldd	r22, Y+41	; 0x29
    28e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    28ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	88 a7       	std	Y+40, r24	; 0x28
    28f8:	88 a5       	ldd	r24, Y+40	; 0x28
    28fa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28fc:	89 8d       	ldd	r24, Y+25	; 0x19
    28fe:	8a 95       	dec	r24
    2900:	f1 f7       	brne	.-4      	; 0x28fe <Ultrasonic_Trigger+0x3b6>
    2902:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER2_PIN, LOGIC_LOW);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	66 e0       	ldi	r22, 0x06	; 6
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    290e:	c8 c0       	rjmp	.+400    	; 0x2aa0 <Ultrasonic_Trigger+0x558>
		break;

	case U_backward:
		/* Set the trigger pin to high for 10us */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, LOGIC_HIGH);
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	67 e0       	ldi	r22, 0x07	; 7
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e2       	ldi	r26, 0x20	; 32
    2920:	b1 e4       	ldi	r27, 0x41	; 65
    2922:	8d 8b       	std	Y+21, r24	; 0x15
    2924:	9e 8b       	std	Y+22, r25	; 0x16
    2926:	af 8b       	std	Y+23, r26	; 0x17
    2928:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    292a:	6d 89       	ldd	r22, Y+21	; 0x15
    292c:	7e 89       	ldd	r23, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	2b ea       	ldi	r18, 0xAB	; 171
    2934:	3a ea       	ldi	r19, 0xAA	; 170
    2936:	4a ea       	ldi	r20, 0xAA	; 170
    2938:	50 e4       	ldi	r21, 0x40	; 64
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	89 8b       	std	Y+17, r24	; 0x11
    2944:	9a 8b       	std	Y+18, r25	; 0x12
    2946:	ab 8b       	std	Y+19, r26	; 0x13
    2948:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    294a:	69 89       	ldd	r22, Y+17	; 0x11
    294c:	7a 89       	ldd	r23, Y+18	; 0x12
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	1c f4       	brge	.+6      	; 0x2968 <Ultrasonic_Trigger+0x420>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	88 8b       	std	Y+16, r24	; 0x10
    2966:	91 c0       	rjmp	.+290    	; 0x2a8a <Ultrasonic_Trigger+0x542>
	else if (__tmp > 255)
    2968:	69 89       	ldd	r22, Y+17	; 0x11
    296a:	7a 89       	ldd	r23, Y+18	; 0x12
    296c:	8b 89       	ldd	r24, Y+19	; 0x13
    296e:	9c 89       	ldd	r25, Y+20	; 0x14
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	53 e4       	ldi	r21, 0x43	; 67
    2978:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <Ultrasonic_Trigger+0x43a>
    2980:	7b c0       	rjmp	.+246    	; 0x2a78 <Ultrasonic_Trigger+0x530>
	{
		_delay_ms(__us / 1000.0);
    2982:	6d 89       	ldd	r22, Y+21	; 0x15
    2984:	7e 89       	ldd	r23, Y+22	; 0x16
    2986:	8f 89       	ldd	r24, Y+23	; 0x17
    2988:	98 8d       	ldd	r25, Y+24	; 0x18
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	4a e7       	ldi	r20, 0x7A	; 122
    2990:	54 e4       	ldi	r21, 0x44	; 68
    2992:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	8c 87       	std	Y+12, r24	; 0x0c
    299c:	9d 87       	std	Y+13, r25	; 0x0d
    299e:	ae 87       	std	Y+14, r26	; 0x0e
    29a0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    29a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    29a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    29a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4a e7       	ldi	r20, 0x7A	; 122
    29b0:	55 e4       	ldi	r21, 0x45	; 69
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	88 87       	std	Y+8, r24	; 0x08
    29bc:	99 87       	std	Y+9, r25	; 0x09
    29be:	aa 87       	std	Y+10, r26	; 0x0a
    29c0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29c2:	68 85       	ldd	r22, Y+8	; 0x08
    29c4:	79 85       	ldd	r23, Y+9	; 0x09
    29c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e8       	ldi	r20, 0x80	; 128
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d6:	88 23       	and	r24, r24
    29d8:	2c f4       	brge	.+10     	; 0x29e4 <Ultrasonic_Trigger+0x49c>
		__ticks = 1;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	9f 83       	std	Y+7, r25	; 0x07
    29e0:	8e 83       	std	Y+6, r24	; 0x06
    29e2:	3f c0       	rjmp	.+126    	; 0x2a62 <Ultrasonic_Trigger+0x51a>
	else if (__tmp > 65535)
    29e4:	68 85       	ldd	r22, Y+8	; 0x08
    29e6:	79 85       	ldd	r23, Y+9	; 0x09
    29e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	4c f5       	brge	.+82     	; 0x2a4e <Ultrasonic_Trigger+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    29fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a02:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	9f 83       	std	Y+7, r25	; 0x07
    2a22:	8e 83       	std	Y+6, r24	; 0x06
    2a24:	0f c0       	rjmp	.+30     	; 0x2a44 <Ultrasonic_Trigger+0x4fc>
    2a26:	80 e9       	ldi	r24, 0x90	; 144
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	9d 83       	std	Y+5, r25	; 0x05
    2a2c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	9d 81       	ldd	r25, Y+5	; 0x05
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <Ultrasonic_Trigger+0x4ea>
    2a36:	9d 83       	std	Y+5, r25	; 0x05
    2a38:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	9f 83       	std	Y+7, r25	; 0x07
    2a42:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a44:	8e 81       	ldd	r24, Y+6	; 0x06
    2a46:	9f 81       	ldd	r25, Y+7	; 0x07
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	69 f7       	brne	.-38     	; 0x2a26 <Ultrasonic_Trigger+0x4de>
    2a4c:	24 c0       	rjmp	.+72     	; 0x2a96 <Ultrasonic_Trigger+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4e:	68 85       	ldd	r22, Y+8	; 0x08
    2a50:	79 85       	ldd	r23, Y+9	; 0x09
    2a52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9f 83       	std	Y+7, r25	; 0x07
    2a60:	8e 83       	std	Y+6, r24	; 0x06
    2a62:	8e 81       	ldd	r24, Y+6	; 0x06
    2a64:	9f 81       	ldd	r25, Y+7	; 0x07
    2a66:	9b 83       	std	Y+3, r25	; 0x03
    2a68:	8a 83       	std	Y+2, r24	; 0x02
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <Ultrasonic_Trigger+0x526>
    2a72:	9b 83       	std	Y+3, r25	; 0x03
    2a74:	8a 83       	std	Y+2, r24	; 0x02
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <Ultrasonic_Trigger+0x54e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a78:	69 89       	ldd	r22, Y+17	; 0x11
    2a7a:	7a 89       	ldd	r23, Y+18	; 0x12
    2a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	88 8b       	std	Y+16, r24	; 0x10
    2a8a:	88 89       	ldd	r24, Y+16	; 0x10
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	8a 95       	dec	r24
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <Ultrasonic_Trigger+0x548>
    2a94:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		/* Set the trigger pin back to low */
		GPIO_writePin(TRIGGERS_PORT_CONNECTION, TRIGGER3_PIN, LOGIC_LOW);
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	67 e0       	ldi	r22, 0x07	; 7
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
		break;

	}

}
    2aa0:	c5 5b       	subi	r28, 0xB5	; 181
    2aa2:	df 4f       	sbci	r29, 0xFF	; 255
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	08 95       	ret

00002ab8 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance (Ultrasonic ultrasonic)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	27 97       	sbiw	r28, 0x07	; 7
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	89 83       	std	Y+1, r24	; 0x01
	switch(ultrasonic)
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	3d 83       	std	Y+5, r19	; 0x05
    2ad6:	2c 83       	std	Y+4, r18	; 0x04
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	9d 81       	ldd	r25, Y+5	; 0x05
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	91 05       	cpc	r25, r1
    2ae0:	59 f0       	breq	.+22     	; 0x2af8 <Ultrasonic_readDistance+0x40>
    2ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ae6:	22 30       	cpi	r18, 0x02	; 2
    2ae8:	31 05       	cpc	r19, r1
    2aea:	09 f4       	brne	.+2      	; 0x2aee <Ultrasonic_readDistance+0x36>
    2aec:	5f c0       	rjmp	.+190    	; 0x2bac <Ultrasonic_readDistance+0xf4>
    2aee:	8c 81       	ldd	r24, Y+4	; 0x04
    2af0:	9d 81       	ldd	r25, Y+5	; 0x05
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	71 f1       	breq	.+92     	; 0x2b52 <Ultrasonic_readDistance+0x9a>
    2af6:	87 c0       	rjmp	.+270    	; 0x2c06 <Ultrasonic_readDistance+0x14e>
	{
	case U_right:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_right);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT0 * 1.088) + 1;
    2afe:	80 91 a8 01 	lds	r24, 0x01A8
    2b02:	90 91 a9 01 	lds	r25, 0x01A9
    2b06:	cc 01       	movw	r24, r24
    2b08:	a0 e0       	ldi	r26, 0x00	; 0
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	26 e9       	ldi	r18, 0x96	; 150
    2b1e:	33 e4       	ldi	r19, 0x43	; 67
    2b20:	4b e8       	ldi	r20, 0x8B	; 139
    2b22:	5f e3       	ldi	r21, 0x3F	; 63
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9b 83       	std	Y+3, r25	; 0x03
    2b4e:	8a 83       	std	Y+2, r24	; 0x02
    2b50:	5b c0       	rjmp	.+182    	; 0x2c08 <Ultrasonic_readDistance+0x150>
		break;

	case U_forward:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_forward);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT1 * 1.088) + 1;
    2b58:	80 91 ab 01 	lds	r24, 0x01AB
    2b5c:	90 91 ac 01 	lds	r25, 0x01AC
    2b60:	cc 01       	movw	r24, r24
    2b62:	a0 e0       	ldi	r26, 0x00	; 0
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	26 e9       	ldi	r18, 0x96	; 150
    2b78:	33 e4       	ldi	r19, 0x43	; 67
    2b7a:	4b e8       	ldi	r20, 0x8B	; 139
    2b7c:	5f e3       	ldi	r21, 0x3F	; 63
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9b 83       	std	Y+3, r25	; 0x03
    2ba8:	8a 83       	std	Y+2, r24	; 0x02
    2baa:	2e c0       	rjmp	.+92     	; 0x2c08 <Ultrasonic_readDistance+0x150>
		break;

	case U_backward:
		/* Send the trigger pulse to start the measurement */
		Ultrasonic_Trigger(U_backward);
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ultrasonic_Trigger>

		/* Calculate the distance in centimeters using the high time */
		return (g_highTime_INT0 * 1.088) + 1;
    2bb2:	80 91 a8 01 	lds	r24, 0x01A8
    2bb6:	90 91 a9 01 	lds	r25, 0x01A9
    2bba:	cc 01       	movw	r24, r24
    2bbc:	a0 e0       	ldi	r26, 0x00	; 0
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	26 e9       	ldi	r18, 0x96	; 150
    2bd2:	33 e4       	ldi	r19, 0x43	; 67
    2bd4:	4b e8       	ldi	r20, 0x8B	; 139
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9b 83       	std	Y+3, r25	; 0x03
    2c02:	8a 83       	std	Y+2, r24	; 0x02
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <Ultrasonic_readDistance+0x150>
    2c06:	04 c0       	rjmp	.+8      	; 0x2c10 <Ultrasonic_readDistance+0x158>
		break;
	}
}
    2c08:	2a 81       	ldd	r18, Y+2	; 0x02
    2c0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c0c:	3f 83       	std	Y+7, r19	; 0x07
    2c0e:	2e 83       	std	Y+6, r18	; 0x06
    2c10:	8e 81       	ldd	r24, Y+6	; 0x06
    2c12:	9f 81       	ldd	r25, Y+7	; 0x07
    2c14:	27 96       	adiw	r28, 0x07	; 7
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <Ultrasonic_edgeProcessing_INT0>:

static void Ultrasonic_edgeProcessing_INT0(void)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	60 97       	sbiw	r28, 0x10	; 16
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
	g_edgeTime_INT0++; 	// Increment edge count
    2c3a:	80 91 aa 01 	lds	r24, 0x01AA
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	80 93 aa 01 	sts	0x01AA, r24

	if (1 == g_edgeTime_INT0) {
    2c44:	80 91 aa 01 	lds	r24, 0x01AA
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	91 f5       	brne	.+100    	; 0x2cb0 <Ultrasonic_edgeProcessing_INT0+0x8a>
		/* Rising edge detected */
		Timer_deInit(TIMER1_ID); // De-initialize Timer1
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	0e 94 24 0b 	call	0x1648	; 0x1648 <Timer_deInit>

		external_interrupt_deinit(INT_0); // De-initialize INT2
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, FALLING_EDGE}; // Configure INT2 for falling edge detection
    2c58:	19 82       	std	Y+1, r1	; 0x01
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
		external_interrupt_init(&EXT_INT0_Configrations); // Reinitialize INT2 with the new configuration
    2c5e:	ce 01       	movw	r24, r28
    2c60:	01 96       	adiw	r24, 0x01	; 1
    2c62:	0e 94 66 11 	call	0x22cc	; 0x22cc <external_interrupt_init>

		Timer_ConfigType Timer_Configrations = {0, 0, TIMER1_ID, F_CPU_1024, NORMAL_MODE}; // Configure Timer1
    2c66:	ce 01       	movw	r24, r28
    2c68:	03 96       	adiw	r24, 0x03	; 3
    2c6a:	9d 87       	std	Y+13, r25	; 0x0d
    2c6c:	8c 87       	std	Y+12, r24	; 0x0c
    2c6e:	e8 e8       	ldi	r30, 0x88	; 136
    2c70:	f1 e0       	ldi	r31, 0x01	; 1
    2c72:	ff 87       	std	Y+15, r31	; 0x0f
    2c74:	ee 87       	std	Y+14, r30	; 0x0e
    2c76:	f7 e0       	ldi	r31, 0x07	; 7
    2c78:	f8 8b       	std	Y+16, r31	; 0x10
    2c7a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2c7c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c7e:	00 80       	ld	r0, Z
    2c80:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c82:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	9f 87       	std	Y+15, r25	; 0x0f
    2c88:	8e 87       	std	Y+14, r24	; 0x0e
    2c8a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c8c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c8e:	00 82       	st	Z, r0
    2c90:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c92:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	9d 87       	std	Y+13, r25	; 0x0d
    2c98:	8c 87       	std	Y+12, r24	; 0x0c
    2c9a:	98 89       	ldd	r25, Y+16	; 0x10
    2c9c:	91 50       	subi	r25, 0x01	; 1
    2c9e:	98 8b       	std	Y+16, r25	; 0x10
    2ca0:	e8 89       	ldd	r30, Y+16	; 0x10
    2ca2:	ee 23       	and	r30, r30
    2ca4:	51 f7       	brne	.-44     	; 0x2c7a <Ultrasonic_edgeProcessing_INT0+0x54>
		Timer_init(&Timer_Configrations); // Initialize Timer1
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	03 96       	adiw	r24, 0x03	; 3
    2caa:	0e 94 42 0a 	call	0x1484	; 0x1484 <Timer_init>
    2cae:	1a c0       	rjmp	.+52     	; 0x2ce4 <Ultrasonic_edgeProcessing_INT0+0xbe>

	} else if (2 == g_edgeTime_INT0) {
    2cb0:	80 91 aa 01 	lds	r24, 0x01AA
    2cb4:	82 30       	cpi	r24, 0x02	; 2
    2cb6:	b1 f4       	brne	.+44     	; 0x2ce4 <Ultrasonic_edgeProcessing_INT0+0xbe>
		/* Falling edge detected */
		g_highTime_INT0 = Timer_getTimerValue(TIMER1_ID); // Calculate pulse width
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	0e 94 91 0b 	call	0x1722	; 0x1722 <Timer_getTimerValue>
    2cbe:	90 93 a9 01 	sts	0x01A9, r25
    2cc2:	80 93 a8 01 	sts	0x01A8, r24

		Timer_deInit(TIMER1_ID);	/* De-initialize Timer1 */
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	0e 94 24 0b 	call	0x1648	; 0x1648 <Timer_deInit>

		external_interrupt_deinit(INT_0);	/* De-initialize INT2 */
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT0_Configrations = {INT_0, RISING_EDGE};	/* Configure INT2 for rising edge detection */
    2cd2:	1a 86       	std	Y+10, r1	; 0x0a
    2cd4:	83 e0       	ldi	r24, 0x03	; 3
    2cd6:	8b 87       	std	Y+11, r24	; 0x0b
		external_interrupt_init(&EXT_INT0_Configrations);	/* Reinitialize INT2 with the new configuration */
    2cd8:	ce 01       	movw	r24, r28
    2cda:	0a 96       	adiw	r24, 0x0a	; 10
    2cdc:	0e 94 66 11 	call	0x22cc	; 0x22cc <external_interrupt_init>

		g_edgeTime_INT0 = 0;		/* Reset edge count */
    2ce0:	10 92 aa 01 	sts	0x01AA, r1
	}
}
    2ce4:	60 96       	adiw	r28, 0x10	; 16
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <Ultrasonic_edgeProcessing_INT2>:

static void Ultrasonic_edgeProcessing_INT2(void)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	60 97       	sbiw	r28, 0x10	; 16
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
	g_edgeTime_INT1++; 	// Increment edge count
    2d0a:	80 91 ad 01 	lds	r24, 0x01AD
    2d0e:	8f 5f       	subi	r24, 0xFF	; 255
    2d10:	80 93 ad 01 	sts	0x01AD, r24

	if (1 == g_edgeTime_INT1) {
    2d14:	80 91 ad 01 	lds	r24, 0x01AD
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	99 f5       	brne	.+102    	; 0x2d82 <Ultrasonic_edgeProcessing_INT2+0x8c>
		/* Rising edge detected */
		Timer_deInit(TIMER1_ID); // De-initialize Timer1
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	0e 94 24 0b 	call	0x1648	; 0x1648 <Timer_deInit>

		external_interrupt_deinit(INT_1); // De-initialize INT2
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, FALLING_EDGE}; // Configure INT2 for falling edge detection
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
		external_interrupt_init(&EXT_INT2_Configrations); // Reinitialize INT2 with the new configuration
    2d30:	ce 01       	movw	r24, r28
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	0e 94 66 11 	call	0x22cc	; 0x22cc <external_interrupt_init>

		Timer_ConfigType Timer_Configrations = {0, 0, TIMER1_ID, F_CPU_1024, NORMAL_MODE}; // Configure Timer1
    2d38:	ce 01       	movw	r24, r28
    2d3a:	03 96       	adiw	r24, 0x03	; 3
    2d3c:	9d 87       	std	Y+13, r25	; 0x0d
    2d3e:	8c 87       	std	Y+12, r24	; 0x0c
    2d40:	ef e8       	ldi	r30, 0x8F	; 143
    2d42:	f1 e0       	ldi	r31, 0x01	; 1
    2d44:	ff 87       	std	Y+15, r31	; 0x0f
    2d46:	ee 87       	std	Y+14, r30	; 0x0e
    2d48:	f7 e0       	ldi	r31, 0x07	; 7
    2d4a:	f8 8b       	std	Y+16, r31	; 0x10
    2d4c:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d4e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d50:	00 80       	ld	r0, Z
    2d52:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d54:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	9f 87       	std	Y+15, r25	; 0x0f
    2d5a:	8e 87       	std	Y+14, r24	; 0x0e
    2d5c:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d5e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d60:	00 82       	st	Z, r0
    2d62:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d64:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	9d 87       	std	Y+13, r25	; 0x0d
    2d6a:	8c 87       	std	Y+12, r24	; 0x0c
    2d6c:	98 89       	ldd	r25, Y+16	; 0x10
    2d6e:	91 50       	subi	r25, 0x01	; 1
    2d70:	98 8b       	std	Y+16, r25	; 0x10
    2d72:	e8 89       	ldd	r30, Y+16	; 0x10
    2d74:	ee 23       	and	r30, r30
    2d76:	51 f7       	brne	.-44     	; 0x2d4c <Ultrasonic_edgeProcessing_INT2+0x56>
		Timer_init(&Timer_Configrations); // Initialize Timer1
    2d78:	ce 01       	movw	r24, r28
    2d7a:	03 96       	adiw	r24, 0x03	; 3
    2d7c:	0e 94 42 0a 	call	0x1484	; 0x1484 <Timer_init>
    2d80:	1b c0       	rjmp	.+54     	; 0x2db8 <Ultrasonic_edgeProcessing_INT2+0xc2>

	} else if (2 == g_edgeTime_INT1) {
    2d82:	80 91 ad 01 	lds	r24, 0x01AD
    2d86:	82 30       	cpi	r24, 0x02	; 2
    2d88:	b9 f4       	brne	.+46     	; 0x2db8 <Ultrasonic_edgeProcessing_INT2+0xc2>
		/* Falling edge detected */
		g_highTime_INT1 = Timer_getTimerValue(TIMER1_ID); // Calculate pulse width
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0e 94 91 0b 	call	0x1722	; 0x1722 <Timer_getTimerValue>
    2d90:	90 93 ac 01 	sts	0x01AC, r25
    2d94:	80 93 ab 01 	sts	0x01AB, r24

		Timer_deInit(TIMER1_ID);	/* De-initialize Timer1 */
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	0e 94 24 0b 	call	0x1648	; 0x1648 <Timer_deInit>

		external_interrupt_deinit(INT_1);	/* De-initialize INT2 */
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <external_interrupt_deinit>
		EXT_INT_ConfigType EXT_INT2_Configrations = {INT_1, RISING_EDGE};	/* Configure INT2 for rising edge detection */
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	8a 87       	std	Y+10, r24	; 0x0a
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	8b 87       	std	Y+11, r24	; 0x0b
		external_interrupt_init(&EXT_INT2_Configrations);	/* Reinitialize INT2 with the new configuration */
    2dac:	ce 01       	movw	r24, r28
    2dae:	0a 96       	adiw	r24, 0x0a	; 10
    2db0:	0e 94 66 11 	call	0x22cc	; 0x22cc <external_interrupt_init>

		g_edgeTime_INT1 = 0;		/* Reset edge count */
    2db4:	10 92 ad 01 	sts	0x01AD, r1
	}
}
    2db8:	60 96       	adiw	r28, 0x10	; 16
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <PIR_init>:
 * Description :
 * Function to initialize the PIR sensor.
 * This function sets up the necessary pin directions for the PIR sensor.
 */
void PIR_init(void)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    /* Configure PIR sensor 0 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR0_PIN, PIN_INPUT);
    2dd2:	83 e0       	ldi	r24, 0x03	; 3
    2dd4:	62 e0       	ldi	r22, 0x02	; 2
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>

    /* Configure PIR sensor 1 pin as input */
    GPIO_setupPinDirection(PIR_PORT, PIR1_PIN, PIN_INPUT);
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	63 e0       	ldi	r22, 0x03	; 3
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
}
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <PIR_ReadValue1>:
 * Function to read the value from PIR sensor 0.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue1(void)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 0 */
    return GPIO_readPin(PIR_PORT, PIR0_PIN);
    2df4:	83 e0       	ldi	r24, 0x03	; 3
    2df6:	62 e0       	ldi	r22, 0x02	; 2
    2df8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <GPIO_readPin>
}
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <PIR_ReadValue2>:
 * Function to read the value from PIR sensor 1.
 * Returns     :
 * - The value read from the PIR sensor pin (0 or 1).
 */
uint8 PIR_ReadValue2(void)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    /* Read and return the value from PIR sensor 1 */
    return GPIO_readPin(PIR_PORT, PIR1_PIN);
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	63 e0       	ldi	r22, 0x03	; 3
    2e0e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <GPIO_readPin>
}
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <Handel_Max_Speed>:
 * Static function to handle the maximum speed of the motor.
 * Parameters  :
 * - speed: The maximum speed to be set.
 */
static void Handel_Max_Speed(uint8 speed)
{
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	0f 92       	push	r0
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	89 83       	std	Y+1, r24	; 0x01
    max_Speed = speed;
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	80 93 ae 01 	sts	0x01AE, r24
}
    2e2a:	0f 90       	pop	r0
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <DcMotor_Init>:
 * This function sets up the necessary pin directions and stops the motor initially.
 * Parameters  :
 * - MAXSPEED: The maximum speed of the motor (0 to 100).
 */
void DcMotor_Init(uint8 MAXSPEED)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	0f 92       	push	r0
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    /* Set the maximum speed */
    Handel_Max_Speed(MAXSPEED);
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <Handel_Max_Speed>

    /* For motor 1 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT1, PIN_OUTPUT);  /* Set INT1 as output */
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	64 e0       	ldi	r22, 0x04	; 4
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT2, PIN_OUTPUT);  /* Set INT2 as output */
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	63 e0       	ldi	r22, 0x03	; 3
    2e52:	41 e0       	ldi	r20, 0x01	; 1
    2e54:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE1_PORT_CONNECTION, ENABLE1_PIN, PIN_OUTPUT);  /* Set Enable1 as output */
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	63 e0       	ldi	r22, 0x03	; 3
    2e5c:	41 e0       	ldi	r20, 0x01	; 1
    2e5e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>

    /* For motor 2 */
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT3, PIN_OUTPUT);  /* Set INT3 as output */
    2e62:	82 e0       	ldi	r24, 0x02	; 2
    2e64:	66 e0       	ldi	r22, 0x06	; 6
    2e66:	41 e0       	ldi	r20, 0x01	; 1
    2e68:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT4, PIN_OUTPUT);  /* Set INT4 as output */
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	67 e0       	ldi	r22, 0x07	; 7
    2e70:	41 e0       	ldi	r20, 0x01	; 1
    2e72:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(ENABLE2_PORT_CONNECTION, ENABLE2_PIN, PIN_OUTPUT);  /* Set Enable2 as output */
    2e76:	83 e0       	ldi	r24, 0x03	; 3
    2e78:	67 e0       	ldi	r22, 0x07	; 7
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>

    /* Stop the motor at the beginning */
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2e80:	82 e0       	ldi	r24, 0x02	; 2
    2e82:	64 e0       	ldi	r22, 0x04	; 4
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2e8a:	82 e0       	ldi	r24, 0x02	; 2
    2e8c:	63 e0       	ldi	r22, 0x03	; 3
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	66 e0       	ldi	r22, 0x06	; 6
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	67 e0       	ldi	r22, 0x07	; 7
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
}
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <DcMotor1_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor1_Rotate(DcMotor_State state, uint8 speed)
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	27 97       	sbiw	r28, 0x07	; 7
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	8c 83       	std	Y+4, r24	; 0x04
    2ec6:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 1 */
	Timer_Configuration configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	8a 83       	std	Y+2, r24	; 0x02
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer0_Start(&configrations);
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	01 96       	adiw	r24, 0x01	; 1
    2ed8:	0e 94 0f 0c 	call	0x181e	; 0x181e <PWM_Timer0_Start>

    /* Control motor 1 direction */
    switch (state)
    2edc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ede:	28 2f       	mov	r18, r24
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	3f 83       	std	Y+7, r19	; 0x07
    2ee4:	2e 83       	std	Y+6, r18	; 0x06
    2ee6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	91 05       	cpc	r25, r1
    2eee:	a1 f0       	breq	.+40     	; 0x2f18 <DcMotor1_Rotate+0x68>
    2ef0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ef2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ef4:	22 30       	cpi	r18, 0x02	; 2
    2ef6:	31 05       	cpc	r19, r1
    2ef8:	d1 f0       	breq	.+52     	; 0x2f2e <DcMotor1_Rotate+0x7e>
    2efa:	8e 81       	ldd	r24, Y+6	; 0x06
    2efc:	9f 81       	ldd	r25, Y+7	; 0x07
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	01 f5       	brne	.+64     	; 0x2f42 <DcMotor1_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2f02:	82 e0       	ldi	r24, 0x02	; 2
    2f04:	64 e0       	ldi	r22, 0x04	; 4
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	63 e0       	ldi	r22, 0x03	; 3
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    2f16:	15 c0       	rjmp	.+42     	; 0x2f42 <DcMotor1_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_HIGH);
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	64 e0       	ldi	r22, 0x04	; 4
    2f1c:	41 e0       	ldi	r20, 0x01	; 1
    2f1e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	63 e0       	ldi	r22, 0x03	; 3
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    2f2c:	0a c0       	rjmp	.+20     	; 0x2f42 <DcMotor1_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	64 e0       	ldi	r22, 0x04	; 4
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_HIGH);
    2f38:	82 e0       	ldi	r24, 0x02	; 2
    2f3a:	63 e0       	ldi	r22, 0x03	; 3
    2f3c:	41 e0       	ldi	r20, 0x01	; 1
    2f3e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        break;
    }
}
    2f42:	27 96       	adiw	r28, 0x07	; 7
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <DcMotor2_Rotate>:
 * Parameters  :
 * - state: The motor state (STOP, CW, CCW).
 * - speed: The motor speed (0 to 100).
 */
void DcMotor2_Rotate(DcMotor_State state, uint8 speed)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	27 97       	sbiw	r28, 0x07	; 7
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	8c 83       	std	Y+4, r24	; 0x04
    2f6a:	6d 83       	std	Y+5, r22	; 0x05
    /* Configure PWM for motor 2 */
	Timer_Configuration configrations = {NON_INVERTING, F_CPU_CLOCK, speed};
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	89 83       	std	Y+1, r24	; 0x01
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	8a 83       	std	Y+2, r24	; 0x02
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	8b 83       	std	Y+3, r24	; 0x03
    PWM_Timer2_Start(&configrations);
    2f78:	ce 01       	movw	r24, r28
    2f7a:	01 96       	adiw	r24, 0x01	; 1
    2f7c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <PWM_Timer2_Start>

    /* Control motor 2 direction */
    switch (state)
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	28 2f       	mov	r18, r24
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	3f 83       	std	Y+7, r19	; 0x07
    2f88:	2e 83       	std	Y+6, r18	; 0x06
    2f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f8e:	81 30       	cpi	r24, 0x01	; 1
    2f90:	91 05       	cpc	r25, r1
    2f92:	a1 f0       	breq	.+40     	; 0x2fbc <DcMotor2_Rotate+0x68>
    2f94:	2e 81       	ldd	r18, Y+6	; 0x06
    2f96:	3f 81       	ldd	r19, Y+7	; 0x07
    2f98:	22 30       	cpi	r18, 0x02	; 2
    2f9a:	31 05       	cpc	r19, r1
    2f9c:	d1 f0       	breq	.+52     	; 0x2fd2 <DcMotor2_Rotate+0x7e>
    2f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	01 f5       	brne	.+64     	; 0x2fe6 <DcMotor2_Rotate+0x92>
    {
    case STOP:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2fa6:	82 e0       	ldi	r24, 0x02	; 2
    2fa8:	66 e0       	ldi	r22, 0x06	; 6
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	67 e0       	ldi	r22, 0x07	; 7
    2fb4:	40 e0       	ldi	r20, 0x00	; 0
    2fb6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    2fba:	15 c0       	rjmp	.+42     	; 0x2fe6 <DcMotor2_Rotate+0x92>
        break;

    case CW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_HIGH);
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	66 e0       	ldi	r22, 0x06	; 6
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_LOW);
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	67 e0       	ldi	r22, 0x07	; 7
    2fca:	40 e0       	ldi	r20, 0x00	; 0
    2fcc:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    2fd0:	0a c0       	rjmp	.+20     	; 0x2fe6 <DcMotor2_Rotate+0x92>
        break;

    case CCW:
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT3, LOGIC_LOW);
    2fd2:	82 e0       	ldi	r24, 0x02	; 2
    2fd4:	66 e0       	ldi	r22, 0x06	; 6
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT4, LOGIC_HIGH);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	67 e0       	ldi	r22, 0x07	; 7
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
        break;
    }
}
    2fe6:	27 96       	adiw	r28, 0x07	; 7
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	08 95       	ret

00002ff8 <Forward>:
 * Description :
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	60 97       	sbiw	r28, 0x10	; 16
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    300c:	18 8a       	std	Y+16, r1	; 0x10
    300e:	1f 86       	std	Y+15, r1	; 0x0f
    3010:	81 c0       	rjmp	.+258    	; 0x3114 <Forward+0x11c>
    {
        DcMotor1_Rotate(CCW, i);
    3012:	9f 85       	ldd	r25, Y+15	; 0x0f
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	69 2f       	mov	r22, r25
    3018:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    301c:	9f 85       	ldd	r25, Y+15	; 0x0f
    301e:	82 e0       	ldi	r24, 0x02	; 2
    3020:	69 2f       	mov	r22, r25
    3022:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 e0       	ldi	r26, 0x00	; 0
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	8b 87       	std	Y+11, r24	; 0x0b
    3030:	9c 87       	std	Y+12, r25	; 0x0c
    3032:	ad 87       	std	Y+13, r26	; 0x0d
    3034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3036:	6b 85       	ldd	r22, Y+11	; 0x0b
    3038:	7c 85       	ldd	r23, Y+12	; 0x0c
    303a:	8d 85       	ldd	r24, Y+13	; 0x0d
    303c:	9e 85       	ldd	r25, Y+14	; 0x0e
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	55 e4       	ldi	r21, 0x45	; 69
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8f 83       	std	Y+7, r24	; 0x07
    3050:	98 87       	std	Y+8, r25	; 0x08
    3052:	a9 87       	std	Y+9, r26	; 0x09
    3054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <Forward+0x80>
		__ticks = 1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <Forward+0xfe>
	else if (__tmp > 65535)
    3078:	6f 81       	ldd	r22, Y+7	; 0x07
    307a:	78 85       	ldd	r23, Y+8	; 0x08
    307c:	89 85       	ldd	r24, Y+9	; 0x09
    307e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <Forward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	6b 85       	ldd	r22, Y+11	; 0x0b
    3092:	7c 85       	ldd	r23, Y+12	; 0x0c
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <Forward+0xe0>
    30ba:	80 e9       	ldi	r24, 0x90	; 144
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	9c 81       	ldd	r25, Y+4	; 0x04
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <Forward+0xce>
    30ca:	9c 83       	std	Y+4, r25	; 0x04
    30cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	8d 81       	ldd	r24, Y+5	; 0x05
    30da:	9e 81       	ldd	r25, Y+6	; 0x06
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <Forward+0xc2>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <Forward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <Forward+0x10a>
    3106:	9a 83       	std	Y+2, r25	; 0x02
    3108:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car forward.
 * This function gradually increases the speed of both motors to move the car forward.
 */
void Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    310a:	8f 85       	ldd	r24, Y+15	; 0x0f
    310c:	98 89       	ldd	r25, Y+16	; 0x10
    310e:	0a 96       	adiw	r24, 0x0a	; 10
    3110:	98 8b       	std	Y+16, r25	; 0x10
    3112:	8f 87       	std	Y+15, r24	; 0x0f
    3114:	80 91 ae 01 	lds	r24, 0x01AE
    3118:	28 2f       	mov	r18, r24
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	8f 85       	ldd	r24, Y+15	; 0x0f
    311e:	98 89       	ldd	r25, Y+16	; 0x10
    3120:	28 17       	cp	r18, r24
    3122:	39 07       	cpc	r19, r25
    3124:	0c f0       	brlt	.+2      	; 0x3128 <Forward+0x130>
    3126:	75 cf       	rjmp	.-278    	; 0x3012 <Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    3128:	60 96       	adiw	r28, 0x10	; 16
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <Backward>:
 * Description :
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	60 97       	sbiw	r28, 0x10	; 16
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    314e:	18 8a       	std	Y+16, r1	; 0x10
    3150:	1f 86       	std	Y+15, r1	; 0x0f
    3152:	81 c0       	rjmp	.+258    	; 0x3256 <Backward+0x11c>
    {
        DcMotor1_Rotate(CW, i);
    3154:	9f 85       	ldd	r25, Y+15	; 0x0f
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	69 2f       	mov	r22, r25
    315a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    315e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	69 2f       	mov	r22, r25
    3164:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a0 e0       	ldi	r26, 0x00	; 0
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	8b 87       	std	Y+11, r24	; 0x0b
    3172:	9c 87       	std	Y+12, r25	; 0x0c
    3174:	ad 87       	std	Y+13, r26	; 0x0d
    3176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3178:	6b 85       	ldd	r22, Y+11	; 0x0b
    317a:	7c 85       	ldd	r23, Y+12	; 0x0c
    317c:	8d 85       	ldd	r24, Y+13	; 0x0d
    317e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a e7       	ldi	r20, 0x7A	; 122
    3186:	55 e4       	ldi	r21, 0x45	; 69
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8f 83       	std	Y+7, r24	; 0x07
    3192:	98 87       	std	Y+8, r25	; 0x08
    3194:	a9 87       	std	Y+9, r26	; 0x09
    3196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3198:	6f 81       	ldd	r22, Y+7	; 0x07
    319a:	78 85       	ldd	r23, Y+8	; 0x08
    319c:	89 85       	ldd	r24, Y+9	; 0x09
    319e:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e8       	ldi	r20, 0x80	; 128
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ac:	88 23       	and	r24, r24
    31ae:	2c f4       	brge	.+10     	; 0x31ba <Backward+0x80>
		__ticks = 1;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	8d 83       	std	Y+5, r24	; 0x05
    31b8:	3f c0       	rjmp	.+126    	; 0x3238 <Backward+0xfe>
	else if (__tmp > 65535)
    31ba:	6f 81       	ldd	r22, Y+7	; 0x07
    31bc:	78 85       	ldd	r23, Y+8	; 0x08
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	4f e7       	ldi	r20, 0x7F	; 127
    31c8:	57 e4       	ldi	r21, 0x47	; 71
    31ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ce:	18 16       	cp	r1, r24
    31d0:	4c f5       	brge	.+82     	; 0x3224 <Backward+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e2       	ldi	r20, 0x20	; 32
    31e0:	51 e4       	ldi	r21, 0x41	; 65
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9e 83       	std	Y+6, r25	; 0x06
    31f8:	8d 83       	std	Y+5, r24	; 0x05
    31fa:	0f c0       	rjmp	.+30     	; 0x321a <Backward+0xe0>
    31fc:	80 e9       	ldi	r24, 0x90	; 144
    31fe:	91 e0       	ldi	r25, 0x01	; 1
    3200:	9c 83       	std	Y+4, r25	; 0x04
    3202:	8b 83       	std	Y+3, r24	; 0x03
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <Backward+0xce>
    320c:	9c 83       	std	Y+4, r25	; 0x04
    320e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	69 f7       	brne	.-38     	; 0x31fc <Backward+0xc2>
    3222:	14 c0       	rjmp	.+40     	; 0x324c <Backward+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3224:	6f 81       	ldd	r22, Y+7	; 0x07
    3226:	78 85       	ldd	r23, Y+8	; 0x08
    3228:	89 85       	ldd	r24, Y+9	; 0x09
    322a:	9a 85       	ldd	r25, Y+10	; 0x0a
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	8d 81       	ldd	r24, Y+5	; 0x05
    323a:	9e 81       	ldd	r25, Y+6	; 0x06
    323c:	9a 83       	std	Y+2, r25	; 0x02
    323e:	89 83       	std	Y+1, r24	; 0x01
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	9a 81       	ldd	r25, Y+2	; 0x02
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <Backward+0x10a>
    3248:	9a 83       	std	Y+2, r25	; 0x02
    324a:	89 83       	std	Y+1, r24	; 0x01
 * Function to move the car backward.
 * This function gradually increases the speed of both motors to move the car backward.
 */
void Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    324c:	8f 85       	ldd	r24, Y+15	; 0x0f
    324e:	98 89       	ldd	r25, Y+16	; 0x10
    3250:	0a 96       	adiw	r24, 0x0a	; 10
    3252:	98 8b       	std	Y+16, r25	; 0x10
    3254:	8f 87       	std	Y+15, r24	; 0x0f
    3256:	80 91 ae 01 	lds	r24, 0x01AE
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3260:	98 89       	ldd	r25, Y+16	; 0x10
    3262:	28 17       	cp	r18, r24
    3264:	39 07       	cpc	r19, r25
    3266:	0c f0       	brlt	.+2      	; 0x326a <Backward+0x130>
    3268:	75 cf       	rjmp	.-278    	; 0x3154 <Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    326a:	60 96       	adiw	r28, 0x10	; 16
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <Stop>:
 * Description :
 * Function to stop the car.
 * This function stops both motors.
 */
void Stop(void)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    DcMotor1_Rotate(STOP, MOTOR_STOP);
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	60 e0       	ldi	r22, 0x00	; 0
    3288:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
    DcMotor2_Rotate(STOP, MOTOR_STOP);
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	60 e0       	ldi	r22, 0x00	; 0
    3290:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
}
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <Right_Forward>:
 * Description :
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	60 97       	sbiw	r28, 0x10	; 16
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    32ae:	18 8a       	std	Y+16, r1	; 0x10
    32b0:	1f 86       	std	Y+15, r1	; 0x0f
    32b2:	80 c0       	rjmp	.+256    	; 0x33b4 <Right_Forward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    32bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    32be:	82 e0       	ldi	r24, 0x02	; 2
    32c0:	69 2f       	mov	r22, r25
    32c2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	a0 e0       	ldi	r26, 0x00	; 0
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	8b 87       	std	Y+11, r24	; 0x0b
    32d0:	9c 87       	std	Y+12, r25	; 0x0c
    32d2:	ad 87       	std	Y+13, r26	; 0x0d
    32d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32da:	8d 85       	ldd	r24, Y+13	; 0x0d
    32dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	4a e7       	ldi	r20, 0x7A	; 122
    32e4:	55 e4       	ldi	r21, 0x45	; 69
    32e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	8f 83       	std	Y+7, r24	; 0x07
    32f0:	98 87       	std	Y+8, r25	; 0x08
    32f2:	a9 87       	std	Y+9, r26	; 0x09
    32f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f6:	6f 81       	ldd	r22, Y+7	; 0x07
    32f8:	78 85       	ldd	r23, Y+8	; 0x08
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e8       	ldi	r20, 0x80	; 128
    3304:	5f e3       	ldi	r21, 0x3F	; 63
    3306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    330a:	88 23       	and	r24, r24
    330c:	2c f4       	brge	.+10     	; 0x3318 <Right_Forward+0x7e>
		__ticks = 1;
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9e 83       	std	Y+6, r25	; 0x06
    3314:	8d 83       	std	Y+5, r24	; 0x05
    3316:	3f c0       	rjmp	.+126    	; 0x3396 <Right_Forward+0xfc>
	else if (__tmp > 65535)
    3318:	6f 81       	ldd	r22, Y+7	; 0x07
    331a:	78 85       	ldd	r23, Y+8	; 0x08
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	3f ef       	ldi	r19, 0xFF	; 255
    3324:	4f e7       	ldi	r20, 0x7F	; 127
    3326:	57 e4       	ldi	r21, 0x47	; 71
    3328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    332c:	18 16       	cp	r1, r24
    332e:	4c f5       	brge	.+82     	; 0x3382 <Right_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3330:	6b 85       	ldd	r22, Y+11	; 0x0b
    3332:	7c 85       	ldd	r23, Y+12	; 0x0c
    3334:	8d 85       	ldd	r24, Y+13	; 0x0d
    3336:	9e 85       	ldd	r25, Y+14	; 0x0e
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e2       	ldi	r20, 0x20	; 32
    333e:	51 e4       	ldi	r21, 0x41	; 65
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	0f c0       	rjmp	.+30     	; 0x3378 <Right_Forward+0xde>
    335a:	80 e9       	ldi	r24, 0x90	; 144
    335c:	91 e0       	ldi	r25, 0x01	; 1
    335e:	9c 83       	std	Y+4, r25	; 0x04
    3360:	8b 83       	std	Y+3, r24	; 0x03
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	9c 81       	ldd	r25, Y+4	; 0x04
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <Right_Forward+0xcc>
    336a:	9c 83       	std	Y+4, r25	; 0x04
    336c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336e:	8d 81       	ldd	r24, Y+5	; 0x05
    3370:	9e 81       	ldd	r25, Y+6	; 0x06
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	69 f7       	brne	.-38     	; 0x335a <Right_Forward+0xc0>
    3380:	14 c0       	rjmp	.+40     	; 0x33aa <Right_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3382:	6f 81       	ldd	r22, Y+7	; 0x07
    3384:	78 85       	ldd	r23, Y+8	; 0x08
    3386:	89 85       	ldd	r24, Y+9	; 0x09
    3388:	9a 85       	ldd	r25, Y+10	; 0x0a
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <Right_Forward+0x108>
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving forward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    33aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ac:	98 89       	ldd	r25, Y+16	; 0x10
    33ae:	0a 96       	adiw	r24, 0x0a	; 10
    33b0:	98 8b       	std	Y+16, r25	; 0x10
    33b2:	8f 87       	std	Y+15, r24	; 0x0f
    33b4:	80 91 ae 01 	lds	r24, 0x01AE
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33be:	98 89       	ldd	r25, Y+16	; 0x10
    33c0:	28 17       	cp	r18, r24
    33c2:	39 07       	cpc	r19, r25
    33c4:	0c f0       	brlt	.+2      	; 0x33c8 <Right_Forward+0x12e>
    33c6:	76 cf       	rjmp	.-276    	; 0x32b4 <Right_Forward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    33c8:	60 96       	adiw	r28, 0x10	; 16
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <Right_Forward_Parking>:
void Right_Forward_Parking(uint8 speed)
{
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	61 97       	sbiw	r28, 0x11	; 17
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	89 8b       	std	Y+17, r24	; 0x11
    for (int i = 0; i <= speed; i = i + 10)
    33f0:	18 8a       	std	Y+16, r1	; 0x10
    33f2:	1f 86       	std	Y+15, r1	; 0x0f
    33f4:	80 c0       	rjmp	.+256    	; 0x34f6 <Right_Forward_Parking+0x11c>
    {
        DcMotor1_Rotate(CW, 50);
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	62 e3       	ldi	r22, 0x32	; 50
    33fa:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(CCW, i);
    33fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	69 2f       	mov	r22, r25
    3404:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	a0 e0       	ldi	r26, 0x00	; 0
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	8b 87       	std	Y+11, r24	; 0x0b
    3412:	9c 87       	std	Y+12, r25	; 0x0c
    3414:	ad 87       	std	Y+13, r26	; 0x0d
    3416:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3418:	6b 85       	ldd	r22, Y+11	; 0x0b
    341a:	7c 85       	ldd	r23, Y+12	; 0x0c
    341c:	8d 85       	ldd	r24, Y+13	; 0x0d
    341e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	4a e7       	ldi	r20, 0x7A	; 122
    3426:	55 e4       	ldi	r21, 0x45	; 69
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	8f 83       	std	Y+7, r24	; 0x07
    3432:	98 87       	std	Y+8, r25	; 0x08
    3434:	a9 87       	std	Y+9, r26	; 0x09
    3436:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3438:	6f 81       	ldd	r22, Y+7	; 0x07
    343a:	78 85       	ldd	r23, Y+8	; 0x08
    343c:	89 85       	ldd	r24, Y+9	; 0x09
    343e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e8       	ldi	r20, 0x80	; 128
    3446:	5f e3       	ldi	r21, 0x3F	; 63
    3448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    344c:	88 23       	and	r24, r24
    344e:	2c f4       	brge	.+10     	; 0x345a <Right_Forward_Parking+0x80>
		__ticks = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
    3458:	3f c0       	rjmp	.+126    	; 0x34d8 <Right_Forward_Parking+0xfe>
	else if (__tmp > 65535)
    345a:	6f 81       	ldd	r22, Y+7	; 0x07
    345c:	78 85       	ldd	r23, Y+8	; 0x08
    345e:	89 85       	ldd	r24, Y+9	; 0x09
    3460:	9a 85       	ldd	r25, Y+10	; 0x0a
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	3f ef       	ldi	r19, 0xFF	; 255
    3466:	4f e7       	ldi	r20, 0x7F	; 127
    3468:	57 e4       	ldi	r21, 0x47	; 71
    346a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    346e:	18 16       	cp	r1, r24
    3470:	4c f5       	brge	.+82     	; 0x34c4 <Right_Forward_Parking+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3472:	6b 85       	ldd	r22, Y+11	; 0x0b
    3474:	7c 85       	ldd	r23, Y+12	; 0x0c
    3476:	8d 85       	ldd	r24, Y+13	; 0x0d
    3478:	9e 85       	ldd	r25, Y+14	; 0x0e
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e2       	ldi	r20, 0x20	; 32
    3480:	51 e4       	ldi	r21, 0x41	; 65
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9e 83       	std	Y+6, r25	; 0x06
    3498:	8d 83       	std	Y+5, r24	; 0x05
    349a:	0f c0       	rjmp	.+30     	; 0x34ba <Right_Forward_Parking+0xe0>
    349c:	80 e9       	ldi	r24, 0x90	; 144
    349e:	91 e0       	ldi	r25, 0x01	; 1
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	8b 83       	std	Y+3, r24	; 0x03
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	9c 81       	ldd	r25, Y+4	; 0x04
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <Right_Forward_Parking+0xce>
    34ac:	9c 83       	std	Y+4, r25	; 0x04
    34ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	9e 83       	std	Y+6, r25	; 0x06
    34b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ba:	8d 81       	ldd	r24, Y+5	; 0x05
    34bc:	9e 81       	ldd	r25, Y+6	; 0x06
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	69 f7       	brne	.-38     	; 0x349c <Right_Forward_Parking+0xc2>
    34c2:	14 c0       	rjmp	.+40     	; 0x34ec <Right_Forward_Parking+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c4:	6f 81       	ldd	r22, Y+7	; 0x07
    34c6:	78 85       	ldd	r23, Y+8	; 0x08
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9e 83       	std	Y+6, r25	; 0x06
    34d6:	8d 83       	std	Y+5, r24	; 0x05
    34d8:	8d 81       	ldd	r24, Y+5	; 0x05
    34da:	9e 81       	ldd	r25, Y+6	; 0x06
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <Right_Forward_Parking+0x10a>
    34e8:	9a 83       	std	Y+2, r25	; 0x02
    34ea:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(DELAY_MOTOR);
    }
}
void Right_Forward_Parking(uint8 speed)
{
    for (int i = 0; i <= speed; i = i + 10)
    34ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ee:	98 89       	ldd	r25, Y+16	; 0x10
    34f0:	0a 96       	adiw	r24, 0x0a	; 10
    34f2:	98 8b       	std	Y+16, r25	; 0x10
    34f4:	8f 87       	std	Y+15, r24	; 0x0f
    34f6:	89 89       	ldd	r24, Y+17	; 0x11
    34f8:	28 2f       	mov	r18, r24
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fe:	98 89       	ldd	r25, Y+16	; 0x10
    3500:	28 17       	cp	r18, r24
    3502:	39 07       	cpc	r19, r25
    3504:	0c f0       	brlt	.+2      	; 0x3508 <Right_Forward_Parking+0x12e>
    3506:	77 cf       	rjmp	.-274    	; 0x33f6 <Right_Forward_Parking+0x1c>
    {
        DcMotor1_Rotate(CW, 50);
        DcMotor2_Rotate(CCW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    3508:	61 96       	adiw	r28, 0x11	; 17
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <Left_Forward>:
 * Description :
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	60 97       	sbiw	r28, 0x10	; 16
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    352e:	18 8a       	std	Y+16, r1	; 0x10
    3530:	1f 86       	std	Y+15, r1	; 0x0f
    3532:	80 c0       	rjmp	.+256    	; 0x3634 <Left_Forward+0x11a>
    {
        DcMotor1_Rotate(CCW, i);
    3534:	9f 85       	ldd	r25, Y+15	; 0x0f
    3536:	82 e0       	ldi	r24, 0x02	; 2
    3538:	69 2f       	mov	r22, r25
    353a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	a0 e0       	ldi	r26, 0x00	; 0
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	8b 87       	std	Y+11, r24	; 0x0b
    3550:	9c 87       	std	Y+12, r25	; 0x0c
    3552:	ad 87       	std	Y+13, r26	; 0x0d
    3554:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3556:	6b 85       	ldd	r22, Y+11	; 0x0b
    3558:	7c 85       	ldd	r23, Y+12	; 0x0c
    355a:	8d 85       	ldd	r24, Y+13	; 0x0d
    355c:	9e 85       	ldd	r25, Y+14	; 0x0e
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	4a e7       	ldi	r20, 0x7A	; 122
    3564:	55 e4       	ldi	r21, 0x45	; 69
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	8f 83       	std	Y+7, r24	; 0x07
    3570:	98 87       	std	Y+8, r25	; 0x08
    3572:	a9 87       	std	Y+9, r26	; 0x09
    3574:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3576:	6f 81       	ldd	r22, Y+7	; 0x07
    3578:	78 85       	ldd	r23, Y+8	; 0x08
    357a:	89 85       	ldd	r24, Y+9	; 0x09
    357c:	9a 85       	ldd	r25, Y+10	; 0x0a
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	40 e8       	ldi	r20, 0x80	; 128
    3584:	5f e3       	ldi	r21, 0x3F	; 63
    3586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358a:	88 23       	and	r24, r24
    358c:	2c f4       	brge	.+10     	; 0x3598 <Left_Forward+0x7e>
		__ticks = 1;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	9e 83       	std	Y+6, r25	; 0x06
    3594:	8d 83       	std	Y+5, r24	; 0x05
    3596:	3f c0       	rjmp	.+126    	; 0x3616 <Left_Forward+0xfc>
	else if (__tmp > 65535)
    3598:	6f 81       	ldd	r22, Y+7	; 0x07
    359a:	78 85       	ldd	r23, Y+8	; 0x08
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	3f ef       	ldi	r19, 0xFF	; 255
    35a4:	4f e7       	ldi	r20, 0x7F	; 127
    35a6:	57 e4       	ldi	r21, 0x47	; 71
    35a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ac:	18 16       	cp	r1, r24
    35ae:	4c f5       	brge	.+82     	; 0x3602 <Left_Forward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e2       	ldi	r20, 0x20	; 32
    35be:	51 e4       	ldi	r21, 0x41	; 65
    35c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	bc 01       	movw	r22, r24
    35ca:	cd 01       	movw	r24, r26
    35cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	0f c0       	rjmp	.+30     	; 0x35f8 <Left_Forward+0xde>
    35da:	80 e9       	ldi	r24, 0x90	; 144
    35dc:	91 e0       	ldi	r25, 0x01	; 1
    35de:	9c 83       	std	Y+4, r25	; 0x04
    35e0:	8b 83       	std	Y+3, r24	; 0x03
    35e2:	8b 81       	ldd	r24, Y+3	; 0x03
    35e4:	9c 81       	ldd	r25, Y+4	; 0x04
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <Left_Forward+0xcc>
    35ea:	9c 83       	std	Y+4, r25	; 0x04
    35ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ee:	8d 81       	ldd	r24, Y+5	; 0x05
    35f0:	9e 81       	ldd	r25, Y+6	; 0x06
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	9e 83       	std	Y+6, r25	; 0x06
    35f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f8:	8d 81       	ldd	r24, Y+5	; 0x05
    35fa:	9e 81       	ldd	r25, Y+6	; 0x06
    35fc:	00 97       	sbiw	r24, 0x00	; 0
    35fe:	69 f7       	brne	.-38     	; 0x35da <Left_Forward+0xc0>
    3600:	14 c0       	rjmp	.+40     	; 0x362a <Left_Forward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3602:	6f 81       	ldd	r22, Y+7	; 0x07
    3604:	78 85       	ldd	r23, Y+8	; 0x08
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9e 83       	std	Y+6, r25	; 0x06
    3614:	8d 83       	std	Y+5, r24	; 0x05
    3616:	8d 81       	ldd	r24, Y+5	; 0x05
    3618:	9e 81       	ldd	r25, Y+6	; 0x06
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <Left_Forward+0x108>
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Forward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    362a:	8f 85       	ldd	r24, Y+15	; 0x0f
    362c:	98 89       	ldd	r25, Y+16	; 0x10
    362e:	0a 96       	adiw	r24, 0x0a	; 10
    3630:	98 8b       	std	Y+16, r25	; 0x10
    3632:	8f 87       	std	Y+15, r24	; 0x0f
    3634:	80 91 ae 01 	lds	r24, 0x01AE
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	8f 85       	ldd	r24, Y+15	; 0x0f
    363e:	98 89       	ldd	r25, Y+16	; 0x10
    3640:	28 17       	cp	r18, r24
    3642:	39 07       	cpc	r19, r25
    3644:	0c f0       	brlt	.+2      	; 0x3648 <Left_Forward+0x12e>
    3646:	76 cf       	rjmp	.-276    	; 0x3534 <Left_Forward+0x1a>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    3648:	60 96       	adiw	r28, 0x10	; 16
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <Left_Forward_Parking>:
 * Description :
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(uint8 speed)
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	61 97       	sbiw	r28, 0x11	; 17
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	cd bf       	out	0x3d, r28	; 61
    366e:	89 8b       	std	Y+17, r24	; 0x11
    for (int i = 0; i <= speed; i = i + 10)
    3670:	18 8a       	std	Y+16, r1	; 0x10
    3672:	1f 86       	std	Y+15, r1	; 0x0f
    3674:	80 c0       	rjmp	.+256    	; 0x3776 <Left_Forward_Parking+0x11c>
    {
        DcMotor1_Rotate(CCW, i);
    3676:	9f 85       	ldd	r25, Y+15	; 0x0f
    3678:	82 e0       	ldi	r24, 0x02	; 2
    367a:	69 2f       	mov	r22, r25
    367c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, 50);
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	62 e3       	ldi	r22, 0x32	; 50
    3684:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	a0 e0       	ldi	r26, 0x00	; 0
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	8b 87       	std	Y+11, r24	; 0x0b
    3692:	9c 87       	std	Y+12, r25	; 0x0c
    3694:	ad 87       	std	Y+13, r26	; 0x0d
    3696:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3698:	6b 85       	ldd	r22, Y+11	; 0x0b
    369a:	7c 85       	ldd	r23, Y+12	; 0x0c
    369c:	8d 85       	ldd	r24, Y+13	; 0x0d
    369e:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	4a e7       	ldi	r20, 0x7A	; 122
    36a6:	55 e4       	ldi	r21, 0x45	; 69
    36a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	8f 83       	std	Y+7, r24	; 0x07
    36b2:	98 87       	std	Y+8, r25	; 0x08
    36b4:	a9 87       	std	Y+9, r26	; 0x09
    36b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36b8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ba:	78 85       	ldd	r23, Y+8	; 0x08
    36bc:	89 85       	ldd	r24, Y+9	; 0x09
    36be:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	40 e8       	ldi	r20, 0x80	; 128
    36c6:	5f e3       	ldi	r21, 0x3F	; 63
    36c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36cc:	88 23       	and	r24, r24
    36ce:	2c f4       	brge	.+10     	; 0x36da <Left_Forward_Parking+0x80>
		__ticks = 1;
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	9e 83       	std	Y+6, r25	; 0x06
    36d6:	8d 83       	std	Y+5, r24	; 0x05
    36d8:	3f c0       	rjmp	.+126    	; 0x3758 <Left_Forward_Parking+0xfe>
	else if (__tmp > 65535)
    36da:	6f 81       	ldd	r22, Y+7	; 0x07
    36dc:	78 85       	ldd	r23, Y+8	; 0x08
    36de:	89 85       	ldd	r24, Y+9	; 0x09
    36e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	3f ef       	ldi	r19, 0xFF	; 255
    36e6:	4f e7       	ldi	r20, 0x7F	; 127
    36e8:	57 e4       	ldi	r21, 0x47	; 71
    36ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ee:	18 16       	cp	r1, r24
    36f0:	4c f5       	brge	.+82     	; 0x3744 <Left_Forward_Parking+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e2       	ldi	r20, 0x20	; 32
    3700:	51 e4       	ldi	r21, 0x41	; 65
    3702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	bc 01       	movw	r22, r24
    370c:	cd 01       	movw	r24, r26
    370e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	9e 83       	std	Y+6, r25	; 0x06
    3718:	8d 83       	std	Y+5, r24	; 0x05
    371a:	0f c0       	rjmp	.+30     	; 0x373a <Left_Forward_Parking+0xe0>
    371c:	80 e9       	ldi	r24, 0x90	; 144
    371e:	91 e0       	ldi	r25, 0x01	; 1
    3720:	9c 83       	std	Y+4, r25	; 0x04
    3722:	8b 83       	std	Y+3, r24	; 0x03
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	9c 81       	ldd	r25, Y+4	; 0x04
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <Left_Forward_Parking+0xce>
    372c:	9c 83       	std	Y+4, r25	; 0x04
    372e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3730:	8d 81       	ldd	r24, Y+5	; 0x05
    3732:	9e 81       	ldd	r25, Y+6	; 0x06
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	9e 83       	std	Y+6, r25	; 0x06
    3738:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    373a:	8d 81       	ldd	r24, Y+5	; 0x05
    373c:	9e 81       	ldd	r25, Y+6	; 0x06
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	69 f7       	brne	.-38     	; 0x371c <Left_Forward_Parking+0xc2>
    3742:	14 c0       	rjmp	.+40     	; 0x376c <Left_Forward_Parking+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3744:	6f 81       	ldd	r22, Y+7	; 0x07
    3746:	78 85       	ldd	r23, Y+8	; 0x08
    3748:	89 85       	ldd	r24, Y+9	; 0x09
    374a:	9a 85       	ldd	r25, Y+10	; 0x0a
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	9e 83       	std	Y+6, r25	; 0x06
    3756:	8d 83       	std	Y+5, r24	; 0x05
    3758:	8d 81       	ldd	r24, Y+5	; 0x05
    375a:	9e 81       	ldd	r25, Y+6	; 0x06
    375c:	9a 83       	std	Y+2, r25	; 0x02
    375e:	89 83       	std	Y+1, r24	; 0x01
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	9a 81       	ldd	r25, Y+2	; 0x02
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <Left_Forward_Parking+0x10a>
    3768:	9a 83       	std	Y+2, r25	; 0x02
    376a:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving forward (for parking).
 * This function stops motor 2 and gradually increases the speed of motor 1 to the maximum speed.
 */
void Left_Forward_Parking(uint8 speed)
{
    for (int i = 0; i <= speed; i = i + 10)
    376c:	8f 85       	ldd	r24, Y+15	; 0x0f
    376e:	98 89       	ldd	r25, Y+16	; 0x10
    3770:	0a 96       	adiw	r24, 0x0a	; 10
    3772:	98 8b       	std	Y+16, r25	; 0x10
    3774:	8f 87       	std	Y+15, r24	; 0x0f
    3776:	89 89       	ldd	r24, Y+17	; 0x11
    3778:	28 2f       	mov	r18, r24
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	8f 85       	ldd	r24, Y+15	; 0x0f
    377e:	98 89       	ldd	r25, Y+16	; 0x10
    3780:	28 17       	cp	r18, r24
    3782:	39 07       	cpc	r19, r25
    3784:	0c f0       	brlt	.+2      	; 0x3788 <Left_Forward_Parking+0x12e>
    3786:	77 cf       	rjmp	.-274    	; 0x3676 <Left_Forward_Parking+0x1c>
    {
        DcMotor1_Rotate(CCW, i);
        DcMotor2_Rotate(CW, 50);
        _delay_ms(DELAY_MOTOR);
    }
}
    3788:	61 96       	adiw	r28, 0x11	; 17
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	cf 91       	pop	r28
    3796:	df 91       	pop	r29
    3798:	08 95       	ret

0000379a <Right_Backward>:
 * Description :
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    379a:	df 93       	push	r29
    379c:	cf 93       	push	r28
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	60 97       	sbiw	r28, 0x10	; 16
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    37ae:	18 8a       	std	Y+16, r1	; 0x10
    37b0:	1f 86       	std	Y+15, r1	; 0x0f
    37b2:	80 c0       	rjmp	.+256    	; 0x38b4 <Right_Backward+0x11a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(CW, i);
    37bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	69 2f       	mov	r22, r25
    37c2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a0 e0       	ldi	r26, 0x00	; 0
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	8b 87       	std	Y+11, r24	; 0x0b
    37d0:	9c 87       	std	Y+12, r25	; 0x0c
    37d2:	ad 87       	std	Y+13, r26	; 0x0d
    37d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37da:	8d 85       	ldd	r24, Y+13	; 0x0d
    37dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a e7       	ldi	r20, 0x7A	; 122
    37e4:	55 e4       	ldi	r21, 0x45	; 69
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    37f0:	98 87       	std	Y+8, r25	; 0x08
    37f2:	a9 87       	std	Y+9, r26	; 0x09
    37f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f6:	6f 81       	ldd	r22, Y+7	; 0x07
    37f8:	78 85       	ldd	r23, Y+8	; 0x08
    37fa:	89 85       	ldd	r24, Y+9	; 0x09
    37fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <Right_Backward+0x7e>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <Right_Backward+0xfc>
	else if (__tmp > 65535)
    3818:	6f 81       	ldd	r22, Y+7	; 0x07
    381a:	78 85       	ldd	r23, Y+8	; 0x08
    381c:	89 85       	ldd	r24, Y+9	; 0x09
    381e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <Right_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <Right_Backward+0xde>
    385a:	80 e9       	ldi	r24, 0x90	; 144
    385c:	91 e0       	ldi	r25, 0x01	; 1
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	8b 83       	std	Y+3, r24	; 0x03
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <Right_Backward+0xcc>
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <Right_Backward+0xc0>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <Right_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6f 81       	ldd	r22, Y+7	; 0x07
    3884:	78 85       	ldd	r23, Y+8	; 0x08
    3886:	89 85       	ldd	r24, Y+9	; 0x09
    3888:	9a 85       	ldd	r25, Y+10	; 0x0a
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <Right_Backward+0x108>
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car right while moving backward.
 * This function stops motor 1 and gradually increases the speed of motor 2.
 */
void Right_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    38aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ac:	98 89       	ldd	r25, Y+16	; 0x10
    38ae:	0a 96       	adiw	r24, 0x0a	; 10
    38b0:	98 8b       	std	Y+16, r25	; 0x10
    38b2:	8f 87       	std	Y+15, r24	; 0x0f
    38b4:	80 91 ae 01 	lds	r24, 0x01AE
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38be:	98 89       	ldd	r25, Y+16	; 0x10
    38c0:	28 17       	cp	r18, r24
    38c2:	39 07       	cpc	r19, r25
    38c4:	0c f0       	brlt	.+2      	; 0x38c8 <Right_Backward+0x12e>
    38c6:	76 cf       	rjmp	.-276    	; 0x37b4 <Right_Backward+0x1a>
    {
        DcMotor1_Rotate(STOP, MOTOR_STOP);
        DcMotor2_Rotate(CW, i);
        _delay_ms(DELAY_MOTOR);
    }
}
    38c8:	60 96       	adiw	r28, 0x10	; 16
    38ca:	0f b6       	in	r0, 0x3f	; 63
    38cc:	f8 94       	cli
    38ce:	de bf       	out	0x3e, r29	; 62
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	cd bf       	out	0x3d, r28	; 61
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <Left_Backward>:
 * Description :
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	60 97       	sbiw	r28, 0x10	; 16
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i <= max_Speed; i = i + 10)
    38ee:	18 8a       	std	Y+16, r1	; 0x10
    38f0:	1f 86       	std	Y+15, r1	; 0x0f
    38f2:	80 c0       	rjmp	.+256    	; 0x39f4 <Left_Backward+0x11a>
    {
        DcMotor1_Rotate(CW, i);
    38f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	69 2f       	mov	r22, r25
    38fa:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DcMotor1_Rotate>
        DcMotor2_Rotate(STOP, MOTOR_STOP);
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <DcMotor2_Rotate>
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	a0 e0       	ldi	r26, 0x00	; 0
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	8b 87       	std	Y+11, r24	; 0x0b
    3910:	9c 87       	std	Y+12, r25	; 0x0c
    3912:	ad 87       	std	Y+13, r26	; 0x0d
    3914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3916:	6b 85       	ldd	r22, Y+11	; 0x0b
    3918:	7c 85       	ldd	r23, Y+12	; 0x0c
    391a:	8d 85       	ldd	r24, Y+13	; 0x0d
    391c:	9e 85       	ldd	r25, Y+14	; 0x0e
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	4a e7       	ldi	r20, 0x7A	; 122
    3924:	55 e4       	ldi	r21, 0x45	; 69
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	8f 83       	std	Y+7, r24	; 0x07
    3930:	98 87       	std	Y+8, r25	; 0x08
    3932:	a9 87       	std	Y+9, r26	; 0x09
    3934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3936:	6f 81       	ldd	r22, Y+7	; 0x07
    3938:	78 85       	ldd	r23, Y+8	; 0x08
    393a:	89 85       	ldd	r24, Y+9	; 0x09
    393c:	9a 85       	ldd	r25, Y+10	; 0x0a
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e8       	ldi	r20, 0x80	; 128
    3944:	5f e3       	ldi	r21, 0x3F	; 63
    3946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394a:	88 23       	and	r24, r24
    394c:	2c f4       	brge	.+10     	; 0x3958 <Left_Backward+0x7e>
		__ticks = 1;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	9e 83       	std	Y+6, r25	; 0x06
    3954:	8d 83       	std	Y+5, r24	; 0x05
    3956:	3f c0       	rjmp	.+126    	; 0x39d6 <Left_Backward+0xfc>
	else if (__tmp > 65535)
    3958:	6f 81       	ldd	r22, Y+7	; 0x07
    395a:	78 85       	ldd	r23, Y+8	; 0x08
    395c:	89 85       	ldd	r24, Y+9	; 0x09
    395e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	3f ef       	ldi	r19, 0xFF	; 255
    3964:	4f e7       	ldi	r20, 0x7F	; 127
    3966:	57 e4       	ldi	r21, 0x47	; 71
    3968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    396c:	18 16       	cp	r1, r24
    396e:	4c f5       	brge	.+82     	; 0x39c2 <Left_Backward+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3970:	6b 85       	ldd	r22, Y+11	; 0x0b
    3972:	7c 85       	ldd	r23, Y+12	; 0x0c
    3974:	8d 85       	ldd	r24, Y+13	; 0x0d
    3976:	9e 85       	ldd	r25, Y+14	; 0x0e
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	40 e2       	ldi	r20, 0x20	; 32
    397e:	51 e4       	ldi	r21, 0x41	; 65
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	bc 01       	movw	r22, r24
    398a:	cd 01       	movw	r24, r26
    398c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	9e 83       	std	Y+6, r25	; 0x06
    3996:	8d 83       	std	Y+5, r24	; 0x05
    3998:	0f c0       	rjmp	.+30     	; 0x39b8 <Left_Backward+0xde>
    399a:	80 e9       	ldi	r24, 0x90	; 144
    399c:	91 e0       	ldi	r25, 0x01	; 1
    399e:	9c 83       	std	Y+4, r25	; 0x04
    39a0:	8b 83       	std	Y+3, r24	; 0x03
    39a2:	8b 81       	ldd	r24, Y+3	; 0x03
    39a4:	9c 81       	ldd	r25, Y+4	; 0x04
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <Left_Backward+0xcc>
    39aa:	9c 83       	std	Y+4, r25	; 0x04
    39ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ae:	8d 81       	ldd	r24, Y+5	; 0x05
    39b0:	9e 81       	ldd	r25, Y+6	; 0x06
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	9e 83       	std	Y+6, r25	; 0x06
    39b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	69 f7       	brne	.-38     	; 0x399a <Left_Backward+0xc0>
    39c0:	14 c0       	rjmp	.+40     	; 0x39ea <Left_Backward+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c2:	6f 81       	ldd	r22, Y+7	; 0x07
    39c4:	78 85       	ldd	r23, Y+8	; 0x08
    39c6:	89 85       	ldd	r24, Y+9	; 0x09
    39c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	9e 83       	std	Y+6, r25	; 0x06
    39d4:	8d 83       	std	Y+5, r24	; 0x05
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	9e 81       	ldd	r25, Y+6	; 0x06
    39da:	9a 83       	std	Y+2, r25	; 0x02
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <Left_Backward+0x108>
    39e6:	9a 83       	std	Y+2, r25	; 0x02
    39e8:	89 83       	std	Y+1, r24	; 0x01
 * Function to turn the car left while moving backward.
 * This function stops motor 2 and gradually increases the speed of motor 1.
 */
void Left_Backward(void)
{
    for (int i = 0; i <= max_Speed; i = i + 10)
    39ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ec:	98 89       	ldd	r25, Y+16	; 0x10
    39ee:	0a 96       	adiw	r24, 0x0a	; 10
    39f0:	98 8b       	std	Y+16, r25	; 0x10
    39f2:	8f 87       	std	Y+15, r24	; 0x0f
    39f4:	80 91 ae 01 	lds	r24, 0x01AE
    39f8:	28 2f       	mov	r18, r24
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fe:	98 89       	ldd	r25, Y+16	; 0x10
    3a00:	28 17       	cp	r18, r24
    3a02:	39 07       	cpc	r19, r25
    3a04:	0c f0       	brlt	.+2      	; 0x3a08 <Left_Backward+0x12e>
    3a06:	76 cf       	rjmp	.-276    	; 0x38f4 <Left_Backward+0x1a>
    {
        DcMotor1_Rotate(CW, i);
        DcMotor2_Rotate(STOP, MOTOR_STOP);
        _delay_ms(DELAY_MOTOR);
    }
}
    3a08:	60 96       	adiw	r28, 0x10	; 16
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	cf 91       	pop	r28
    3a16:	df 91       	pop	r29
    3a18:	08 95       	ret

00003a1a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions using the GPIO driver.
 * 2. Setup the LCD Data Mode (4-bits or 8-bits).
 */
void LCD_init(void)
{
    3a1a:	df 93       	push	r29
    3a1c:	cf 93       	push	r28
    3a1e:	cd b7       	in	r28, 0x3d	; 61
    3a20:	de b7       	in	r29, 0x3e	; 62
    3a22:	2e 97       	sbiw	r28, 0x0e	; 14
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	de bf       	out	0x3e, r29	; 62
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	cd bf       	out	0x3d, r28	; 61
    /* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	41 e0       	ldi	r20, 0x01	; 1
    3a34:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	62 e0       	ldi	r22, 0x02	; 2
    3a3c:	41 e0       	ldi	r20, 0x01	; 1
    3a3e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	a0 ea       	ldi	r26, 0xA0	; 160
    3a48:	b1 e4       	ldi	r27, 0x41	; 65
    3a4a:	8b 87       	std	Y+11, r24	; 0x0b
    3a4c:	9c 87       	std	Y+12, r25	; 0x0c
    3a4e:	ad 87       	std	Y+13, r26	; 0x0d
    3a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	4a e7       	ldi	r20, 0x7A	; 122
    3a60:	55 e4       	ldi	r21, 0x45	; 69
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	8f 83       	std	Y+7, r24	; 0x07
    3a6c:	98 87       	std	Y+8, r25	; 0x08
    3a6e:	a9 87       	std	Y+9, r26	; 0x09
    3a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a72:	6f 81       	ldd	r22, Y+7	; 0x07
    3a74:	78 85       	ldd	r23, Y+8	; 0x08
    3a76:	89 85       	ldd	r24, Y+9	; 0x09
    3a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e8       	ldi	r20, 0x80	; 128
    3a80:	5f e3       	ldi	r21, 0x3F	; 63
    3a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a86:	88 23       	and	r24, r24
    3a88:	2c f4       	brge	.+10     	; 0x3a94 <LCD_init+0x7a>
		__ticks = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9e 83       	std	Y+6, r25	; 0x06
    3a90:	8d 83       	std	Y+5, r24	; 0x05
    3a92:	3f c0       	rjmp	.+126    	; 0x3b12 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3a94:	6f 81       	ldd	r22, Y+7	; 0x07
    3a96:	78 85       	ldd	r23, Y+8	; 0x08
    3a98:	89 85       	ldd	r24, Y+9	; 0x09
    3a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	57 e4       	ldi	r21, 0x47	; 71
    3aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa8:	18 16       	cp	r1, r24
    3aaa:	4c f5       	brge	.+82     	; 0x3afe <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e2       	ldi	r20, 0x20	; 32
    3aba:	51 e4       	ldi	r21, 0x41	; 65
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	cd 01       	movw	r24, r26
    3ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	9e 83       	std	Y+6, r25	; 0x06
    3ad2:	8d 83       	std	Y+5, r24	; 0x05
    3ad4:	0f c0       	rjmp	.+30     	; 0x3af4 <LCD_init+0xda>
    3ad6:	80 e9       	ldi	r24, 0x90	; 144
    3ad8:	91 e0       	ldi	r25, 0x01	; 1
    3ada:	9c 83       	std	Y+4, r25	; 0x04
    3adc:	8b 83       	std	Y+3, r24	; 0x03
    3ade:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <LCD_init+0xc8>
    3ae6:	9c 83       	std	Y+4, r25	; 0x04
    3ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	9e 83       	std	Y+6, r25	; 0x06
    3af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af4:	8d 81       	ldd	r24, Y+5	; 0x05
    3af6:	9e 81       	ldd	r25, Y+6	; 0x06
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	69 f7       	brne	.-38     	; 0x3ad6 <LCD_init+0xbc>
    3afc:	14 c0       	rjmp	.+40     	; 0x3b26 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afe:	6f 81       	ldd	r22, Y+7	; 0x07
    3b00:	78 85       	ldd	r23, Y+8	; 0x08
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
    3b10:	8d 83       	std	Y+5, r24	; 0x05
    3b12:	8d 81       	ldd	r24, Y+5	; 0x05
    3b14:	9e 81       	ldd	r25, Y+6	; 0x06
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	f1 f7       	brne	.-4      	; 0x3b1e <LCD_init+0x104>
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(20);  /* LCD Power ON delay (always > 15ms) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Configure 4 pins in the data port as output pins */
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	63 e0       	ldi	r22, 0x03	; 3
    3b2a:	41 e0       	ldi	r20, 0x01	; 1
    3b2c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	64 e0       	ldi	r22, 0x04	; 4
    3b34:	41 e0       	ldi	r20, 0x01	; 1
    3b36:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	65 e0       	ldi	r22, 0x05	; 5
    3b3e:	41 e0       	ldi	r20, 0x01	; 1
    3b40:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	66 e0       	ldi	r22, 0x06	; 6
    3b48:	41 e0       	ldi	r20, 0x01	; 1
    3b4a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>

    /* Send initialization commands for 4-bit mode */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    3b4e:	83 e3       	ldi	r24, 0x33	; 51
    3b50:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_sendCommand>
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3b54:	82 e3       	ldi	r24, 0x32	; 50
    3b56:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_sendCommand>

    /* Set 2-line LCD, 4-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    3b5a:	88 e2       	ldi	r24, 0x28	; 40
    3b5c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_sendCommand>

    /* Set 2-line LCD, 8-bit mode, and 5x7 dot display */
    LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif

    LCD_sendCommand(LCD_CURSOR_OFF);  /* Turn cursor off */
    3b60:	8c e0       	ldi	r24, 0x0C	; 12
    3b62:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_sendCommand>
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Clear LCD at the beginning */
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_sendCommand>
}
    3b6c:	2e 96       	adiw	r28, 0x0e	; 14
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	f8 94       	cli
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	0f be       	out	0x3f, r0	; 63
    3b76:	cd bf       	out	0x3d, r28	; 61
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <LCD_sendCommand>:
 * Send a command to the LCD.
 * Parameters  :
 * - command: The command to be sent.
 */
void LCD_sendCommand(uint8 command)
{
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	c3 56       	subi	r28, 0x63	; 99
    3b8c:	d0 40       	sbci	r29, 0x00	; 0
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	fe 01       	movw	r30, r28
    3b9a:	ed 59       	subi	r30, 0x9D	; 157
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);  /* Instruction Mode (RS = 0) */
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	61 e0       	ldi	r22, 0x01	; 1
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    3baa:	fe 01       	movw	r30, r28
    3bac:	e1 5a       	subi	r30, 0xA1	; 161
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	a0 e8       	ldi	r26, 0x80	; 128
    3bb6:	bf e3       	ldi	r27, 0x3F	; 63
    3bb8:	80 83       	st	Z, r24
    3bba:	91 83       	std	Z+1, r25	; 0x01
    3bbc:	a2 83       	std	Z+2, r26	; 0x02
    3bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc0:	8e 01       	movw	r16, r28
    3bc2:	05 5a       	subi	r16, 0xA5	; 165
    3bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e1 5a       	subi	r30, 0xA1	; 161
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	60 81       	ld	r22, Z
    3bce:	71 81       	ldd	r23, Z+1	; 0x01
    3bd0:	82 81       	ldd	r24, Z+2	; 0x02
    3bd2:	93 81       	ldd	r25, Z+3	; 0x03
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	4a e7       	ldi	r20, 0x7A	; 122
    3bda:	55 e4       	ldi	r21, 0x45	; 69
    3bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	f8 01       	movw	r30, r16
    3be6:	80 83       	st	Z, r24
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	a2 83       	std	Z+2, r26	; 0x02
    3bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e5 5a       	subi	r30, 0xA5	; 165
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	60 81       	ld	r22, Z
    3bf6:	71 81       	ldd	r23, Z+1	; 0x01
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	93 81       	ldd	r25, Z+3	; 0x03
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e8       	ldi	r20, 0x80	; 128
    3c02:	5f e3       	ldi	r21, 0x3F	; 63
    3c04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c08:	88 23       	and	r24, r24
    3c0a:	44 f4       	brge	.+16     	; 0x3c1c <LCD_sendCommand+0x9e>
		__ticks = 1;
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e7 5a       	subi	r30, 0xA7	; 167
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	91 83       	std	Z+1, r25	; 0x01
    3c18:	80 83       	st	Z, r24
    3c1a:	64 c0       	rjmp	.+200    	; 0x3ce4 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e5 5a       	subi	r30, 0xA5	; 165
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	60 81       	ld	r22, Z
    3c24:	71 81       	ldd	r23, Z+1	; 0x01
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	3f ef       	ldi	r19, 0xFF	; 255
    3c2e:	4f e7       	ldi	r20, 0x7F	; 127
    3c30:	57 e4       	ldi	r21, 0x47	; 71
    3c32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c36:	18 16       	cp	r1, r24
    3c38:	0c f0       	brlt	.+2      	; 0x3c3c <LCD_sendCommand+0xbe>
    3c3a:	43 c0       	rjmp	.+134    	; 0x3cc2 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	e1 5a       	subi	r30, 0xA1	; 161
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	60 81       	ld	r22, Z
    3c44:	71 81       	ldd	r23, Z+1	; 0x01
    3c46:	82 81       	ldd	r24, Z+2	; 0x02
    3c48:	93 81       	ldd	r25, Z+3	; 0x03
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	40 e2       	ldi	r20, 0x20	; 32
    3c50:	51 e4       	ldi	r21, 0x41	; 65
    3c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	8e 01       	movw	r16, r28
    3c5c:	07 5a       	subi	r16, 0xA7	; 167
    3c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
    3c72:	1f c0       	rjmp	.+62     	; 0x3cb2 <LCD_sendCommand+0x134>
    3c74:	fe 01       	movw	r30, r28
    3c76:	e9 5a       	subi	r30, 0xA9	; 169
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	80 e9       	ldi	r24, 0x90	; 144
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	91 83       	std	Z+1, r25	; 0x01
    3c80:	80 83       	st	Z, r24
    3c82:	fe 01       	movw	r30, r28
    3c84:	e9 5a       	subi	r30, 0xA9	; 169
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	80 81       	ld	r24, Z
    3c8a:	91 81       	ldd	r25, Z+1	; 0x01
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <LCD_sendCommand+0x10e>
    3c90:	fe 01       	movw	r30, r28
    3c92:	e9 5a       	subi	r30, 0xA9	; 169
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9a:	de 01       	movw	r26, r28
    3c9c:	a7 5a       	subi	r26, 0xA7	; 167
    3c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e7 5a       	subi	r30, 0xA7	; 167
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	01 97       	sbiw	r24, 0x01	; 1
    3cac:	11 96       	adiw	r26, 0x01	; 1
    3cae:	9c 93       	st	X, r25
    3cb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e7 5a       	subi	r30, 0xA7	; 167
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	80 81       	ld	r24, Z
    3cba:	91 81       	ldd	r25, Z+1	; 0x01
    3cbc:	00 97       	sbiw	r24, 0x00	; 0
    3cbe:	d1 f6       	brne	.-76     	; 0x3c74 <LCD_sendCommand+0xf6>
    3cc0:	27 c0       	rjmp	.+78     	; 0x3d10 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc2:	8e 01       	movw	r16, r28
    3cc4:	07 5a       	subi	r16, 0xA7	; 167
    3cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc8:	fe 01       	movw	r30, r28
    3cca:	e5 5a       	subi	r30, 0xA5	; 165
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	60 81       	ld	r22, Z
    3cd0:	71 81       	ldd	r23, Z+1	; 0x01
    3cd2:	82 81       	ldd	r24, Z+2	; 0x02
    3cd4:	93 81       	ldd	r25, Z+3	; 0x03
    3cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	f8 01       	movw	r30, r16
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	80 83       	st	Z, r24
    3ce4:	de 01       	movw	r26, r28
    3ce6:	ab 5a       	subi	r26, 0xAB	; 171
    3ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cea:	fe 01       	movw	r30, r28
    3cec:	e7 5a       	subi	r30, 0xA7	; 167
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	8d 93       	st	X+, r24
    3cf6:	9c 93       	st	X, r25
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	eb 5a       	subi	r30, 0xAB	; 171
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	80 81       	ld	r24, Z
    3d00:	91 81       	ldd	r25, Z+1	; 0x01
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	f1 f7       	brne	.-4      	; 0x3d02 <LCD_sendCommand+0x184>
    3d06:	fe 01       	movw	r30, r28
    3d08:	eb 5a       	subi	r30, 0xAB	; 171
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	91 83       	std	Z+1, r25	; 0x01
    3d0e:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	62 e0       	ldi	r22, 0x02	; 2
    3d14:	41 e0       	ldi	r20, 0x01	; 1
    3d16:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	ef 5a       	subi	r30, 0xAF	; 175
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	a0 e8       	ldi	r26, 0x80	; 128
    3d26:	bf e3       	ldi	r27, 0x3F	; 63
    3d28:	80 83       	st	Z, r24
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	a2 83       	std	Z+2, r26	; 0x02
    3d2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d30:	8e 01       	movw	r16, r28
    3d32:	03 5b       	subi	r16, 0xB3	; 179
    3d34:	1f 4f       	sbci	r17, 0xFF	; 255
    3d36:	fe 01       	movw	r30, r28
    3d38:	ef 5a       	subi	r30, 0xAF	; 175
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	60 81       	ld	r22, Z
    3d3e:	71 81       	ldd	r23, Z+1	; 0x01
    3d40:	82 81       	ldd	r24, Z+2	; 0x02
    3d42:	93 81       	ldd	r25, Z+3	; 0x03
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	4a e7       	ldi	r20, 0x7A	; 122
    3d4a:	55 e4       	ldi	r21, 0x45	; 69
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	f8 01       	movw	r30, r16
    3d56:	80 83       	st	Z, r24
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	a2 83       	std	Z+2, r26	; 0x02
    3d5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e3 5b       	subi	r30, 0xB3	; 179
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	82 81       	ldd	r24, Z+2	; 0x02
    3d6a:	93 81       	ldd	r25, Z+3	; 0x03
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e8       	ldi	r20, 0x80	; 128
    3d72:	5f e3       	ldi	r21, 0x3F	; 63
    3d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d78:	88 23       	and	r24, r24
    3d7a:	44 f4       	brge	.+16     	; 0x3d8c <LCD_sendCommand+0x20e>
		__ticks = 1;
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e5 5b       	subi	r30, 0xB5	; 181
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
    3d8a:	64 c0       	rjmp	.+200    	; 0x3e54 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e3 5b       	subi	r30, 0xB3	; 179
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	60 81       	ld	r22, Z
    3d94:	71 81       	ldd	r23, Z+1	; 0x01
    3d96:	82 81       	ldd	r24, Z+2	; 0x02
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	3f ef       	ldi	r19, 0xFF	; 255
    3d9e:	4f e7       	ldi	r20, 0x7F	; 127
    3da0:	57 e4       	ldi	r21, 0x47	; 71
    3da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3da6:	18 16       	cp	r1, r24
    3da8:	0c f0       	brlt	.+2      	; 0x3dac <LCD_sendCommand+0x22e>
    3daa:	43 c0       	rjmp	.+134    	; 0x3e32 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dac:	fe 01       	movw	r30, r28
    3dae:	ef 5a       	subi	r30, 0xAF	; 175
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	60 81       	ld	r22, Z
    3db4:	71 81       	ldd	r23, Z+1	; 0x01
    3db6:	82 81       	ldd	r24, Z+2	; 0x02
    3db8:	93 81       	ldd	r25, Z+3	; 0x03
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	40 e2       	ldi	r20, 0x20	; 32
    3dc0:	51 e4       	ldi	r21, 0x41	; 65
    3dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	8e 01       	movw	r16, r28
    3dcc:	05 5b       	subi	r16, 0xB5	; 181
    3dce:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	cd 01       	movw	r24, r26
    3dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	f8 01       	movw	r30, r16
    3dde:	91 83       	std	Z+1, r25	; 0x01
    3de0:	80 83       	st	Z, r24
    3de2:	1f c0       	rjmp	.+62     	; 0x3e22 <LCD_sendCommand+0x2a4>
    3de4:	fe 01       	movw	r30, r28
    3de6:	e7 5b       	subi	r30, 0xB7	; 183
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	80 e9       	ldi	r24, 0x90	; 144
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
    3df2:	fe 01       	movw	r30, r28
    3df4:	e7 5b       	subi	r30, 0xB7	; 183
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <LCD_sendCommand+0x27e>
    3e00:	fe 01       	movw	r30, r28
    3e02:	e7 5b       	subi	r30, 0xB7	; 183
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0a:	de 01       	movw	r26, r28
    3e0c:	a5 5b       	subi	r26, 0xB5	; 181
    3e0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e10:	fe 01       	movw	r30, r28
    3e12:	e5 5b       	subi	r30, 0xB5	; 181
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	80 81       	ld	r24, Z
    3e18:	91 81       	ldd	r25, Z+1	; 0x01
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	11 96       	adiw	r26, 0x01	; 1
    3e1e:	9c 93       	st	X, r25
    3e20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e22:	fe 01       	movw	r30, r28
    3e24:	e5 5b       	subi	r30, 0xB5	; 181
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 81       	ldd	r25, Z+1	; 0x01
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	d1 f6       	brne	.-76     	; 0x3de4 <LCD_sendCommand+0x266>
    3e30:	27 c0       	rjmp	.+78     	; 0x3e80 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e32:	8e 01       	movw	r16, r28
    3e34:	05 5b       	subi	r16, 0xB5	; 181
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e3 5b       	subi	r30, 0xB3	; 179
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	f8 01       	movw	r30, r16
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	80 83       	st	Z, r24
    3e54:	de 01       	movw	r26, r28
    3e56:	a9 5b       	subi	r26, 0xB9	; 185
    3e58:	bf 4f       	sbci	r27, 0xFF	; 255
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e5 5b       	subi	r30, 0xB5	; 181
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	8d 93       	st	X+, r24
    3e66:	9c 93       	st	X, r25
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e9 5b       	subi	r30, 0xB9	; 185
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	80 81       	ld	r24, Z
    3e70:	91 81       	ldd	r25, Z+1	; 0x01
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	f1 f7       	brne	.-4      	; 0x3e72 <LCD_sendCommand+0x2f4>
    3e76:	fe 01       	movw	r30, r28
    3e78:	e9 5b       	subi	r30, 0xB9	; 185
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	91 83       	std	Z+1, r25	; 0x01
    3e7e:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    3e80:	fe 01       	movw	r30, r28
    3e82:	ed 59       	subi	r30, 0x9D	; 157
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	80 81       	ld	r24, Z
    3e88:	88 2f       	mov	r24, r24
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	80 71       	andi	r24, 0x10	; 16
    3e8e:	90 70       	andi	r25, 0x00	; 0
    3e90:	95 95       	asr	r25
    3e92:	87 95       	ror	r24
    3e94:	95 95       	asr	r25
    3e96:	87 95       	ror	r24
    3e98:	95 95       	asr	r25
    3e9a:	87 95       	ror	r24
    3e9c:	95 95       	asr	r25
    3e9e:	87 95       	ror	r24
    3ea0:	98 2f       	mov	r25, r24
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	63 e0       	ldi	r22, 0x03	; 3
    3ea6:	49 2f       	mov	r20, r25
    3ea8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    3eac:	fe 01       	movw	r30, r28
    3eae:	ed 59       	subi	r30, 0x9D	; 157
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	88 2f       	mov	r24, r24
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	80 72       	andi	r24, 0x20	; 32
    3eba:	90 70       	andi	r25, 0x00	; 0
    3ebc:	95 95       	asr	r25
    3ebe:	87 95       	ror	r24
    3ec0:	95 95       	asr	r25
    3ec2:	87 95       	ror	r24
    3ec4:	95 95       	asr	r25
    3ec6:	87 95       	ror	r24
    3ec8:	95 95       	asr	r25
    3eca:	87 95       	ror	r24
    3ecc:	95 95       	asr	r25
    3ece:	87 95       	ror	r24
    3ed0:	98 2f       	mov	r25, r24
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	64 e0       	ldi	r22, 0x04	; 4
    3ed6:	49 2f       	mov	r20, r25
    3ed8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    3edc:	fe 01       	movw	r30, r28
    3ede:	ed 59       	subi	r30, 0x9D	; 157
    3ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee2:	80 81       	ld	r24, Z
    3ee4:	88 2f       	mov	r24, r24
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	80 74       	andi	r24, 0x40	; 64
    3eea:	90 70       	andi	r25, 0x00	; 0
    3eec:	08 2e       	mov	r0, r24
    3eee:	89 2f       	mov	r24, r25
    3ef0:	00 0c       	add	r0, r0
    3ef2:	88 1f       	adc	r24, r24
    3ef4:	99 0b       	sbc	r25, r25
    3ef6:	00 0c       	add	r0, r0
    3ef8:	88 1f       	adc	r24, r24
    3efa:	99 1f       	adc	r25, r25
    3efc:	98 2f       	mov	r25, r24
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	65 e0       	ldi	r22, 0x05	; 5
    3f02:	49 2f       	mov	r20, r25
    3f04:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    3f08:	fe 01       	movw	r30, r28
    3f0a:	ed 59       	subi	r30, 0x9D	; 157
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	80 81       	ld	r24, Z
    3f10:	98 2f       	mov	r25, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	99 27       	eor	r25, r25
    3f16:	99 1f       	adc	r25, r25
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	66 e0       	ldi	r22, 0x06	; 6
    3f1c:	49 2f       	mov	r20, r25
    3f1e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    3f22:	fe 01       	movw	r30, r28
    3f24:	ed 5b       	subi	r30, 0xBD	; 189
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	a0 e8       	ldi	r26, 0x80	; 128
    3f2e:	bf e3       	ldi	r27, 0x3F	; 63
    3f30:	80 83       	st	Z, r24
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	a2 83       	std	Z+2, r26	; 0x02
    3f36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f38:	8e 01       	movw	r16, r28
    3f3a:	01 5c       	subi	r16, 0xC1	; 193
    3f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3e:	fe 01       	movw	r30, r28
    3f40:	ed 5b       	subi	r30, 0xBD	; 189
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	60 81       	ld	r22, Z
    3f46:	71 81       	ldd	r23, Z+1	; 0x01
    3f48:	82 81       	ldd	r24, Z+2	; 0x02
    3f4a:	93 81       	ldd	r25, Z+3	; 0x03
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	4a e7       	ldi	r20, 0x7A	; 122
    3f52:	55 e4       	ldi	r21, 0x45	; 69
    3f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	f8 01       	movw	r30, r16
    3f5e:	80 83       	st	Z, r24
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	a2 83       	std	Z+2, r26	; 0x02
    3f64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f66:	fe 01       	movw	r30, r28
    3f68:	ff 96       	adiw	r30, 0x3f	; 63
    3f6a:	60 81       	ld	r22, Z
    3f6c:	71 81       	ldd	r23, Z+1	; 0x01
    3f6e:	82 81       	ldd	r24, Z+2	; 0x02
    3f70:	93 81       	ldd	r25, Z+3	; 0x03
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e8       	ldi	r20, 0x80	; 128
    3f78:	5f e3       	ldi	r21, 0x3F	; 63
    3f7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f7e:	88 23       	and	r24, r24
    3f80:	2c f4       	brge	.+10     	; 0x3f8c <LCD_sendCommand+0x40e>
		__ticks = 1;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	9e af       	std	Y+62, r25	; 0x3e
    3f88:	8d af       	std	Y+61, r24	; 0x3d
    3f8a:	46 c0       	rjmp	.+140    	; 0x4018 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3f8c:	fe 01       	movw	r30, r28
    3f8e:	ff 96       	adiw	r30, 0x3f	; 63
    3f90:	60 81       	ld	r22, Z
    3f92:	71 81       	ldd	r23, Z+1	; 0x01
    3f94:	82 81       	ldd	r24, Z+2	; 0x02
    3f96:	93 81       	ldd	r25, Z+3	; 0x03
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	3f ef       	ldi	r19, 0xFF	; 255
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	57 e4       	ldi	r21, 0x47	; 71
    3fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa4:	18 16       	cp	r1, r24
    3fa6:	64 f5       	brge	.+88     	; 0x4000 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa8:	fe 01       	movw	r30, r28
    3faa:	ed 5b       	subi	r30, 0xBD	; 189
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	60 81       	ld	r22, Z
    3fb0:	71 81       	ldd	r23, Z+1	; 0x01
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	93 81       	ldd	r25, Z+3	; 0x03
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e2       	ldi	r20, 0x20	; 32
    3fbc:	51 e4       	ldi	r21, 0x41	; 65
    3fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	bc 01       	movw	r22, r24
    3fc8:	cd 01       	movw	r24, r26
    3fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	9e af       	std	Y+62, r25	; 0x3e
    3fd4:	8d af       	std	Y+61, r24	; 0x3d
    3fd6:	0f c0       	rjmp	.+30     	; 0x3ff6 <LCD_sendCommand+0x478>
    3fd8:	80 e9       	ldi	r24, 0x90	; 144
    3fda:	91 e0       	ldi	r25, 0x01	; 1
    3fdc:	9c af       	std	Y+60, r25	; 0x3c
    3fde:	8b af       	std	Y+59, r24	; 0x3b
    3fe0:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fe2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <LCD_sendCommand+0x466>
    3fe8:	9c af       	std	Y+60, r25	; 0x3c
    3fea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fec:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fee:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	9e af       	std	Y+62, r25	; 0x3e
    3ff4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ff8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	69 f7       	brne	.-38     	; 0x3fd8 <LCD_sendCommand+0x45a>
    3ffe:	16 c0       	rjmp	.+44     	; 0x402c <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4000:	fe 01       	movw	r30, r28
    4002:	ff 96       	adiw	r30, 0x3f	; 63
    4004:	60 81       	ld	r22, Z
    4006:	71 81       	ldd	r23, Z+1	; 0x01
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	93 81       	ldd	r25, Z+3	; 0x03
    400c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	9e af       	std	Y+62, r25	; 0x3e
    4016:	8d af       	std	Y+61, r24	; 0x3d
    4018:	8d ad       	ldd	r24, Y+61	; 0x3d
    401a:	9e ad       	ldd	r25, Y+62	; 0x3e
    401c:	9a af       	std	Y+58, r25	; 0x3a
    401e:	89 af       	std	Y+57, r24	; 0x39
    4020:	89 ad       	ldd	r24, Y+57	; 0x39
    4022:	9a ad       	ldd	r25, Y+58	; 0x3a
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	f1 f7       	brne	.-4      	; 0x4024 <LCD_sendCommand+0x4a6>
    4028:	9a af       	std	Y+58, r25	; 0x3a
    402a:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	62 e0       	ldi	r22, 0x02	; 2
    4030:	40 e0       	ldi	r20, 0x00	; 0
    4032:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	a0 e8       	ldi	r26, 0x80	; 128
    403c:	bf e3       	ldi	r27, 0x3F	; 63
    403e:	8d ab       	std	Y+53, r24	; 0x35
    4040:	9e ab       	std	Y+54, r25	; 0x36
    4042:	af ab       	std	Y+55, r26	; 0x37
    4044:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4046:	6d a9       	ldd	r22, Y+53	; 0x35
    4048:	7e a9       	ldd	r23, Y+54	; 0x36
    404a:	8f a9       	ldd	r24, Y+55	; 0x37
    404c:	98 ad       	ldd	r25, Y+56	; 0x38
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	4a e7       	ldi	r20, 0x7A	; 122
    4054:	55 e4       	ldi	r21, 0x45	; 69
    4056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	89 ab       	std	Y+49, r24	; 0x31
    4060:	9a ab       	std	Y+50, r25	; 0x32
    4062:	ab ab       	std	Y+51, r26	; 0x33
    4064:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4066:	69 a9       	ldd	r22, Y+49	; 0x31
    4068:	7a a9       	ldd	r23, Y+50	; 0x32
    406a:	8b a9       	ldd	r24, Y+51	; 0x33
    406c:	9c a9       	ldd	r25, Y+52	; 0x34
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e8       	ldi	r20, 0x80	; 128
    4074:	5f e3       	ldi	r21, 0x3F	; 63
    4076:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    407a:	88 23       	and	r24, r24
    407c:	2c f4       	brge	.+10     	; 0x4088 <LCD_sendCommand+0x50a>
		__ticks = 1;
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	98 ab       	std	Y+48, r25	; 0x30
    4084:	8f a7       	std	Y+47, r24	; 0x2f
    4086:	3f c0       	rjmp	.+126    	; 0x4106 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    4088:	69 a9       	ldd	r22, Y+49	; 0x31
    408a:	7a a9       	ldd	r23, Y+50	; 0x32
    408c:	8b a9       	ldd	r24, Y+51	; 0x33
    408e:	9c a9       	ldd	r25, Y+52	; 0x34
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	3f ef       	ldi	r19, 0xFF	; 255
    4094:	4f e7       	ldi	r20, 0x7F	; 127
    4096:	57 e4       	ldi	r21, 0x47	; 71
    4098:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    409c:	18 16       	cp	r1, r24
    409e:	4c f5       	brge	.+82     	; 0x40f2 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a0:	6d a9       	ldd	r22, Y+53	; 0x35
    40a2:	7e a9       	ldd	r23, Y+54	; 0x36
    40a4:	8f a9       	ldd	r24, Y+55	; 0x37
    40a6:	98 ad       	ldd	r25, Y+56	; 0x38
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e2       	ldi	r20, 0x20	; 32
    40ae:	51 e4       	ldi	r21, 0x41	; 65
    40b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	bc 01       	movw	r22, r24
    40ba:	cd 01       	movw	r24, r26
    40bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	98 ab       	std	Y+48, r25	; 0x30
    40c6:	8f a7       	std	Y+47, r24	; 0x2f
    40c8:	0f c0       	rjmp	.+30     	; 0x40e8 <LCD_sendCommand+0x56a>
    40ca:	80 e9       	ldi	r24, 0x90	; 144
    40cc:	91 e0       	ldi	r25, 0x01	; 1
    40ce:	9e a7       	std	Y+46, r25	; 0x2e
    40d0:	8d a7       	std	Y+45, r24	; 0x2d
    40d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    40d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	f1 f7       	brne	.-4      	; 0x40d6 <LCD_sendCommand+0x558>
    40da:	9e a7       	std	Y+46, r25	; 0x2e
    40dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40de:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e0:	98 a9       	ldd	r25, Y+48	; 0x30
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	98 ab       	std	Y+48, r25	; 0x30
    40e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40ea:	98 a9       	ldd	r25, Y+48	; 0x30
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	69 f7       	brne	.-38     	; 0x40ca <LCD_sendCommand+0x54c>
    40f0:	14 c0       	rjmp	.+40     	; 0x411a <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f2:	69 a9       	ldd	r22, Y+49	; 0x31
    40f4:	7a a9       	ldd	r23, Y+50	; 0x32
    40f6:	8b a9       	ldd	r24, Y+51	; 0x33
    40f8:	9c a9       	ldd	r25, Y+52	; 0x34
    40fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	98 ab       	std	Y+48, r25	; 0x30
    4104:	8f a7       	std	Y+47, r24	; 0x2f
    4106:	8f a5       	ldd	r24, Y+47	; 0x2f
    4108:	98 a9       	ldd	r25, Y+48	; 0x30
    410a:	9c a7       	std	Y+44, r25	; 0x2c
    410c:	8b a7       	std	Y+43, r24	; 0x2b
    410e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4110:	9c a5       	ldd	r25, Y+44	; 0x2c
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <LCD_sendCommand+0x594>
    4116:	9c a7       	std	Y+44, r25	; 0x2c
    4118:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	62 e0       	ldi	r22, 0x02	; 2
    411e:	41 e0       	ldi	r20, 0x01	; 1
    4120:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	a0 e8       	ldi	r26, 0x80	; 128
    412a:	bf e3       	ldi	r27, 0x3F	; 63
    412c:	8f a3       	std	Y+39, r24	; 0x27
    412e:	98 a7       	std	Y+40, r25	; 0x28
    4130:	a9 a7       	std	Y+41, r26	; 0x29
    4132:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4134:	6f a1       	ldd	r22, Y+39	; 0x27
    4136:	78 a5       	ldd	r23, Y+40	; 0x28
    4138:	89 a5       	ldd	r24, Y+41	; 0x29
    413a:	9a a5       	ldd	r25, Y+42	; 0x2a
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	4a e7       	ldi	r20, 0x7A	; 122
    4142:	55 e4       	ldi	r21, 0x45	; 69
    4144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	8b a3       	std	Y+35, r24	; 0x23
    414e:	9c a3       	std	Y+36, r25	; 0x24
    4150:	ad a3       	std	Y+37, r26	; 0x25
    4152:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4154:	6b a1       	ldd	r22, Y+35	; 0x23
    4156:	7c a1       	ldd	r23, Y+36	; 0x24
    4158:	8d a1       	ldd	r24, Y+37	; 0x25
    415a:	9e a1       	ldd	r25, Y+38	; 0x26
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e8       	ldi	r20, 0x80	; 128
    4162:	5f e3       	ldi	r21, 0x3F	; 63
    4164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4168:	88 23       	and	r24, r24
    416a:	2c f4       	brge	.+10     	; 0x4176 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	9a a3       	std	Y+34, r25	; 0x22
    4172:	89 a3       	std	Y+33, r24	; 0x21
    4174:	3f c0       	rjmp	.+126    	; 0x41f4 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    4176:	6b a1       	ldd	r22, Y+35	; 0x23
    4178:	7c a1       	ldd	r23, Y+36	; 0x24
    417a:	8d a1       	ldd	r24, Y+37	; 0x25
    417c:	9e a1       	ldd	r25, Y+38	; 0x26
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	3f ef       	ldi	r19, 0xFF	; 255
    4182:	4f e7       	ldi	r20, 0x7F	; 127
    4184:	57 e4       	ldi	r21, 0x47	; 71
    4186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    418a:	18 16       	cp	r1, r24
    418c:	4c f5       	brge	.+82     	; 0x41e0 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    418e:	6f a1       	ldd	r22, Y+39	; 0x27
    4190:	78 a5       	ldd	r23, Y+40	; 0x28
    4192:	89 a5       	ldd	r24, Y+41	; 0x29
    4194:	9a a5       	ldd	r25, Y+42	; 0x2a
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	40 e2       	ldi	r20, 0x20	; 32
    419c:	51 e4       	ldi	r21, 0x41	; 65
    419e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	bc 01       	movw	r22, r24
    41a8:	cd 01       	movw	r24, r26
    41aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	9a a3       	std	Y+34, r25	; 0x22
    41b4:	89 a3       	std	Y+33, r24	; 0x21
    41b6:	0f c0       	rjmp	.+30     	; 0x41d6 <LCD_sendCommand+0x658>
    41b8:	80 e9       	ldi	r24, 0x90	; 144
    41ba:	91 e0       	ldi	r25, 0x01	; 1
    41bc:	98 a3       	std	Y+32, r25	; 0x20
    41be:	8f 8f       	std	Y+31, r24	; 0x1f
    41c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41c2:	98 a1       	ldd	r25, Y+32	; 0x20
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	f1 f7       	brne	.-4      	; 0x41c4 <LCD_sendCommand+0x646>
    41c8:	98 a3       	std	Y+32, r25	; 0x20
    41ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41cc:	89 a1       	ldd	r24, Y+33	; 0x21
    41ce:	9a a1       	ldd	r25, Y+34	; 0x22
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	9a a3       	std	Y+34, r25	; 0x22
    41d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d6:	89 a1       	ldd	r24, Y+33	; 0x21
    41d8:	9a a1       	ldd	r25, Y+34	; 0x22
    41da:	00 97       	sbiw	r24, 0x00	; 0
    41dc:	69 f7       	brne	.-38     	; 0x41b8 <LCD_sendCommand+0x63a>
    41de:	14 c0       	rjmp	.+40     	; 0x4208 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e0:	6b a1       	ldd	r22, Y+35	; 0x23
    41e2:	7c a1       	ldd	r23, Y+36	; 0x24
    41e4:	8d a1       	ldd	r24, Y+37	; 0x25
    41e6:	9e a1       	ldd	r25, Y+38	; 0x26
    41e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	9a a3       	std	Y+34, r25	; 0x22
    41f2:	89 a3       	std	Y+33, r24	; 0x21
    41f4:	89 a1       	ldd	r24, Y+33	; 0x21
    41f6:	9a a1       	ldd	r25, Y+34	; 0x22
    41f8:	9e 8f       	std	Y+30, r25	; 0x1e
    41fa:	8d 8f       	std	Y+29, r24	; 0x1d
    41fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	f1 f7       	brne	.-4      	; 0x4200 <LCD_sendCommand+0x682>
    4204:	9e 8f       	std	Y+30, r25	; 0x1e
    4206:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the command */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    4208:	fe 01       	movw	r30, r28
    420a:	ed 59       	subi	r30, 0x9D	; 157
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	80 81       	ld	r24, Z
    4210:	98 2f       	mov	r25, r24
    4212:	91 70       	andi	r25, 0x01	; 1
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	63 e0       	ldi	r22, 0x03	; 3
    4218:	49 2f       	mov	r20, r25
    421a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    421e:	fe 01       	movw	r30, r28
    4220:	ed 59       	subi	r30, 0x9D	; 157
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	80 81       	ld	r24, Z
    4226:	88 2f       	mov	r24, r24
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	82 70       	andi	r24, 0x02	; 2
    422c:	90 70       	andi	r25, 0x00	; 0
    422e:	95 95       	asr	r25
    4230:	87 95       	ror	r24
    4232:	98 2f       	mov	r25, r24
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	64 e0       	ldi	r22, 0x04	; 4
    4238:	49 2f       	mov	r20, r25
    423a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    423e:	fe 01       	movw	r30, r28
    4240:	ed 59       	subi	r30, 0x9D	; 157
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	80 81       	ld	r24, Z
    4246:	88 2f       	mov	r24, r24
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	84 70       	andi	r24, 0x04	; 4
    424c:	90 70       	andi	r25, 0x00	; 0
    424e:	95 95       	asr	r25
    4250:	87 95       	ror	r24
    4252:	95 95       	asr	r25
    4254:	87 95       	ror	r24
    4256:	98 2f       	mov	r25, r24
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	65 e0       	ldi	r22, 0x05	; 5
    425c:	49 2f       	mov	r20, r25
    425e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    4262:	fe 01       	movw	r30, r28
    4264:	ed 59       	subi	r30, 0x9D	; 157
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	80 81       	ld	r24, Z
    426a:	88 2f       	mov	r24, r24
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	88 70       	andi	r24, 0x08	; 8
    4270:	90 70       	andi	r25, 0x00	; 0
    4272:	95 95       	asr	r25
    4274:	87 95       	ror	r24
    4276:	95 95       	asr	r25
    4278:	87 95       	ror	r24
    427a:	95 95       	asr	r25
    427c:	87 95       	ror	r24
    427e:	98 2f       	mov	r25, r24
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	66 e0       	ldi	r22, 0x06	; 6
    4284:	49 2f       	mov	r20, r25
    4286:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	a0 e8       	ldi	r26, 0x80	; 128
    4290:	bf e3       	ldi	r27, 0x3F	; 63
    4292:	89 8f       	std	Y+25, r24	; 0x19
    4294:	9a 8f       	std	Y+26, r25	; 0x1a
    4296:	ab 8f       	std	Y+27, r26	; 0x1b
    4298:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429a:	69 8d       	ldd	r22, Y+25	; 0x19
    429c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    429e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	4a e7       	ldi	r20, 0x7A	; 122
    42a8:	55 e4       	ldi	r21, 0x45	; 69
    42aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	8d 8b       	std	Y+21, r24	; 0x15
    42b4:	9e 8b       	std	Y+22, r25	; 0x16
    42b6:	af 8b       	std	Y+23, r26	; 0x17
    42b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42ba:	6d 89       	ldd	r22, Y+21	; 0x15
    42bc:	7e 89       	ldd	r23, Y+22	; 0x16
    42be:	8f 89       	ldd	r24, Y+23	; 0x17
    42c0:	98 8d       	ldd	r25, Y+24	; 0x18
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e8       	ldi	r20, 0x80	; 128
    42c8:	5f e3       	ldi	r21, 0x3F	; 63
    42ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ce:	88 23       	and	r24, r24
    42d0:	2c f4       	brge	.+10     	; 0x42dc <LCD_sendCommand+0x75e>
		__ticks = 1;
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	9c 8b       	std	Y+20, r25	; 0x14
    42d8:	8b 8b       	std	Y+19, r24	; 0x13
    42da:	3f c0       	rjmp	.+126    	; 0x435a <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    42dc:	6d 89       	ldd	r22, Y+21	; 0x15
    42de:	7e 89       	ldd	r23, Y+22	; 0x16
    42e0:	8f 89       	ldd	r24, Y+23	; 0x17
    42e2:	98 8d       	ldd	r25, Y+24	; 0x18
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	3f ef       	ldi	r19, 0xFF	; 255
    42e8:	4f e7       	ldi	r20, 0x7F	; 127
    42ea:	57 e4       	ldi	r21, 0x47	; 71
    42ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f0:	18 16       	cp	r1, r24
    42f2:	4c f5       	brge	.+82     	; 0x4346 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f4:	69 8d       	ldd	r22, Y+25	; 0x19
    42f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e2       	ldi	r20, 0x20	; 32
    4302:	51 e4       	ldi	r21, 0x41	; 65
    4304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	bc 01       	movw	r22, r24
    430e:	cd 01       	movw	r24, r26
    4310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	9c 8b       	std	Y+20, r25	; 0x14
    431a:	8b 8b       	std	Y+19, r24	; 0x13
    431c:	0f c0       	rjmp	.+30     	; 0x433c <LCD_sendCommand+0x7be>
    431e:	80 e9       	ldi	r24, 0x90	; 144
    4320:	91 e0       	ldi	r25, 0x01	; 1
    4322:	9a 8b       	std	Y+18, r25	; 0x12
    4324:	89 8b       	std	Y+17, r24	; 0x11
    4326:	89 89       	ldd	r24, Y+17	; 0x11
    4328:	9a 89       	ldd	r25, Y+18	; 0x12
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <LCD_sendCommand+0x7ac>
    432e:	9a 8b       	std	Y+18, r25	; 0x12
    4330:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4332:	8b 89       	ldd	r24, Y+19	; 0x13
    4334:	9c 89       	ldd	r25, Y+20	; 0x14
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	9c 8b       	std	Y+20, r25	; 0x14
    433a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433c:	8b 89       	ldd	r24, Y+19	; 0x13
    433e:	9c 89       	ldd	r25, Y+20	; 0x14
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	69 f7       	brne	.-38     	; 0x431e <LCD_sendCommand+0x7a0>
    4344:	14 c0       	rjmp	.+40     	; 0x436e <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4346:	6d 89       	ldd	r22, Y+21	; 0x15
    4348:	7e 89       	ldd	r23, Y+22	; 0x16
    434a:	8f 89       	ldd	r24, Y+23	; 0x17
    434c:	98 8d       	ldd	r25, Y+24	; 0x18
    434e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	9c 8b       	std	Y+20, r25	; 0x14
    4358:	8b 8b       	std	Y+19, r24	; 0x13
    435a:	8b 89       	ldd	r24, Y+19	; 0x13
    435c:	9c 89       	ldd	r25, Y+20	; 0x14
    435e:	98 8b       	std	Y+16, r25	; 0x10
    4360:	8f 87       	std	Y+15, r24	; 0x0f
    4362:	8f 85       	ldd	r24, Y+15	; 0x0f
    4364:	98 89       	ldd	r25, Y+16	; 0x10
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <LCD_sendCommand+0x7e8>
    436a:	98 8b       	std	Y+16, r25	; 0x10
    436c:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	62 e0       	ldi	r22, 0x02	; 2
    4372:	40 e0       	ldi	r20, 0x00	; 0
    4374:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	a0 e8       	ldi	r26, 0x80	; 128
    437e:	bf e3       	ldi	r27, 0x3F	; 63
    4380:	8b 87       	std	Y+11, r24	; 0x0b
    4382:	9c 87       	std	Y+12, r25	; 0x0c
    4384:	ad 87       	std	Y+13, r26	; 0x0d
    4386:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4388:	6b 85       	ldd	r22, Y+11	; 0x0b
    438a:	7c 85       	ldd	r23, Y+12	; 0x0c
    438c:	8d 85       	ldd	r24, Y+13	; 0x0d
    438e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	4a e7       	ldi	r20, 0x7A	; 122
    4396:	55 e4       	ldi	r21, 0x45	; 69
    4398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	8f 83       	std	Y+7, r24	; 0x07
    43a2:	98 87       	std	Y+8, r25	; 0x08
    43a4:	a9 87       	std	Y+9, r26	; 0x09
    43a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43a8:	6f 81       	ldd	r22, Y+7	; 0x07
    43aa:	78 85       	ldd	r23, Y+8	; 0x08
    43ac:	89 85       	ldd	r24, Y+9	; 0x09
    43ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	40 e8       	ldi	r20, 0x80	; 128
    43b6:	5f e3       	ldi	r21, 0x3F	; 63
    43b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43bc:	88 23       	and	r24, r24
    43be:	2c f4       	brge	.+10     	; 0x43ca <LCD_sendCommand+0x84c>
		__ticks = 1;
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	9e 83       	std	Y+6, r25	; 0x06
    43c6:	8d 83       	std	Y+5, r24	; 0x05
    43c8:	3f c0       	rjmp	.+126    	; 0x4448 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    43ca:	6f 81       	ldd	r22, Y+7	; 0x07
    43cc:	78 85       	ldd	r23, Y+8	; 0x08
    43ce:	89 85       	ldd	r24, Y+9	; 0x09
    43d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	3f ef       	ldi	r19, 0xFF	; 255
    43d6:	4f e7       	ldi	r20, 0x7F	; 127
    43d8:	57 e4       	ldi	r21, 0x47	; 71
    43da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43de:	18 16       	cp	r1, r24
    43e0:	4c f5       	brge	.+82     	; 0x4434 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	40 e2       	ldi	r20, 0x20	; 32
    43f0:	51 e4       	ldi	r21, 0x41	; 65
    43f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f6:	dc 01       	movw	r26, r24
    43f8:	cb 01       	movw	r24, r22
    43fa:	bc 01       	movw	r22, r24
    43fc:	cd 01       	movw	r24, r26
    43fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	9e 83       	std	Y+6, r25	; 0x06
    4408:	8d 83       	std	Y+5, r24	; 0x05
    440a:	0f c0       	rjmp	.+30     	; 0x442a <LCD_sendCommand+0x8ac>
    440c:	80 e9       	ldi	r24, 0x90	; 144
    440e:	91 e0       	ldi	r25, 0x01	; 1
    4410:	9c 83       	std	Y+4, r25	; 0x04
    4412:	8b 83       	std	Y+3, r24	; 0x03
    4414:	8b 81       	ldd	r24, Y+3	; 0x03
    4416:	9c 81       	ldd	r25, Y+4	; 0x04
    4418:	01 97       	sbiw	r24, 0x01	; 1
    441a:	f1 f7       	brne	.-4      	; 0x4418 <LCD_sendCommand+0x89a>
    441c:	9c 83       	std	Y+4, r25	; 0x04
    441e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4420:	8d 81       	ldd	r24, Y+5	; 0x05
    4422:	9e 81       	ldd	r25, Y+6	; 0x06
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	9e 83       	std	Y+6, r25	; 0x06
    4428:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    442a:	8d 81       	ldd	r24, Y+5	; 0x05
    442c:	9e 81       	ldd	r25, Y+6	; 0x06
    442e:	00 97       	sbiw	r24, 0x00	; 0
    4430:	69 f7       	brne	.-38     	; 0x440c <LCD_sendCommand+0x88e>
    4432:	14 c0       	rjmp	.+40     	; 0x445c <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4434:	6f 81       	ldd	r22, Y+7	; 0x07
    4436:	78 85       	ldd	r23, Y+8	; 0x08
    4438:	89 85       	ldd	r24, Y+9	; 0x09
    443a:	9a 85       	ldd	r25, Y+10	; 0x0a
    443c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	9e 83       	std	Y+6, r25	; 0x06
    4446:	8d 83       	std	Y+5, r24	; 0x05
    4448:	8d 81       	ldd	r24, Y+5	; 0x05
    444a:	9e 81       	ldd	r25, Y+6	; 0x06
    444c:	9a 83       	std	Y+2, r25	; 0x02
    444e:	89 83       	std	Y+1, r24	; 0x01
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	9a 81       	ldd	r25, Y+2	; 0x02
    4454:	01 97       	sbiw	r24, 0x01	; 1
    4456:	f1 f7       	brne	.-4      	; 0x4454 <LCD_sendCommand+0x8d6>
    4458:	9a 83       	std	Y+2, r25	; 0x02
    445a:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, command);  /* Output the command to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    445c:	cd 59       	subi	r28, 0x9D	; 157
    445e:	df 4f       	sbci	r29, 0xFF	; 255
    4460:	0f b6       	in	r0, 0x3f	; 63
    4462:	f8 94       	cli
    4464:	de bf       	out	0x3e, r29	; 62
    4466:	0f be       	out	0x3f, r0	; 63
    4468:	cd bf       	out	0x3d, r28	; 61
    446a:	cf 91       	pop	r28
    446c:	df 91       	pop	r29
    446e:	1f 91       	pop	r17
    4470:	0f 91       	pop	r16
    4472:	08 95       	ret

00004474 <LCD_displayCharacter>:
 * Display a character on the LCD.
 * Parameters  :
 * - data: The character to be displayed.
 */
void LCD_displayCharacter(uint8 data)
{
    4474:	0f 93       	push	r16
    4476:	1f 93       	push	r17
    4478:	df 93       	push	r29
    447a:	cf 93       	push	r28
    447c:	cd b7       	in	r28, 0x3d	; 61
    447e:	de b7       	in	r29, 0x3e	; 62
    4480:	c3 56       	subi	r28, 0x63	; 99
    4482:	d0 40       	sbci	r29, 0x00	; 0
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	fe 01       	movw	r30, r28
    4490:	ed 59       	subi	r30, 0x9D	; 157
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);  /* Data Mode (RS = 1) */
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	61 e0       	ldi	r22, 0x01	; 1
    449a:	41 e0       	ldi	r20, 0x01	; 1
    449c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    44a0:	fe 01       	movw	r30, r28
    44a2:	e1 5a       	subi	r30, 0xA1	; 161
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	a0 e8       	ldi	r26, 0x80	; 128
    44ac:	bf e3       	ldi	r27, 0x3F	; 63
    44ae:	80 83       	st	Z, r24
    44b0:	91 83       	std	Z+1, r25	; 0x01
    44b2:	a2 83       	std	Z+2, r26	; 0x02
    44b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b6:	8e 01       	movw	r16, r28
    44b8:	05 5a       	subi	r16, 0xA5	; 165
    44ba:	1f 4f       	sbci	r17, 0xFF	; 255
    44bc:	fe 01       	movw	r30, r28
    44be:	e1 5a       	subi	r30, 0xA1	; 161
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	60 81       	ld	r22, Z
    44c4:	71 81       	ldd	r23, Z+1	; 0x01
    44c6:	82 81       	ldd	r24, Z+2	; 0x02
    44c8:	93 81       	ldd	r25, Z+3	; 0x03
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	4a e7       	ldi	r20, 0x7A	; 122
    44d0:	55 e4       	ldi	r21, 0x45	; 69
    44d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d6:	dc 01       	movw	r26, r24
    44d8:	cb 01       	movw	r24, r22
    44da:	f8 01       	movw	r30, r16
    44dc:	80 83       	st	Z, r24
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	a2 83       	std	Z+2, r26	; 0x02
    44e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44e4:	fe 01       	movw	r30, r28
    44e6:	e5 5a       	subi	r30, 0xA5	; 165
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	60 81       	ld	r22, Z
    44ec:	71 81       	ldd	r23, Z+1	; 0x01
    44ee:	82 81       	ldd	r24, Z+2	; 0x02
    44f0:	93 81       	ldd	r25, Z+3	; 0x03
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e8       	ldi	r20, 0x80	; 128
    44f8:	5f e3       	ldi	r21, 0x3F	; 63
    44fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44fe:	88 23       	and	r24, r24
    4500:	44 f4       	brge	.+16     	; 0x4512 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    4502:	fe 01       	movw	r30, r28
    4504:	e7 5a       	subi	r30, 0xA7	; 167
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	91 83       	std	Z+1, r25	; 0x01
    450e:	80 83       	st	Z, r24
    4510:	64 c0       	rjmp	.+200    	; 0x45da <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    4512:	fe 01       	movw	r30, r28
    4514:	e5 5a       	subi	r30, 0xA5	; 165
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	60 81       	ld	r22, Z
    451a:	71 81       	ldd	r23, Z+1	; 0x01
    451c:	82 81       	ldd	r24, Z+2	; 0x02
    451e:	93 81       	ldd	r25, Z+3	; 0x03
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	3f ef       	ldi	r19, 0xFF	; 255
    4524:	4f e7       	ldi	r20, 0x7F	; 127
    4526:	57 e4       	ldi	r21, 0x47	; 71
    4528:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    452c:	18 16       	cp	r1, r24
    452e:	0c f0       	brlt	.+2      	; 0x4532 <LCD_displayCharacter+0xbe>
    4530:	43 c0       	rjmp	.+134    	; 0x45b8 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4532:	fe 01       	movw	r30, r28
    4534:	e1 5a       	subi	r30, 0xA1	; 161
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	60 81       	ld	r22, Z
    453a:	71 81       	ldd	r23, Z+1	; 0x01
    453c:	82 81       	ldd	r24, Z+2	; 0x02
    453e:	93 81       	ldd	r25, Z+3	; 0x03
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e2       	ldi	r20, 0x20	; 32
    4546:	51 e4       	ldi	r21, 0x41	; 65
    4548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	8e 01       	movw	r16, r28
    4552:	07 5a       	subi	r16, 0xA7	; 167
    4554:	1f 4f       	sbci	r17, 0xFF	; 255
    4556:	bc 01       	movw	r22, r24
    4558:	cd 01       	movw	r24, r26
    455a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	f8 01       	movw	r30, r16
    4564:	91 83       	std	Z+1, r25	; 0x01
    4566:	80 83       	st	Z, r24
    4568:	1f c0       	rjmp	.+62     	; 0x45a8 <LCD_displayCharacter+0x134>
    456a:	fe 01       	movw	r30, r28
    456c:	e9 5a       	subi	r30, 0xA9	; 169
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 e9       	ldi	r24, 0x90	; 144
    4572:	91 e0       	ldi	r25, 0x01	; 1
    4574:	91 83       	std	Z+1, r25	; 0x01
    4576:	80 83       	st	Z, r24
    4578:	fe 01       	movw	r30, r28
    457a:	e9 5a       	subi	r30, 0xA9	; 169
    457c:	ff 4f       	sbci	r31, 0xFF	; 255
    457e:	80 81       	ld	r24, Z
    4580:	91 81       	ldd	r25, Z+1	; 0x01
    4582:	01 97       	sbiw	r24, 0x01	; 1
    4584:	f1 f7       	brne	.-4      	; 0x4582 <LCD_displayCharacter+0x10e>
    4586:	fe 01       	movw	r30, r28
    4588:	e9 5a       	subi	r30, 0xA9	; 169
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	91 83       	std	Z+1, r25	; 0x01
    458e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4590:	de 01       	movw	r26, r28
    4592:	a7 5a       	subi	r26, 0xA7	; 167
    4594:	bf 4f       	sbci	r27, 0xFF	; 255
    4596:	fe 01       	movw	r30, r28
    4598:	e7 5a       	subi	r30, 0xA7	; 167
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	80 81       	ld	r24, Z
    459e:	91 81       	ldd	r25, Z+1	; 0x01
    45a0:	01 97       	sbiw	r24, 0x01	; 1
    45a2:	11 96       	adiw	r26, 0x01	; 1
    45a4:	9c 93       	st	X, r25
    45a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45a8:	fe 01       	movw	r30, r28
    45aa:	e7 5a       	subi	r30, 0xA7	; 167
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	80 81       	ld	r24, Z
    45b0:	91 81       	ldd	r25, Z+1	; 0x01
    45b2:	00 97       	sbiw	r24, 0x00	; 0
    45b4:	d1 f6       	brne	.-76     	; 0x456a <LCD_displayCharacter+0xf6>
    45b6:	27 c0       	rjmp	.+78     	; 0x4606 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b8:	8e 01       	movw	r16, r28
    45ba:	07 5a       	subi	r16, 0xA7	; 167
    45bc:	1f 4f       	sbci	r17, 0xFF	; 255
    45be:	fe 01       	movw	r30, r28
    45c0:	e5 5a       	subi	r30, 0xA5	; 165
    45c2:	ff 4f       	sbci	r31, 0xFF	; 255
    45c4:	60 81       	ld	r22, Z
    45c6:	71 81       	ldd	r23, Z+1	; 0x01
    45c8:	82 81       	ldd	r24, Z+2	; 0x02
    45ca:	93 81       	ldd	r25, Z+3	; 0x03
    45cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d0:	dc 01       	movw	r26, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	f8 01       	movw	r30, r16
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	80 83       	st	Z, r24
    45da:	de 01       	movw	r26, r28
    45dc:	ab 5a       	subi	r26, 0xAB	; 171
    45de:	bf 4f       	sbci	r27, 0xFF	; 255
    45e0:	fe 01       	movw	r30, r28
    45e2:	e7 5a       	subi	r30, 0xA7	; 167
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	80 81       	ld	r24, Z
    45e8:	91 81       	ldd	r25, Z+1	; 0x01
    45ea:	8d 93       	st	X+, r24
    45ec:	9c 93       	st	X, r25
    45ee:	fe 01       	movw	r30, r28
    45f0:	eb 5a       	subi	r30, 0xAB	; 171
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	80 81       	ld	r24, Z
    45f6:	91 81       	ldd	r25, Z+1	; 0x01
    45f8:	01 97       	sbiw	r24, 0x01	; 1
    45fa:	f1 f7       	brne	.-4      	; 0x45f8 <LCD_displayCharacter+0x184>
    45fc:	fe 01       	movw	r30, r28
    45fe:	eb 5a       	subi	r30, 0xAB	; 171
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	91 83       	std	Z+1, r25	; 0x01
    4604:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    4606:	80 e0       	ldi	r24, 0x00	; 0
    4608:	62 e0       	ldi	r22, 0x02	; 2
    460a:	41 e0       	ldi	r20, 0x01	; 1
    460c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4610:	fe 01       	movw	r30, r28
    4612:	ef 5a       	subi	r30, 0xAF	; 175
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	a0 e8       	ldi	r26, 0x80	; 128
    461c:	bf e3       	ldi	r27, 0x3F	; 63
    461e:	80 83       	st	Z, r24
    4620:	91 83       	std	Z+1, r25	; 0x01
    4622:	a2 83       	std	Z+2, r26	; 0x02
    4624:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4626:	8e 01       	movw	r16, r28
    4628:	03 5b       	subi	r16, 0xB3	; 179
    462a:	1f 4f       	sbci	r17, 0xFF	; 255
    462c:	fe 01       	movw	r30, r28
    462e:	ef 5a       	subi	r30, 0xAF	; 175
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	60 81       	ld	r22, Z
    4634:	71 81       	ldd	r23, Z+1	; 0x01
    4636:	82 81       	ldd	r24, Z+2	; 0x02
    4638:	93 81       	ldd	r25, Z+3	; 0x03
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	4a e7       	ldi	r20, 0x7A	; 122
    4640:	55 e4       	ldi	r21, 0x45	; 69
    4642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	f8 01       	movw	r30, r16
    464c:	80 83       	st	Z, r24
    464e:	91 83       	std	Z+1, r25	; 0x01
    4650:	a2 83       	std	Z+2, r26	; 0x02
    4652:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4654:	fe 01       	movw	r30, r28
    4656:	e3 5b       	subi	r30, 0xB3	; 179
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	60 81       	ld	r22, Z
    465c:	71 81       	ldd	r23, Z+1	; 0x01
    465e:	82 81       	ldd	r24, Z+2	; 0x02
    4660:	93 81       	ldd	r25, Z+3	; 0x03
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	40 e8       	ldi	r20, 0x80	; 128
    4668:	5f e3       	ldi	r21, 0x3F	; 63
    466a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    466e:	88 23       	and	r24, r24
    4670:	44 f4       	brge	.+16     	; 0x4682 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    4672:	fe 01       	movw	r30, r28
    4674:	e5 5b       	subi	r30, 0xB5	; 181
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	64 c0       	rjmp	.+200    	; 0x474a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    4682:	fe 01       	movw	r30, r28
    4684:	e3 5b       	subi	r30, 0xB3	; 179
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	60 81       	ld	r22, Z
    468a:	71 81       	ldd	r23, Z+1	; 0x01
    468c:	82 81       	ldd	r24, Z+2	; 0x02
    468e:	93 81       	ldd	r25, Z+3	; 0x03
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	3f ef       	ldi	r19, 0xFF	; 255
    4694:	4f e7       	ldi	r20, 0x7F	; 127
    4696:	57 e4       	ldi	r21, 0x47	; 71
    4698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    469c:	18 16       	cp	r1, r24
    469e:	0c f0       	brlt	.+2      	; 0x46a2 <LCD_displayCharacter+0x22e>
    46a0:	43 c0       	rjmp	.+134    	; 0x4728 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a2:	fe 01       	movw	r30, r28
    46a4:	ef 5a       	subi	r30, 0xAF	; 175
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	60 81       	ld	r22, Z
    46aa:	71 81       	ldd	r23, Z+1	; 0x01
    46ac:	82 81       	ldd	r24, Z+2	; 0x02
    46ae:	93 81       	ldd	r25, Z+3	; 0x03
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	40 e2       	ldi	r20, 0x20	; 32
    46b6:	51 e4       	ldi	r21, 0x41	; 65
    46b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46bc:	dc 01       	movw	r26, r24
    46be:	cb 01       	movw	r24, r22
    46c0:	8e 01       	movw	r16, r28
    46c2:	05 5b       	subi	r16, 0xB5	; 181
    46c4:	1f 4f       	sbci	r17, 0xFF	; 255
    46c6:	bc 01       	movw	r22, r24
    46c8:	cd 01       	movw	r24, r26
    46ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ce:	dc 01       	movw	r26, r24
    46d0:	cb 01       	movw	r24, r22
    46d2:	f8 01       	movw	r30, r16
    46d4:	91 83       	std	Z+1, r25	; 0x01
    46d6:	80 83       	st	Z, r24
    46d8:	1f c0       	rjmp	.+62     	; 0x4718 <LCD_displayCharacter+0x2a4>
    46da:	fe 01       	movw	r30, r28
    46dc:	e7 5b       	subi	r30, 0xB7	; 183
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	80 e9       	ldi	r24, 0x90	; 144
    46e2:	91 e0       	ldi	r25, 0x01	; 1
    46e4:	91 83       	std	Z+1, r25	; 0x01
    46e6:	80 83       	st	Z, r24
    46e8:	fe 01       	movw	r30, r28
    46ea:	e7 5b       	subi	r30, 0xB7	; 183
    46ec:	ff 4f       	sbci	r31, 0xFF	; 255
    46ee:	80 81       	ld	r24, Z
    46f0:	91 81       	ldd	r25, Z+1	; 0x01
    46f2:	01 97       	sbiw	r24, 0x01	; 1
    46f4:	f1 f7       	brne	.-4      	; 0x46f2 <LCD_displayCharacter+0x27e>
    46f6:	fe 01       	movw	r30, r28
    46f8:	e7 5b       	subi	r30, 0xB7	; 183
    46fa:	ff 4f       	sbci	r31, 0xFF	; 255
    46fc:	91 83       	std	Z+1, r25	; 0x01
    46fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4700:	de 01       	movw	r26, r28
    4702:	a5 5b       	subi	r26, 0xB5	; 181
    4704:	bf 4f       	sbci	r27, 0xFF	; 255
    4706:	fe 01       	movw	r30, r28
    4708:	e5 5b       	subi	r30, 0xB5	; 181
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	01 97       	sbiw	r24, 0x01	; 1
    4712:	11 96       	adiw	r26, 0x01	; 1
    4714:	9c 93       	st	X, r25
    4716:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4718:	fe 01       	movw	r30, r28
    471a:	e5 5b       	subi	r30, 0xB5	; 181
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	80 81       	ld	r24, Z
    4720:	91 81       	ldd	r25, Z+1	; 0x01
    4722:	00 97       	sbiw	r24, 0x00	; 0
    4724:	d1 f6       	brne	.-76     	; 0x46da <LCD_displayCharacter+0x266>
    4726:	27 c0       	rjmp	.+78     	; 0x4776 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4728:	8e 01       	movw	r16, r28
    472a:	05 5b       	subi	r16, 0xB5	; 181
    472c:	1f 4f       	sbci	r17, 0xFF	; 255
    472e:	fe 01       	movw	r30, r28
    4730:	e3 5b       	subi	r30, 0xB3	; 179
    4732:	ff 4f       	sbci	r31, 0xFF	; 255
    4734:	60 81       	ld	r22, Z
    4736:	71 81       	ldd	r23, Z+1	; 0x01
    4738:	82 81       	ldd	r24, Z+2	; 0x02
    473a:	93 81       	ldd	r25, Z+3	; 0x03
    473c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	f8 01       	movw	r30, r16
    4746:	91 83       	std	Z+1, r25	; 0x01
    4748:	80 83       	st	Z, r24
    474a:	de 01       	movw	r26, r28
    474c:	a9 5b       	subi	r26, 0xB9	; 185
    474e:	bf 4f       	sbci	r27, 0xFF	; 255
    4750:	fe 01       	movw	r30, r28
    4752:	e5 5b       	subi	r30, 0xB5	; 181
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	80 81       	ld	r24, Z
    4758:	91 81       	ldd	r25, Z+1	; 0x01
    475a:	8d 93       	st	X+, r24
    475c:	9c 93       	st	X, r25
    475e:	fe 01       	movw	r30, r28
    4760:	e9 5b       	subi	r30, 0xB9	; 185
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	80 81       	ld	r24, Z
    4766:	91 81       	ldd	r25, Z+1	; 0x01
    4768:	01 97       	sbiw	r24, 0x01	; 1
    476a:	f1 f7       	brne	.-4      	; 0x4768 <LCD_displayCharacter+0x2f4>
    476c:	fe 01       	movw	r30, r28
    476e:	e9 5b       	subi	r30, 0xB9	; 185
    4770:	ff 4f       	sbci	r31, 0xFF	; 255
    4772:	91 83       	std	Z+1, r25	; 0x01
    4774:	80 83       	st	Z, r24
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

#if (LCD_DATA_BITS_MODE == 4)
    /* Send the higher nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    4776:	fe 01       	movw	r30, r28
    4778:	ed 59       	subi	r30, 0x9D	; 157
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	80 81       	ld	r24, Z
    477e:	88 2f       	mov	r24, r24
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	80 71       	andi	r24, 0x10	; 16
    4784:	90 70       	andi	r25, 0x00	; 0
    4786:	95 95       	asr	r25
    4788:	87 95       	ror	r24
    478a:	95 95       	asr	r25
    478c:	87 95       	ror	r24
    478e:	95 95       	asr	r25
    4790:	87 95       	ror	r24
    4792:	95 95       	asr	r25
    4794:	87 95       	ror	r24
    4796:	98 2f       	mov	r25, r24
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	63 e0       	ldi	r22, 0x03	; 3
    479c:	49 2f       	mov	r20, r25
    479e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    47a2:	fe 01       	movw	r30, r28
    47a4:	ed 59       	subi	r30, 0x9D	; 157
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	80 81       	ld	r24, Z
    47aa:	88 2f       	mov	r24, r24
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	80 72       	andi	r24, 0x20	; 32
    47b0:	90 70       	andi	r25, 0x00	; 0
    47b2:	95 95       	asr	r25
    47b4:	87 95       	ror	r24
    47b6:	95 95       	asr	r25
    47b8:	87 95       	ror	r24
    47ba:	95 95       	asr	r25
    47bc:	87 95       	ror	r24
    47be:	95 95       	asr	r25
    47c0:	87 95       	ror	r24
    47c2:	95 95       	asr	r25
    47c4:	87 95       	ror	r24
    47c6:	98 2f       	mov	r25, r24
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	64 e0       	ldi	r22, 0x04	; 4
    47cc:	49 2f       	mov	r20, r25
    47ce:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    47d2:	fe 01       	movw	r30, r28
    47d4:	ed 59       	subi	r30, 0x9D	; 157
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	80 81       	ld	r24, Z
    47da:	88 2f       	mov	r24, r24
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	80 74       	andi	r24, 0x40	; 64
    47e0:	90 70       	andi	r25, 0x00	; 0
    47e2:	08 2e       	mov	r0, r24
    47e4:	89 2f       	mov	r24, r25
    47e6:	00 0c       	add	r0, r0
    47e8:	88 1f       	adc	r24, r24
    47ea:	99 0b       	sbc	r25, r25
    47ec:	00 0c       	add	r0, r0
    47ee:	88 1f       	adc	r24, r24
    47f0:	99 1f       	adc	r25, r25
    47f2:	98 2f       	mov	r25, r24
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	65 e0       	ldi	r22, 0x05	; 5
    47f8:	49 2f       	mov	r20, r25
    47fa:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    47fe:	fe 01       	movw	r30, r28
    4800:	ed 59       	subi	r30, 0x9D	; 157
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	80 81       	ld	r24, Z
    4806:	98 2f       	mov	r25, r24
    4808:	99 1f       	adc	r25, r25
    480a:	99 27       	eor	r25, r25
    480c:	99 1f       	adc	r25, r25
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	66 e0       	ldi	r22, 0x06	; 6
    4812:	49 2f       	mov	r20, r25
    4814:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4818:	fe 01       	movw	r30, r28
    481a:	ed 5b       	subi	r30, 0xBD	; 189
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	a0 e8       	ldi	r26, 0x80	; 128
    4824:	bf e3       	ldi	r27, 0x3F	; 63
    4826:	80 83       	st	Z, r24
    4828:	91 83       	std	Z+1, r25	; 0x01
    482a:	a2 83       	std	Z+2, r26	; 0x02
    482c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482e:	8e 01       	movw	r16, r28
    4830:	01 5c       	subi	r16, 0xC1	; 193
    4832:	1f 4f       	sbci	r17, 0xFF	; 255
    4834:	fe 01       	movw	r30, r28
    4836:	ed 5b       	subi	r30, 0xBD	; 189
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	60 81       	ld	r22, Z
    483c:	71 81       	ldd	r23, Z+1	; 0x01
    483e:	82 81       	ldd	r24, Z+2	; 0x02
    4840:	93 81       	ldd	r25, Z+3	; 0x03
    4842:	20 e0       	ldi	r18, 0x00	; 0
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	4a e7       	ldi	r20, 0x7A	; 122
    4848:	55 e4       	ldi	r21, 0x45	; 69
    484a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    484e:	dc 01       	movw	r26, r24
    4850:	cb 01       	movw	r24, r22
    4852:	f8 01       	movw	r30, r16
    4854:	80 83       	st	Z, r24
    4856:	91 83       	std	Z+1, r25	; 0x01
    4858:	a2 83       	std	Z+2, r26	; 0x02
    485a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    485c:	fe 01       	movw	r30, r28
    485e:	ff 96       	adiw	r30, 0x3f	; 63
    4860:	60 81       	ld	r22, Z
    4862:	71 81       	ldd	r23, Z+1	; 0x01
    4864:	82 81       	ldd	r24, Z+2	; 0x02
    4866:	93 81       	ldd	r25, Z+3	; 0x03
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	40 e8       	ldi	r20, 0x80	; 128
    486e:	5f e3       	ldi	r21, 0x3F	; 63
    4870:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4874:	88 23       	and	r24, r24
    4876:	2c f4       	brge	.+10     	; 0x4882 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	9e af       	std	Y+62, r25	; 0x3e
    487e:	8d af       	std	Y+61, r24	; 0x3d
    4880:	46 c0       	rjmp	.+140    	; 0x490e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    4882:	fe 01       	movw	r30, r28
    4884:	ff 96       	adiw	r30, 0x3f	; 63
    4886:	60 81       	ld	r22, Z
    4888:	71 81       	ldd	r23, Z+1	; 0x01
    488a:	82 81       	ldd	r24, Z+2	; 0x02
    488c:	93 81       	ldd	r25, Z+3	; 0x03
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	3f ef       	ldi	r19, 0xFF	; 255
    4892:	4f e7       	ldi	r20, 0x7F	; 127
    4894:	57 e4       	ldi	r21, 0x47	; 71
    4896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    489a:	18 16       	cp	r1, r24
    489c:	64 f5       	brge	.+88     	; 0x48f6 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    489e:	fe 01       	movw	r30, r28
    48a0:	ed 5b       	subi	r30, 0xBD	; 189
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	60 81       	ld	r22, Z
    48a6:	71 81       	ldd	r23, Z+1	; 0x01
    48a8:	82 81       	ldd	r24, Z+2	; 0x02
    48aa:	93 81       	ldd	r25, Z+3	; 0x03
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	40 e2       	ldi	r20, 0x20	; 32
    48b2:	51 e4       	ldi	r21, 0x41	; 65
    48b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	bc 01       	movw	r22, r24
    48be:	cd 01       	movw	r24, r26
    48c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	9e af       	std	Y+62, r25	; 0x3e
    48ca:	8d af       	std	Y+61, r24	; 0x3d
    48cc:	0f c0       	rjmp	.+30     	; 0x48ec <LCD_displayCharacter+0x478>
    48ce:	80 e9       	ldi	r24, 0x90	; 144
    48d0:	91 e0       	ldi	r25, 0x01	; 1
    48d2:	9c af       	std	Y+60, r25	; 0x3c
    48d4:	8b af       	std	Y+59, r24	; 0x3b
    48d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    48d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	f1 f7       	brne	.-4      	; 0x48da <LCD_displayCharacter+0x466>
    48de:	9c af       	std	Y+60, r25	; 0x3c
    48e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    48e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	9e af       	std	Y+62, r25	; 0x3e
    48ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    48ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    48f0:	00 97       	sbiw	r24, 0x00	; 0
    48f2:	69 f7       	brne	.-38     	; 0x48ce <LCD_displayCharacter+0x45a>
    48f4:	16 c0       	rjmp	.+44     	; 0x4922 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f6:	fe 01       	movw	r30, r28
    48f8:	ff 96       	adiw	r30, 0x3f	; 63
    48fa:	60 81       	ld	r22, Z
    48fc:	71 81       	ldd	r23, Z+1	; 0x01
    48fe:	82 81       	ldd	r24, Z+2	; 0x02
    4900:	93 81       	ldd	r25, Z+3	; 0x03
    4902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4906:	dc 01       	movw	r26, r24
    4908:	cb 01       	movw	r24, r22
    490a:	9e af       	std	Y+62, r25	; 0x3e
    490c:	8d af       	std	Y+61, r24	; 0x3d
    490e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4910:	9e ad       	ldd	r25, Y+62	; 0x3e
    4912:	9a af       	std	Y+58, r25	; 0x3a
    4914:	89 af       	std	Y+57, r24	; 0x39
    4916:	89 ad       	ldd	r24, Y+57	; 0x39
    4918:	9a ad       	ldd	r25, Y+58	; 0x3a
    491a:	01 97       	sbiw	r24, 0x01	; 1
    491c:	f1 f7       	brne	.-4      	; 0x491a <LCD_displayCharacter+0x4a6>
    491e:	9a af       	std	Y+58, r25	; 0x3a
    4920:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	62 e0       	ldi	r22, 0x02	; 2
    4926:	40 e0       	ldi	r20, 0x00	; 0
    4928:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	a0 e8       	ldi	r26, 0x80	; 128
    4932:	bf e3       	ldi	r27, 0x3F	; 63
    4934:	8d ab       	std	Y+53, r24	; 0x35
    4936:	9e ab       	std	Y+54, r25	; 0x36
    4938:	af ab       	std	Y+55, r26	; 0x37
    493a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    493c:	6d a9       	ldd	r22, Y+53	; 0x35
    493e:	7e a9       	ldd	r23, Y+54	; 0x36
    4940:	8f a9       	ldd	r24, Y+55	; 0x37
    4942:	98 ad       	ldd	r25, Y+56	; 0x38
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	4a e7       	ldi	r20, 0x7A	; 122
    494a:	55 e4       	ldi	r21, 0x45	; 69
    494c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	89 ab       	std	Y+49, r24	; 0x31
    4956:	9a ab       	std	Y+50, r25	; 0x32
    4958:	ab ab       	std	Y+51, r26	; 0x33
    495a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    495c:	69 a9       	ldd	r22, Y+49	; 0x31
    495e:	7a a9       	ldd	r23, Y+50	; 0x32
    4960:	8b a9       	ldd	r24, Y+51	; 0x33
    4962:	9c a9       	ldd	r25, Y+52	; 0x34
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	40 e8       	ldi	r20, 0x80	; 128
    496a:	5f e3       	ldi	r21, 0x3F	; 63
    496c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4970:	88 23       	and	r24, r24
    4972:	2c f4       	brge	.+10     	; 0x497e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	98 ab       	std	Y+48, r25	; 0x30
    497a:	8f a7       	std	Y+47, r24	; 0x2f
    497c:	3f c0       	rjmp	.+126    	; 0x49fc <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    497e:	69 a9       	ldd	r22, Y+49	; 0x31
    4980:	7a a9       	ldd	r23, Y+50	; 0x32
    4982:	8b a9       	ldd	r24, Y+51	; 0x33
    4984:	9c a9       	ldd	r25, Y+52	; 0x34
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	3f ef       	ldi	r19, 0xFF	; 255
    498a:	4f e7       	ldi	r20, 0x7F	; 127
    498c:	57 e4       	ldi	r21, 0x47	; 71
    498e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4992:	18 16       	cp	r1, r24
    4994:	4c f5       	brge	.+82     	; 0x49e8 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4996:	6d a9       	ldd	r22, Y+53	; 0x35
    4998:	7e a9       	ldd	r23, Y+54	; 0x36
    499a:	8f a9       	ldd	r24, Y+55	; 0x37
    499c:	98 ad       	ldd	r25, Y+56	; 0x38
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	40 e2       	ldi	r20, 0x20	; 32
    49a4:	51 e4       	ldi	r21, 0x41	; 65
    49a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	bc 01       	movw	r22, r24
    49b0:	cd 01       	movw	r24, r26
    49b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	98 ab       	std	Y+48, r25	; 0x30
    49bc:	8f a7       	std	Y+47, r24	; 0x2f
    49be:	0f c0       	rjmp	.+30     	; 0x49de <LCD_displayCharacter+0x56a>
    49c0:	80 e9       	ldi	r24, 0x90	; 144
    49c2:	91 e0       	ldi	r25, 0x01	; 1
    49c4:	9e a7       	std	Y+46, r25	; 0x2e
    49c6:	8d a7       	std	Y+45, r24	; 0x2d
    49c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    49ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    49cc:	01 97       	sbiw	r24, 0x01	; 1
    49ce:	f1 f7       	brne	.-4      	; 0x49cc <LCD_displayCharacter+0x558>
    49d0:	9e a7       	std	Y+46, r25	; 0x2e
    49d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    49d6:	98 a9       	ldd	r25, Y+48	; 0x30
    49d8:	01 97       	sbiw	r24, 0x01	; 1
    49da:	98 ab       	std	Y+48, r25	; 0x30
    49dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49de:	8f a5       	ldd	r24, Y+47	; 0x2f
    49e0:	98 a9       	ldd	r25, Y+48	; 0x30
    49e2:	00 97       	sbiw	r24, 0x00	; 0
    49e4:	69 f7       	brne	.-38     	; 0x49c0 <LCD_displayCharacter+0x54c>
    49e6:	14 c0       	rjmp	.+40     	; 0x4a10 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e8:	69 a9       	ldd	r22, Y+49	; 0x31
    49ea:	7a a9       	ldd	r23, Y+50	; 0x32
    49ec:	8b a9       	ldd	r24, Y+51	; 0x33
    49ee:	9c a9       	ldd	r25, Y+52	; 0x34
    49f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f4:	dc 01       	movw	r26, r24
    49f6:	cb 01       	movw	r24, r22
    49f8:	98 ab       	std	Y+48, r25	; 0x30
    49fa:	8f a7       	std	Y+47, r24	; 0x2f
    49fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    49fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4a00:	9c a7       	std	Y+44, r25	; 0x2c
    4a02:	8b a7       	std	Y+43, r24	; 0x2b
    4a04:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a06:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a08:	01 97       	sbiw	r24, 0x01	; 1
    4a0a:	f1 f7       	brne	.-4      	; 0x4a08 <LCD_displayCharacter+0x594>
    4a0c:	9c a7       	std	Y+44, r25	; 0x2c
    4a0e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Enable LCD (E = 1) */
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	62 e0       	ldi	r22, 0x02	; 2
    4a14:	41 e0       	ldi	r20, 0x01	; 1
    4a16:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4a1a:	80 e0       	ldi	r24, 0x00	; 0
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	a0 e8       	ldi	r26, 0x80	; 128
    4a20:	bf e3       	ldi	r27, 0x3F	; 63
    4a22:	8f a3       	std	Y+39, r24	; 0x27
    4a24:	98 a7       	std	Y+40, r25	; 0x28
    4a26:	a9 a7       	std	Y+41, r26	; 0x29
    4a28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a2a:	6f a1       	ldd	r22, Y+39	; 0x27
    4a2c:	78 a5       	ldd	r23, Y+40	; 0x28
    4a2e:	89 a5       	ldd	r24, Y+41	; 0x29
    4a30:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a32:	20 e0       	ldi	r18, 0x00	; 0
    4a34:	30 e0       	ldi	r19, 0x00	; 0
    4a36:	4a e7       	ldi	r20, 0x7A	; 122
    4a38:	55 e4       	ldi	r21, 0x45	; 69
    4a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	8b a3       	std	Y+35, r24	; 0x23
    4a44:	9c a3       	std	Y+36, r25	; 0x24
    4a46:	ad a3       	std	Y+37, r26	; 0x25
    4a48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    4a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    4a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    4a50:	9e a1       	ldd	r25, Y+38	; 0x26
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	40 e8       	ldi	r20, 0x80	; 128
    4a58:	5f e3       	ldi	r21, 0x3F	; 63
    4a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a5e:	88 23       	and	r24, r24
    4a60:	2c f4       	brge	.+10     	; 0x4a6c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	9a a3       	std	Y+34, r25	; 0x22
    4a68:	89 a3       	std	Y+33, r24	; 0x21
    4a6a:	3f c0       	rjmp	.+126    	; 0x4aea <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    4a6c:	6b a1       	ldd	r22, Y+35	; 0x23
    4a6e:	7c a1       	ldd	r23, Y+36	; 0x24
    4a70:	8d a1       	ldd	r24, Y+37	; 0x25
    4a72:	9e a1       	ldd	r25, Y+38	; 0x26
    4a74:	20 e0       	ldi	r18, 0x00	; 0
    4a76:	3f ef       	ldi	r19, 0xFF	; 255
    4a78:	4f e7       	ldi	r20, 0x7F	; 127
    4a7a:	57 e4       	ldi	r21, 0x47	; 71
    4a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a80:	18 16       	cp	r1, r24
    4a82:	4c f5       	brge	.+82     	; 0x4ad6 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a84:	6f a1       	ldd	r22, Y+39	; 0x27
    4a86:	78 a5       	ldd	r23, Y+40	; 0x28
    4a88:	89 a5       	ldd	r24, Y+41	; 0x29
    4a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a8c:	20 e0       	ldi	r18, 0x00	; 0
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	40 e2       	ldi	r20, 0x20	; 32
    4a92:	51 e4       	ldi	r21, 0x41	; 65
    4a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a98:	dc 01       	movw	r26, r24
    4a9a:	cb 01       	movw	r24, r22
    4a9c:	bc 01       	movw	r22, r24
    4a9e:	cd 01       	movw	r24, r26
    4aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	9a a3       	std	Y+34, r25	; 0x22
    4aaa:	89 a3       	std	Y+33, r24	; 0x21
    4aac:	0f c0       	rjmp	.+30     	; 0x4acc <LCD_displayCharacter+0x658>
    4aae:	80 e9       	ldi	r24, 0x90	; 144
    4ab0:	91 e0       	ldi	r25, 0x01	; 1
    4ab2:	98 a3       	std	Y+32, r25	; 0x20
    4ab4:	8f 8f       	std	Y+31, r24	; 0x1f
    4ab6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ab8:	98 a1       	ldd	r25, Y+32	; 0x20
    4aba:	01 97       	sbiw	r24, 0x01	; 1
    4abc:	f1 f7       	brne	.-4      	; 0x4aba <LCD_displayCharacter+0x646>
    4abe:	98 a3       	std	Y+32, r25	; 0x20
    4ac0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    4ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    4ac6:	01 97       	sbiw	r24, 0x01	; 1
    4ac8:	9a a3       	std	Y+34, r25	; 0x22
    4aca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4acc:	89 a1       	ldd	r24, Y+33	; 0x21
    4ace:	9a a1       	ldd	r25, Y+34	; 0x22
    4ad0:	00 97       	sbiw	r24, 0x00	; 0
    4ad2:	69 f7       	brne	.-38     	; 0x4aae <LCD_displayCharacter+0x63a>
    4ad4:	14 c0       	rjmp	.+40     	; 0x4afe <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    4ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    4ada:	8d a1       	ldd	r24, Y+37	; 0x25
    4adc:	9e a1       	ldd	r25, Y+38	; 0x26
    4ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	9a a3       	std	Y+34, r25	; 0x22
    4ae8:	89 a3       	std	Y+33, r24	; 0x21
    4aea:	89 a1       	ldd	r24, Y+33	; 0x21
    4aec:	9a a1       	ldd	r25, Y+34	; 0x22
    4aee:	9e 8f       	std	Y+30, r25	; 0x1e
    4af0:	8d 8f       	std	Y+29, r24	; 0x1d
    4af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4af6:	01 97       	sbiw	r24, 0x01	; 1
    4af8:	f1 f7       	brne	.-4      	; 0x4af6 <LCD_displayCharacter+0x682>
    4afa:	9e 8f       	std	Y+30, r25	; 0x1e
    4afc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);  /* Delay for processing (Tpw - Tdws = 190ns) */

    /* Send the lower nibble of the data */
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    4afe:	fe 01       	movw	r30, r28
    4b00:	ed 59       	subi	r30, 0x9D	; 157
    4b02:	ff 4f       	sbci	r31, 0xFF	; 255
    4b04:	80 81       	ld	r24, Z
    4b06:	98 2f       	mov	r25, r24
    4b08:	91 70       	andi	r25, 0x01	; 1
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	63 e0       	ldi	r22, 0x03	; 3
    4b0e:	49 2f       	mov	r20, r25
    4b10:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    4b14:	fe 01       	movw	r30, r28
    4b16:	ed 59       	subi	r30, 0x9D	; 157
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	80 81       	ld	r24, Z
    4b1c:	88 2f       	mov	r24, r24
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	82 70       	andi	r24, 0x02	; 2
    4b22:	90 70       	andi	r25, 0x00	; 0
    4b24:	95 95       	asr	r25
    4b26:	87 95       	ror	r24
    4b28:	98 2f       	mov	r25, r24
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
    4b2c:	64 e0       	ldi	r22, 0x04	; 4
    4b2e:	49 2f       	mov	r20, r25
    4b30:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    4b34:	fe 01       	movw	r30, r28
    4b36:	ed 59       	subi	r30, 0x9D	; 157
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	80 81       	ld	r24, Z
    4b3c:	88 2f       	mov	r24, r24
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	84 70       	andi	r24, 0x04	; 4
    4b42:	90 70       	andi	r25, 0x00	; 0
    4b44:	95 95       	asr	r25
    4b46:	87 95       	ror	r24
    4b48:	95 95       	asr	r25
    4b4a:	87 95       	ror	r24
    4b4c:	98 2f       	mov	r25, r24
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
    4b50:	65 e0       	ldi	r22, 0x05	; 5
    4b52:	49 2f       	mov	r20, r25
    4b54:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    4b58:	fe 01       	movw	r30, r28
    4b5a:	ed 59       	subi	r30, 0x9D	; 157
    4b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5e:	80 81       	ld	r24, Z
    4b60:	88 2f       	mov	r24, r24
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	88 70       	andi	r24, 0x08	; 8
    4b66:	90 70       	andi	r25, 0x00	; 0
    4b68:	95 95       	asr	r25
    4b6a:	87 95       	ror	r24
    4b6c:	95 95       	asr	r25
    4b6e:	87 95       	ror	r24
    4b70:	95 95       	asr	r25
    4b72:	87 95       	ror	r24
    4b74:	98 2f       	mov	r25, r24
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	66 e0       	ldi	r22, 0x06	; 6
    4b7a:	49 2f       	mov	r20, r25
    4b7c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	a0 e8       	ldi	r26, 0x80	; 128
    4b86:	bf e3       	ldi	r27, 0x3F	; 63
    4b88:	89 8f       	std	Y+25, r24	; 0x19
    4b8a:	9a 8f       	std	Y+26, r25	; 0x1a
    4b8c:	ab 8f       	std	Y+27, r26	; 0x1b
    4b8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b90:	69 8d       	ldd	r22, Y+25	; 0x19
    4b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	4a e7       	ldi	r20, 0x7A	; 122
    4b9e:	55 e4       	ldi	r21, 0x45	; 69
    4ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	8d 8b       	std	Y+21, r24	; 0x15
    4baa:	9e 8b       	std	Y+22, r25	; 0x16
    4bac:	af 8b       	std	Y+23, r26	; 0x17
    4bae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    4bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    4bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	40 e8       	ldi	r20, 0x80	; 128
    4bbe:	5f e3       	ldi	r21, 0x3F	; 63
    4bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc4:	88 23       	and	r24, r24
    4bc6:	2c f4       	brge	.+10     	; 0x4bd2 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	9c 8b       	std	Y+20, r25	; 0x14
    4bce:	8b 8b       	std	Y+19, r24	; 0x13
    4bd0:	3f c0       	rjmp	.+126    	; 0x4c50 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    4bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    4bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    4bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	3f ef       	ldi	r19, 0xFF	; 255
    4bde:	4f e7       	ldi	r20, 0x7F	; 127
    4be0:	57 e4       	ldi	r21, 0x47	; 71
    4be2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be6:	18 16       	cp	r1, r24
    4be8:	4c f5       	brge	.+82     	; 0x4c3c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bea:	69 8d       	ldd	r22, Y+25	; 0x19
    4bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	40 e2       	ldi	r20, 0x20	; 32
    4bf8:	51 e4       	ldi	r21, 0x41	; 65
    4bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	bc 01       	movw	r22, r24
    4c04:	cd 01       	movw	r24, r26
    4c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	9c 8b       	std	Y+20, r25	; 0x14
    4c10:	8b 8b       	std	Y+19, r24	; 0x13
    4c12:	0f c0       	rjmp	.+30     	; 0x4c32 <LCD_displayCharacter+0x7be>
    4c14:	80 e9       	ldi	r24, 0x90	; 144
    4c16:	91 e0       	ldi	r25, 0x01	; 1
    4c18:	9a 8b       	std	Y+18, r25	; 0x12
    4c1a:	89 8b       	std	Y+17, r24	; 0x11
    4c1c:	89 89       	ldd	r24, Y+17	; 0x11
    4c1e:	9a 89       	ldd	r25, Y+18	; 0x12
    4c20:	01 97       	sbiw	r24, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <LCD_displayCharacter+0x7ac>
    4c24:	9a 8b       	std	Y+18, r25	; 0x12
    4c26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c28:	8b 89       	ldd	r24, Y+19	; 0x13
    4c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	9c 8b       	std	Y+20, r25	; 0x14
    4c30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c32:	8b 89       	ldd	r24, Y+19	; 0x13
    4c34:	9c 89       	ldd	r25, Y+20	; 0x14
    4c36:	00 97       	sbiw	r24, 0x00	; 0
    4c38:	69 f7       	brne	.-38     	; 0x4c14 <LCD_displayCharacter+0x7a0>
    4c3a:	14 c0       	rjmp	.+40     	; 0x4c64 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c40:	8f 89       	ldd	r24, Y+23	; 0x17
    4c42:	98 8d       	ldd	r25, Y+24	; 0x18
    4c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	9c 8b       	std	Y+20, r25	; 0x14
    4c4e:	8b 8b       	std	Y+19, r24	; 0x13
    4c50:	8b 89       	ldd	r24, Y+19	; 0x13
    4c52:	9c 89       	ldd	r25, Y+20	; 0x14
    4c54:	98 8b       	std	Y+16, r25	; 0x10
    4c56:	8f 87       	std	Y+15, r24	; 0x0f
    4c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c5a:	98 89       	ldd	r25, Y+16	; 0x10
    4c5c:	01 97       	sbiw	r24, 0x01	; 1
    4c5e:	f1 f7       	brne	.-4      	; 0x4c5c <LCD_displayCharacter+0x7e8>
    4c60:	98 8b       	std	Y+16, r25	; 0x10
    4c62:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    4c64:	80 e0       	ldi	r24, 0x00	; 0
    4c66:	62 e0       	ldi	r22, 0x02	; 2
    4c68:	40 e0       	ldi	r20, 0x00	; 0
    4c6a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	a0 e8       	ldi	r26, 0x80	; 128
    4c74:	bf e3       	ldi	r27, 0x3F	; 63
    4c76:	8b 87       	std	Y+11, r24	; 0x0b
    4c78:	9c 87       	std	Y+12, r25	; 0x0c
    4c7a:	ad 87       	std	Y+13, r26	; 0x0d
    4c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	4a e7       	ldi	r20, 0x7A	; 122
    4c8c:	55 e4       	ldi	r21, 0x45	; 69
    4c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c92:	dc 01       	movw	r26, r24
    4c94:	cb 01       	movw	r24, r22
    4c96:	8f 83       	std	Y+7, r24	; 0x07
    4c98:	98 87       	std	Y+8, r25	; 0x08
    4c9a:	a9 87       	std	Y+9, r26	; 0x09
    4c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4ca0:	78 85       	ldd	r23, Y+8	; 0x08
    4ca2:	89 85       	ldd	r24, Y+9	; 0x09
    4ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e8       	ldi	r20, 0x80	; 128
    4cac:	5f e3       	ldi	r21, 0x3F	; 63
    4cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cb2:	88 23       	and	r24, r24
    4cb4:	2c f4       	brge	.+10     	; 0x4cc0 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	9e 83       	std	Y+6, r25	; 0x06
    4cbc:	8d 83       	std	Y+5, r24	; 0x05
    4cbe:	3f c0       	rjmp	.+126    	; 0x4d3e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    4cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    4cc2:	78 85       	ldd	r23, Y+8	; 0x08
    4cc4:	89 85       	ldd	r24, Y+9	; 0x09
    4cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	3f ef       	ldi	r19, 0xFF	; 255
    4ccc:	4f e7       	ldi	r20, 0x7F	; 127
    4cce:	57 e4       	ldi	r21, 0x47	; 71
    4cd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cd4:	18 16       	cp	r1, r24
    4cd6:	4c f5       	brge	.+82     	; 0x4d2a <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e2       	ldi	r20, 0x20	; 32
    4ce6:	51 e4       	ldi	r21, 0x41	; 65
    4ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	9e 83       	std	Y+6, r25	; 0x06
    4cfe:	8d 83       	std	Y+5, r24	; 0x05
    4d00:	0f c0       	rjmp	.+30     	; 0x4d20 <LCD_displayCharacter+0x8ac>
    4d02:	80 e9       	ldi	r24, 0x90	; 144
    4d04:	91 e0       	ldi	r25, 0x01	; 1
    4d06:	9c 83       	std	Y+4, r25	; 0x04
    4d08:	8b 83       	std	Y+3, r24	; 0x03
    4d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <LCD_displayCharacter+0x89a>
    4d12:	9c 83       	std	Y+4, r25	; 0x04
    4d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d16:	8d 81       	ldd	r24, Y+5	; 0x05
    4d18:	9e 81       	ldd	r25, Y+6	; 0x06
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	9e 83       	std	Y+6, r25	; 0x06
    4d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d20:	8d 81       	ldd	r24, Y+5	; 0x05
    4d22:	9e 81       	ldd	r25, Y+6	; 0x06
    4d24:	00 97       	sbiw	r24, 0x00	; 0
    4d26:	69 f7       	brne	.-38     	; 0x4d02 <LCD_displayCharacter+0x88e>
    4d28:	14 c0       	rjmp	.+40     	; 0x4d52 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d2c:	78 85       	ldd	r23, Y+8	; 0x08
    4d2e:	89 85       	ldd	r24, Y+9	; 0x09
    4d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	9e 83       	std	Y+6, r25	; 0x06
    4d3c:	8d 83       	std	Y+5, r24	; 0x05
    4d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d40:	9e 81       	ldd	r25, Y+6	; 0x06
    4d42:	9a 83       	std	Y+2, r25	; 0x02
    4d44:	89 83       	std	Y+1, r24	; 0x01
    4d46:	89 81       	ldd	r24, Y+1	; 0x01
    4d48:	9a 81       	ldd	r25, Y+2	; 0x02
    4d4a:	01 97       	sbiw	r24, 0x01	; 1
    4d4c:	f1 f7       	brne	.-4      	; 0x4d4a <LCD_displayCharacter+0x8d6>
    4d4e:	9a 83       	std	Y+2, r25	; 0x02
    4d50:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePort(LCD_DATA_PORT_ID, data);  /* Output the data to the data bus (D0-D7) */
    _delay_ms(1);  /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);  /* Disable LCD (E = 0) */
    _delay_ms(1);  /* Delay for processing (Th = 13ns) */
#endif
}
    4d52:	cd 59       	subi	r28, 0x9D	; 157
    4d54:	df 4f       	sbci	r29, 0xFF	; 255
    4d56:	0f b6       	in	r0, 0x3f	; 63
    4d58:	f8 94       	cli
    4d5a:	de bf       	out	0x3e, r29	; 62
    4d5c:	0f be       	out	0x3f, r0	; 63
    4d5e:	cd bf       	out	0x3d, r28	; 61
    4d60:	cf 91       	pop	r28
    4d62:	df 91       	pop	r29
    4d64:	1f 91       	pop	r17
    4d66:	0f 91       	pop	r16
    4d68:	08 95       	ret

00004d6a <LCD_displayString>:
 * Display a string on the LCD.
 * Parameters  :
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    4d6a:	df 93       	push	r29
    4d6c:	cf 93       	push	r28
    4d6e:	00 d0       	rcall	.+0      	; 0x4d70 <LCD_displayString+0x6>
    4d70:	0f 92       	push	r0
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
    4d76:	9b 83       	std	Y+3, r25	; 0x03
    4d78:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    4d7a:	19 82       	std	Y+1, r1	; 0x01
    4d7c:	0e c0       	rjmp	.+28     	; 0x4d9a <LCD_displayString+0x30>
    while (Str[i] != '\0')
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
    4d7e:	89 81       	ldd	r24, Y+1	; 0x01
    4d80:	28 2f       	mov	r18, r24
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	8a 81       	ldd	r24, Y+2	; 0x02
    4d86:	9b 81       	ldd	r25, Y+3	; 0x03
    4d88:	fc 01       	movw	r30, r24
    4d8a:	e2 0f       	add	r30, r18
    4d8c:	f3 1f       	adc	r31, r19
    4d8e:	80 81       	ld	r24, Z
    4d90:	0e 94 3a 22 	call	0x4474	; 0x4474 <LCD_displayCharacter>
        i++;
    4d94:	89 81       	ldd	r24, Y+1	; 0x01
    4d96:	8f 5f       	subi	r24, 0xFF	; 255
    4d98:	89 83       	std	Y+1, r24	; 0x01
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    uint8 i = 0;
    while (Str[i] != '\0')
    4d9a:	89 81       	ldd	r24, Y+1	; 0x01
    4d9c:	28 2f       	mov	r18, r24
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	8a 81       	ldd	r24, Y+2	; 0x02
    4da2:	9b 81       	ldd	r25, Y+3	; 0x03
    4da4:	fc 01       	movw	r30, r24
    4da6:	e2 0f       	add	r30, r18
    4da8:	f3 1f       	adc	r31, r19
    4daa:	80 81       	ld	r24, Z
    4dac:	88 23       	and	r24, r24
    4dae:	39 f7       	brne	.-50     	; 0x4d7e <LCD_displayString+0x14>
    {
        LCD_displayCharacter(Str[i]);  /* Display each character */
        i++;
    }
}
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	cf 91       	pop	r28
    4db8:	df 91       	pop	r29
    4dba:	08 95       	ret

00004dbc <LCD_moveCursor>:
 * Parameters  :
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    4dbc:	df 93       	push	r29
    4dbe:	cf 93       	push	r28
    4dc0:	00 d0       	rcall	.+0      	; 0x4dc2 <LCD_moveCursor+0x6>
    4dc2:	00 d0       	rcall	.+0      	; 0x4dc4 <LCD_moveCursor+0x8>
    4dc4:	0f 92       	push	r0
    4dc6:	cd b7       	in	r28, 0x3d	; 61
    4dc8:	de b7       	in	r29, 0x3e	; 62
    4dca:	8a 83       	std	Y+2, r24	; 0x02
    4dcc:	6b 83       	std	Y+3, r22	; 0x03
    uint8 lcd_memory_address;

    /* Calculate the required address in the LCD DDRAM */
    switch (row)
    4dce:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd0:	28 2f       	mov	r18, r24
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	3d 83       	std	Y+5, r19	; 0x05
    4dd6:	2c 83       	std	Y+4, r18	; 0x04
    4dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    4dda:	9d 81       	ldd	r25, Y+5	; 0x05
    4ddc:	81 30       	cpi	r24, 0x01	; 1
    4dde:	91 05       	cpc	r25, r1
    4de0:	c1 f0       	breq	.+48     	; 0x4e12 <LCD_moveCursor+0x56>
    4de2:	2c 81       	ldd	r18, Y+4	; 0x04
    4de4:	3d 81       	ldd	r19, Y+5	; 0x05
    4de6:	22 30       	cpi	r18, 0x02	; 2
    4de8:	31 05       	cpc	r19, r1
    4dea:	2c f4       	brge	.+10     	; 0x4df6 <LCD_moveCursor+0x3a>
    4dec:	8c 81       	ldd	r24, Y+4	; 0x04
    4dee:	9d 81       	ldd	r25, Y+5	; 0x05
    4df0:	00 97       	sbiw	r24, 0x00	; 0
    4df2:	61 f0       	breq	.+24     	; 0x4e0c <LCD_moveCursor+0x50>
    4df4:	19 c0       	rjmp	.+50     	; 0x4e28 <LCD_moveCursor+0x6c>
    4df6:	2c 81       	ldd	r18, Y+4	; 0x04
    4df8:	3d 81       	ldd	r19, Y+5	; 0x05
    4dfa:	22 30       	cpi	r18, 0x02	; 2
    4dfc:	31 05       	cpc	r19, r1
    4dfe:	69 f0       	breq	.+26     	; 0x4e1a <LCD_moveCursor+0x5e>
    4e00:	8c 81       	ldd	r24, Y+4	; 0x04
    4e02:	9d 81       	ldd	r25, Y+5	; 0x05
    4e04:	83 30       	cpi	r24, 0x03	; 3
    4e06:	91 05       	cpc	r25, r1
    4e08:	61 f0       	breq	.+24     	; 0x4e22 <LCD_moveCursor+0x66>
    4e0a:	0e c0       	rjmp	.+28     	; 0x4e28 <LCD_moveCursor+0x6c>
    {
    case 0:
        lcd_memory_address = col;
    4e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0e:	89 83       	std	Y+1, r24	; 0x01
    4e10:	0b c0       	rjmp	.+22     	; 0x4e28 <LCD_moveCursor+0x6c>
        break;
    case 1:
        lcd_memory_address = col + 0x40;
    4e12:	8b 81       	ldd	r24, Y+3	; 0x03
    4e14:	80 5c       	subi	r24, 0xC0	; 192
    4e16:	89 83       	std	Y+1, r24	; 0x01
    4e18:	07 c0       	rjmp	.+14     	; 0x4e28 <LCD_moveCursor+0x6c>
        break;
    case 2:
        lcd_memory_address = col + 0x10;
    4e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1c:	80 5f       	subi	r24, 0xF0	; 240
    4e1e:	89 83       	std	Y+1, r24	; 0x01
    4e20:	03 c0       	rjmp	.+6      	; 0x4e28 <LCD_moveCursor+0x6c>
        break;
    case 3:
        lcd_memory_address = col + 0x50;
    4e22:	8b 81       	ldd	r24, Y+3	; 0x03
    4e24:	80 5b       	subi	r24, 0xB0	; 176
    4e26:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    /* Move the LCD cursor to this specific address */
    LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	80 68       	ori	r24, 0x80	; 128
    4e2c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_sendCommand>
}
    4e30:	0f 90       	pop	r0
    4e32:	0f 90       	pop	r0
    4e34:	0f 90       	pop	r0
    4e36:	0f 90       	pop	r0
    4e38:	0f 90       	pop	r0
    4e3a:	cf 91       	pop	r28
    4e3c:	df 91       	pop	r29
    4e3e:	08 95       	ret

00004e40 <LCD_displayStringRowColumn>:
 * - row: The row number (0 or 1).
 * - col: The column number (0 to 15).
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    4e40:	df 93       	push	r29
    4e42:	cf 93       	push	r28
    4e44:	00 d0       	rcall	.+0      	; 0x4e46 <LCD_displayStringRowColumn+0x6>
    4e46:	00 d0       	rcall	.+0      	; 0x4e48 <LCD_displayStringRowColumn+0x8>
    4e48:	cd b7       	in	r28, 0x3d	; 61
    4e4a:	de b7       	in	r29, 0x3e	; 62
    4e4c:	89 83       	std	Y+1, r24	; 0x01
    4e4e:	6a 83       	std	Y+2, r22	; 0x02
    4e50:	5c 83       	std	Y+4, r21	; 0x04
    4e52:	4b 83       	std	Y+3, r20	; 0x03
    LCD_moveCursor(row, col);  /* Move the cursor to the specified position */
    4e54:	89 81       	ldd	r24, Y+1	; 0x01
    4e56:	6a 81       	ldd	r22, Y+2	; 0x02
    4e58:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <LCD_moveCursor>
    LCD_displayString(Str);  /* Display the string */
    4e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e60:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <LCD_displayString>
}
    4e64:	0f 90       	pop	r0
    4e66:	0f 90       	pop	r0
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	cf 91       	pop	r28
    4e6e:	df 91       	pop	r29
    4e70:	08 95       	ret

00004e72 <LCD_intgerToString>:
 * Display an integer value on the LCD.
 * Parameters  :
 * - data: The integer value to be displayed.
 */
void LCD_intgerToString(int data)
{
    4e72:	df 93       	push	r29
    4e74:	cf 93       	push	r28
    4e76:	cd b7       	in	r28, 0x3d	; 61
    4e78:	de b7       	in	r29, 0x3e	; 62
    4e7a:	62 97       	sbiw	r28, 0x12	; 18
    4e7c:	0f b6       	in	r0, 0x3f	; 63
    4e7e:	f8 94       	cli
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	cd bf       	out	0x3d, r28	; 61
    4e86:	9a 8b       	std	Y+18, r25	; 0x12
    4e88:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];  /* String to hold the ASCII result */
    itoa(data, buff, 10);  /* Convert the integer to its ASCII representation (base 10) */
    4e8a:	89 89       	ldd	r24, Y+17	; 0x11
    4e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    4e8e:	9e 01       	movw	r18, r28
    4e90:	2f 5f       	subi	r18, 0xFF	; 255
    4e92:	3f 4f       	sbci	r19, 0xFF	; 255
    4e94:	b9 01       	movw	r22, r18
    4e96:	4a e0       	ldi	r20, 0x0A	; 10
    4e98:	50 e0       	ldi	r21, 0x00	; 0
    4e9a:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <itoa>
    LCD_displayString(buff);  /* Display the string */
    4e9e:	ce 01       	movw	r24, r28
    4ea0:	01 96       	adiw	r24, 0x01	; 1
    4ea2:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <LCD_displayString>
}
    4ea6:	62 96       	adiw	r28, 0x12	; 18
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	f8 94       	cli
    4eac:	de bf       	out	0x3e, r29	; 62
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	cd bf       	out	0x3d, r28	; 61
    4eb2:	cf 91       	pop	r28
    4eb4:	df 91       	pop	r29
    4eb6:	08 95       	ret

00004eb8 <LCD_clearScreen>:
/*
 * Description :
 * Clear the LCD screen.
 */
void LCD_clearScreen(void)
{
    4eb8:	df 93       	push	r29
    4eba:	cf 93       	push	r28
    4ebc:	cd b7       	in	r28, 0x3d	; 61
    4ebe:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CLEAR_COMMAND);  /* Send clear display command */
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_sendCommand>
}
    4ec6:	cf 91       	pop	r28
    4ec8:	df 91       	pop	r29
    4eca:	08 95       	ret

00004ecc <Buzzer_init>:
 * Description	: source file for the Buzzer driver
 ************************************************************************************/
#include "buzzer.h"

void Buzzer_init(void)
{
    4ecc:	df 93       	push	r29
    4ece:	cf 93       	push	r28
    4ed0:	cd b7       	in	r28, 0x3d	; 61
    4ed2:	de b7       	in	r29, 0x3e	; 62
    /* Set the buzzer pin as output */
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    4ed4:	82 e0       	ldi	r24, 0x02	; 2
    4ed6:	65 e0       	ldi	r22, 0x05	; 5
    4ed8:	41 e0       	ldi	r20, 0x01	; 1
    4eda:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>

    /* Turn off the buzzer initially */
    Buzzer_off();
    4ede:	0e 94 80 27 	call	0x4f00	; 0x4f00 <Buzzer_off>
}
    4ee2:	cf 91       	pop	r28
    4ee4:	df 91       	pop	r29
    4ee6:	08 95       	ret

00004ee8 <Buzzer_on>:

void Buzzer_on(void)
{
    4ee8:	df 93       	push	r29
    4eea:	cf 93       	push	r28
    4eec:	cd b7       	in	r28, 0x3d	; 61
    4eee:	de b7       	in	r29, 0x3e	; 62
    /* Activate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    4ef0:	82 e0       	ldi	r24, 0x02	; 2
    4ef2:	65 e0       	ldi	r22, 0x05	; 5
    4ef4:	41 e0       	ldi	r20, 0x01	; 1
    4ef6:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
}
    4efa:	cf 91       	pop	r28
    4efc:	df 91       	pop	r29
    4efe:	08 95       	ret

00004f00 <Buzzer_off>:

void Buzzer_off(void)
{
    4f00:	df 93       	push	r29
    4f02:	cf 93       	push	r28
    4f04:	cd b7       	in	r28, 0x3d	; 61
    4f06:	de b7       	in	r29, 0x3e	; 62
    /* Deactivate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    4f08:	82 e0       	ldi	r24, 0x02	; 2
    4f0a:	65 e0       	ldi	r22, 0x05	; 5
    4f0c:	40 e0       	ldi	r20, 0x00	; 0
    4f0e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
}
    4f12:	cf 91       	pop	r28
    4f14:	df 91       	pop	r29
    4f16:	08 95       	ret

00004f18 <LEDS_init>:
 * Function to initialize LEDs:
 * 1. Set up the LED pins as output pins.
 * 2. Set the initial state of the LEDs based on the connection logic.
 */
void LEDS_init(void)
{
    4f18:	df 93       	push	r29
    4f1a:	cf 93       	push	r28
    4f1c:	cd b7       	in	r28, 0x3d	; 61
    4f1e:	de b7       	in	r29, 0x3e	; 62
    /* Configure the LED pins as output pins */
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, RED_LED, PIN_OUTPUT);
    4f20:	82 e0       	ldi	r24, 0x02	; 2
    4f22:	60 e0       	ldi	r22, 0x00	; 0
    4f24:	41 e0       	ldi	r20, 0x01	; 1
    4f26:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, GREEN_LED, PIN_OUTPUT);
    4f2a:	82 e0       	ldi	r24, 0x02	; 2
    4f2c:	61 e0       	ldi	r22, 0x01	; 1
    4f2e:	41 e0       	ldi	r20, 0x01	; 1
    4f30:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LEDS_PORT_CONNECTION, BLUE_LED, PIN_OUTPUT);
    4f34:	82 e0       	ldi	r24, 0x02	; 2
    4f36:	62 e0       	ldi	r22, 0x02	; 2
    4f38:	41 e0       	ldi	r20, 0x01	; 1
    4f3a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPinDirection>

#ifdef CONNECTION_POSITIVE_LOGIC
    /* Initialize LEDs to OFF state for positive logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    4f3e:	82 e0       	ldi	r24, 0x02	; 2
    4f40:	60 e0       	ldi	r22, 0x00	; 0
    4f42:	40 e0       	ldi	r20, 0x00	; 0
    4f44:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    4f48:	82 e0       	ldi	r24, 0x02	; 2
    4f4a:	61 e0       	ldi	r22, 0x01	; 1
    4f4c:	40 e0       	ldi	r20, 0x00	; 0
    4f4e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    4f52:	82 e0       	ldi	r24, 0x02	; 2
    4f54:	62 e0       	ldi	r22, 0x02	; 2
    4f56:	40 e0       	ldi	r20, 0x00	; 0
    4f58:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    /* Initialize LEDs to OFF state for negative logic */
    GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
#endif
}
    4f5c:	cf 91       	pop	r28
    4f5e:	df 91       	pop	r29
    4f60:	08 95       	ret

00004f62 <LED_on>:
 * Else, put LOGIC LOW (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn on (red, green, blue).
 */
void LED_on(LED_ID id)
{
    4f62:	df 93       	push	r29
    4f64:	cf 93       	push	r28
    4f66:	00 d0       	rcall	.+0      	; 0x4f68 <LED_on+0x6>
    4f68:	0f 92       	push	r0
    4f6a:	cd b7       	in	r28, 0x3d	; 61
    4f6c:	de b7       	in	r29, 0x3e	; 62
    4f6e:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn on the LED for positive logic */
    switch (id)
    4f70:	89 81       	ldd	r24, Y+1	; 0x01
    4f72:	28 2f       	mov	r18, r24
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	3b 83       	std	Y+3, r19	; 0x03
    4f78:	2a 83       	std	Y+2, r18	; 0x02
    4f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f7e:	81 30       	cpi	r24, 0x01	; 1
    4f80:	91 05       	cpc	r25, r1
    4f82:	79 f0       	breq	.+30     	; 0x4fa2 <LED_on+0x40>
    4f84:	2a 81       	ldd	r18, Y+2	; 0x02
    4f86:	3b 81       	ldd	r19, Y+3	; 0x03
    4f88:	22 30       	cpi	r18, 0x02	; 2
    4f8a:	31 05       	cpc	r19, r1
    4f8c:	81 f0       	breq	.+32     	; 0x4fae <LED_on+0x4c>
    4f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f90:	9b 81       	ldd	r25, Y+3	; 0x03
    4f92:	00 97       	sbiw	r24, 0x00	; 0
    4f94:	89 f4       	brne	.+34     	; 0x4fb8 <LED_on+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_HIGH);
    4f96:	82 e0       	ldi	r24, 0x02	; 2
    4f98:	60 e0       	ldi	r22, 0x00	; 0
    4f9a:	41 e0       	ldi	r20, 0x01	; 1
    4f9c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4fa0:	0b c0       	rjmp	.+22     	; 0x4fb8 <LED_on+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_HIGH);
    4fa2:	82 e0       	ldi	r24, 0x02	; 2
    4fa4:	61 e0       	ldi	r22, 0x01	; 1
    4fa6:	41 e0       	ldi	r20, 0x01	; 1
    4fa8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    4fac:	05 c0       	rjmp	.+10     	; 0x4fb8 <LED_on+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
    4fae:	82 e0       	ldi	r24, 0x02	; 2
    4fb0:	62 e0       	ldi	r22, 0x02	; 2
    4fb2:	41 e0       	ldi	r20, 0x01	; 1
    4fb4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
        break;
    }
#endif
}
    4fb8:	0f 90       	pop	r0
    4fba:	0f 90       	pop	r0
    4fbc:	0f 90       	pop	r0
    4fbe:	cf 91       	pop	r28
    4fc0:	df 91       	pop	r29
    4fc2:	08 95       	ret

00004fc4 <LED_off>:
 * Else, put LOGIC HIGH (NEGATIVE LOGIC CONNECTION).
 * Parameters  :
 * - id: The ID of the LED to turn off (red, green, blue).
 */
void LED_off(LED_ID id)
{
    4fc4:	df 93       	push	r29
    4fc6:	cf 93       	push	r28
    4fc8:	00 d0       	rcall	.+0      	; 0x4fca <LED_off+0x6>
    4fca:	0f 92       	push	r0
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	89 83       	std	Y+1, r24	; 0x01
#ifdef CONNECTION_POSITIVE_LOGIC
    /* Turn off the LED for positive logic */
    switch (id)
    4fd2:	89 81       	ldd	r24, Y+1	; 0x01
    4fd4:	28 2f       	mov	r18, r24
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	3b 83       	std	Y+3, r19	; 0x03
    4fda:	2a 83       	std	Y+2, r18	; 0x02
    4fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fde:	9b 81       	ldd	r25, Y+3	; 0x03
    4fe0:	81 30       	cpi	r24, 0x01	; 1
    4fe2:	91 05       	cpc	r25, r1
    4fe4:	79 f0       	breq	.+30     	; 0x5004 <LED_off+0x40>
    4fe6:	2a 81       	ldd	r18, Y+2	; 0x02
    4fe8:	3b 81       	ldd	r19, Y+3	; 0x03
    4fea:	22 30       	cpi	r18, 0x02	; 2
    4fec:	31 05       	cpc	r19, r1
    4fee:	81 f0       	breq	.+32     	; 0x5010 <LED_off+0x4c>
    4ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff4:	00 97       	sbiw	r24, 0x00	; 0
    4ff6:	89 f4       	brne	.+34     	; 0x501a <LED_off+0x56>
    {
    case red:
        GPIO_writePin(LEDS_PORT_CONNECTION, RED_LED, LOGIC_LOW);
    4ff8:	82 e0       	ldi	r24, 0x02	; 2
    4ffa:	60 e0       	ldi	r22, 0x00	; 0
    4ffc:	40 e0       	ldi	r20, 0x00	; 0
    4ffe:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    5002:	0b c0       	rjmp	.+22     	; 0x501a <LED_off+0x56>
        break;
    case green:
        GPIO_writePin(LEDS_PORT_CONNECTION, GREEN_LED, LOGIC_LOW);
    5004:	82 e0       	ldi	r24, 0x02	; 2
    5006:	61 e0       	ldi	r22, 0x01	; 1
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    500e:	05 c0       	rjmp	.+10     	; 0x501a <LED_off+0x56>
        break;
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_LOW);
    5010:	82 e0       	ldi	r24, 0x02	; 2
    5012:	62 e0       	ldi	r22, 0x02	; 2
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <GPIO_writePin>
    case blue:
        GPIO_writePin(LEDS_PORT_CONNECTION, BLUE_LED, LOGIC_HIGH);
        break;
    }
#endif
}
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	cf 91       	pop	r28
    5022:	df 91       	pop	r29
    5024:	08 95       	ret

00005026 <main>:
	Stop();
}
*/

int main(void)
{
    5026:	df 93       	push	r29
    5028:	cf 93       	push	r28
    502a:	cd b7       	in	r28, 0x3d	; 61
    502c:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1 << 7);		/* Enable global interrupts */
    502e:	af e5       	ldi	r26, 0x5F	; 95
    5030:	b0 e0       	ldi	r27, 0x00	; 0
    5032:	ef e5       	ldi	r30, 0x5F	; 95
    5034:	f0 e0       	ldi	r31, 0x00	; 0
    5036:	80 81       	ld	r24, Z
    5038:	80 68       	ori	r24, 0x80	; 128
    503a:	8c 93       	st	X, r24

	UART_Init(&config);
    503c:	81 e8       	ldi	r24, 0x81	; 129
    503e:	91 e0       	ldi	r25, 0x01	; 1
    5040:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>
	UART_SetRxCallback(App_Receive);
    5044:	86 e3       	ldi	r24, 0x36	; 54
    5046:	98 e2       	ldi	r25, 0x28	; 40
    5048:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <UART_SetRxCallback>

	LCD_init();
    504c:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <LCD_init>
	LEDS_init();
    5050:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <LEDS_init>
	Buzzer_init();
    5054:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <Buzzer_init>
	DcMotor_Init(MOTOR_SPEED_ONE);
    5058:	86 e4       	ldi	r24, 0x46	; 70
    505a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <DcMotor_Init>

	Ultrasonic_init();
    505e:	0e 94 6f 12 	call	0x24de	; 0x24de <Ultrasonic_init>

	while (1)
	{
		readDistance();			/* Read distances from Three Ultrasonics */
    5062:	0e 94 bc 28 	call	0x5178	; 0x5178 <readDistance>
		collisionAvoidance();	/* Handle collision avoidance mode  */
    5066:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <collisionAvoidance>
    506a:	fb cf       	rjmp	.-10     	; 0x5062 <main+0x3c>

0000506c <App_Receive>:
	}
}

/********************* Functions Definitions *********************/
void App_Receive(uint8 recievedMSG)
{
    506c:	df 93       	push	r29
    506e:	cf 93       	push	r28
    5070:	00 d0       	rcall	.+0      	; 0x5072 <App_Receive+0x6>
    5072:	0f 92       	push	r0
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
    5078:	89 83       	std	Y+1, r24	; 0x01
	g_selection = recievedMSG ;
    507a:	89 81       	ldd	r24, Y+1	; 0x01
    507c:	80 93 b5 01 	sts	0x01B5, r24
	switch (recievedMSG)
    5080:	89 81       	ldd	r24, Y+1	; 0x01
    5082:	28 2f       	mov	r18, r24
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	3b 83       	std	Y+3, r19	; 0x03
    5088:	2a 83       	std	Y+2, r18	; 0x02
    508a:	8a 81       	ldd	r24, Y+2	; 0x02
    508c:	9b 81       	ldd	r25, Y+3	; 0x03
    508e:	86 34       	cpi	r24, 0x46	; 70
    5090:	91 05       	cpc	r25, r1
    5092:	09 f4       	brne	.+2      	; 0x5096 <App_Receive+0x2a>
    5094:	48 c0       	rjmp	.+144    	; 0x5126 <App_Receive+0xba>
    5096:	2a 81       	ldd	r18, Y+2	; 0x02
    5098:	3b 81       	ldd	r19, Y+3	; 0x03
    509a:	27 34       	cpi	r18, 0x47	; 71
    509c:	31 05       	cpc	r19, r1
    509e:	1c f5       	brge	.+70     	; 0x50e6 <App_Receive+0x7a>
    50a0:	8a 81       	ldd	r24, Y+2	; 0x02
    50a2:	9b 81       	ldd	r25, Y+3	; 0x03
    50a4:	83 33       	cpi	r24, 0x33	; 51
    50a6:	91 05       	cpc	r25, r1
    50a8:	09 f4       	brne	.+2      	; 0x50ac <App_Receive+0x40>
    50aa:	5d c0       	rjmp	.+186    	; 0x5166 <App_Receive+0xfa>
    50ac:	2a 81       	ldd	r18, Y+2	; 0x02
    50ae:	3b 81       	ldd	r19, Y+3	; 0x03
    50b0:	24 33       	cpi	r18, 0x34	; 52
    50b2:	31 05       	cpc	r19, r1
    50b4:	6c f4       	brge	.+26     	; 0x50d0 <App_Receive+0x64>
    50b6:	8a 81       	ldd	r24, Y+2	; 0x02
    50b8:	9b 81       	ldd	r25, Y+3	; 0x03
    50ba:	81 33       	cpi	r24, 0x31	; 49
    50bc:	91 05       	cpc	r25, r1
    50be:	09 f4       	brne	.+2      	; 0x50c2 <App_Receive+0x56>
    50c0:	4a c0       	rjmp	.+148    	; 0x5156 <App_Receive+0xea>
    50c2:	2a 81       	ldd	r18, Y+2	; 0x02
    50c4:	3b 81       	ldd	r19, Y+3	; 0x03
    50c6:	22 33       	cpi	r18, 0x32	; 50
    50c8:	31 05       	cpc	r19, r1
    50ca:	09 f4       	brne	.+2      	; 0x50ce <App_Receive+0x62>
    50cc:	48 c0       	rjmp	.+144    	; 0x515e <App_Receive+0xf2>
    50ce:	4e c0       	rjmp	.+156    	; 0x516c <App_Receive+0x100>
    50d0:	8a 81       	ldd	r24, Y+2	; 0x02
    50d2:	9b 81       	ldd	r25, Y+3	; 0x03
    50d4:	81 34       	cpi	r24, 0x41	; 65
    50d6:	91 05       	cpc	r25, r1
    50d8:	a9 f1       	breq	.+106    	; 0x5144 <App_Receive+0xd8>
    50da:	2a 81       	ldd	r18, Y+2	; 0x02
    50dc:	3b 81       	ldd	r19, Y+3	; 0x03
    50de:	22 34       	cpi	r18, 0x42	; 66
    50e0:	31 05       	cpc	r19, r1
    50e2:	21 f1       	breq	.+72     	; 0x512c <App_Receive+0xc0>
    50e4:	43 c0       	rjmp	.+134    	; 0x516c <App_Receive+0x100>
    50e6:	8a 81       	ldd	r24, Y+2	; 0x02
    50e8:	9b 81       	ldd	r25, Y+3	; 0x03
    50ea:	80 35       	cpi	r24, 0x50	; 80
    50ec:	91 05       	cpc	r25, r1
    50ee:	81 f1       	breq	.+96     	; 0x5150 <App_Receive+0xe4>
    50f0:	2a 81       	ldd	r18, Y+2	; 0x02
    50f2:	3b 81       	ldd	r19, Y+3	; 0x03
    50f4:	21 35       	cpi	r18, 0x51	; 81
    50f6:	31 05       	cpc	r19, r1
    50f8:	5c f4       	brge	.+22     	; 0x5110 <App_Receive+0xa4>
    50fa:	8a 81       	ldd	r24, Y+2	; 0x02
    50fc:	9b 81       	ldd	r25, Y+3	; 0x03
    50fe:	88 34       	cpi	r24, 0x48	; 72
    5100:	91 05       	cpc	r25, r1
    5102:	19 f1       	breq	.+70     	; 0x514a <App_Receive+0xde>
    5104:	2a 81       	ldd	r18, Y+2	; 0x02
    5106:	3b 81       	ldd	r19, Y+3	; 0x03
    5108:	2c 34       	cpi	r18, 0x4C	; 76
    510a:	31 05       	cpc	r19, r1
    510c:	c1 f0       	breq	.+48     	; 0x513e <App_Receive+0xd2>
    510e:	2e c0       	rjmp	.+92     	; 0x516c <App_Receive+0x100>
    5110:	8a 81       	ldd	r24, Y+2	; 0x02
    5112:	9b 81       	ldd	r25, Y+3	; 0x03
    5114:	82 35       	cpi	r24, 0x52	; 82
    5116:	91 05       	cpc	r25, r1
    5118:	79 f0       	breq	.+30     	; 0x5138 <App_Receive+0xcc>
    511a:	2a 81       	ldd	r18, Y+2	; 0x02
    511c:	3b 81       	ldd	r19, Y+3	; 0x03
    511e:	23 35       	cpi	r18, 0x53	; 83
    5120:	31 05       	cpc	r19, r1
    5122:	39 f0       	breq	.+14     	; 0x5132 <App_Receive+0xc6>
    5124:	23 c0       	rjmp	.+70     	; 0x516c <App_Receive+0x100>
	{
	case 'F':
		Forward();			/* Move forward */
    5126:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Forward>
    512a:	20 c0       	rjmp	.+64     	; 0x516c <App_Receive+0x100>
		break;
	case 'B':
		Backward();			/* Move backward */
    512c:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    5130:	1d c0       	rjmp	.+58     	; 0x516c <App_Receive+0x100>
		break;
	case 'S':
		Stop();				/* Stop movement */
    5132:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
    5136:	1a c0       	rjmp	.+52     	; 0x516c <App_Receive+0x100>
		break;
	case 'R':
		Right_Forward();	/* Turn right and move forward */
    5138:	0e 94 4d 19 	call	0x329a	; 0x329a <Right_Forward>
    513c:	17 c0       	rjmp	.+46     	; 0x516c <App_Receive+0x100>
		break;
	case 'L':
		Left_Forward();		/* Turn left and move forward */
    513e:	0e 94 8d 1a 	call	0x351a	; 0x351a <Left_Forward>
    5142:	14 c0       	rjmp	.+40     	; 0x516c <App_Receive+0x100>
		break;
	case 'A':
		Right_Backward();	/* Turn right and move backward */
    5144:	0e 94 cd 1b 	call	0x379a	; 0x379a <Right_Backward>
    5148:	11 c0       	rjmp	.+34     	; 0x516c <App_Receive+0x100>
		break;
	case 'H':
		Left_Backward();	/* Turn left and move backward */
    514a:	0e 94 6d 1c 	call	0x38da	; 0x38da <Left_Backward>
    514e:	0e c0       	rjmp	.+28     	; 0x516c <App_Receive+0x100>
		break;
	case 'P':
		autoParking();		/* Perform auto-parking */
    5150:	0e 94 c0 2b 	call	0x5780	; 0x5780 <autoParking>
    5154:	0b c0       	rjmp	.+22     	; 0x516c <App_Receive+0x100>
		break;
	case '1':
		DcMotor_Init(MOTOR_SPEED_ONE);	/* Reinitialize motor with new speed */
    5156:	86 e4       	ldi	r24, 0x46	; 70
    5158:	0e 94 19 17 	call	0x2e32	; 0x2e32 <DcMotor_Init>
    515c:	07 c0       	rjmp	.+14     	; 0x516c <App_Receive+0x100>
		break;
	case '2':
		DcMotor_Init(MOTOR_SPEED_TWO);	/* Reinitialize motor with new speed */
    515e:	85 e5       	ldi	r24, 0x55	; 85
    5160:	0e 94 19 17 	call	0x2e32	; 0x2e32 <DcMotor_Init>
    5164:	03 c0       	rjmp	.+6      	; 0x516c <App_Receive+0x100>
		break;
	case '3':
		DcMotor_Init(MOTOR_MAX_SPEED);	/* Reinitialize motor with new speed */
    5166:	84 e6       	ldi	r24, 0x64	; 100
    5168:	0e 94 19 17 	call	0x2e32	; 0x2e32 <DcMotor_Init>
		break;
	}
}
    516c:	0f 90       	pop	r0
    516e:	0f 90       	pop	r0
    5170:	0f 90       	pop	r0
    5172:	cf 91       	pop	r28
    5174:	df 91       	pop	r29
    5176:	08 95       	ret

00005178 <readDistance>:

void readDistance(void)
{
    5178:	df 93       	push	r29
    517a:	cf 93       	push	r28
    517c:	cd b7       	in	r28, 0x3d	; 61
    517e:	de b7       	in	r29, 0x3e	; 62
    5180:	e0 97       	sbiw	r28, 0x30	; 48
    5182:	0f b6       	in	r0, 0x3f	; 63
    5184:	f8 94       	cli
    5186:	de bf       	out	0x3e, r29	; 62
    5188:	0f be       	out	0x3f, r0	; 63
    518a:	cd bf       	out	0x3d, r28	; 61
	uint16 l_nums[3];

	g_distanceRight = Ultrasonic_readDistance(U_right);
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <Ultrasonic_readDistance>
    5192:	90 93 b0 01 	sts	0x01B0, r25
    5196:	80 93 af 01 	sts	0x01AF, r24
    519a:	80 e0       	ldi	r24, 0x00	; 0
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	a8 ec       	ldi	r26, 0xC8	; 200
    51a0:	b2 e4       	ldi	r27, 0x42	; 66
    51a2:	8f a3       	std	Y+39, r24	; 0x27
    51a4:	98 a7       	std	Y+40, r25	; 0x28
    51a6:	a9 a7       	std	Y+41, r26	; 0x29
    51a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51aa:	6f a1       	ldd	r22, Y+39	; 0x27
    51ac:	78 a5       	ldd	r23, Y+40	; 0x28
    51ae:	89 a5       	ldd	r24, Y+41	; 0x29
    51b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    51b2:	20 e0       	ldi	r18, 0x00	; 0
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	4a e7       	ldi	r20, 0x7A	; 122
    51b8:	55 e4       	ldi	r21, 0x45	; 69
    51ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51be:	dc 01       	movw	r26, r24
    51c0:	cb 01       	movw	r24, r22
    51c2:	8b a3       	std	Y+35, r24	; 0x23
    51c4:	9c a3       	std	Y+36, r25	; 0x24
    51c6:	ad a3       	std	Y+37, r26	; 0x25
    51c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    51ca:	6b a1       	ldd	r22, Y+35	; 0x23
    51cc:	7c a1       	ldd	r23, Y+36	; 0x24
    51ce:	8d a1       	ldd	r24, Y+37	; 0x25
    51d0:	9e a1       	ldd	r25, Y+38	; 0x26
    51d2:	20 e0       	ldi	r18, 0x00	; 0
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	40 e8       	ldi	r20, 0x80	; 128
    51d8:	5f e3       	ldi	r21, 0x3F	; 63
    51da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51de:	88 23       	and	r24, r24
    51e0:	2c f4       	brge	.+10     	; 0x51ec <readDistance+0x74>
		__ticks = 1;
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	9a a3       	std	Y+34, r25	; 0x22
    51e8:	89 a3       	std	Y+33, r24	; 0x21
    51ea:	3f c0       	rjmp	.+126    	; 0x526a <readDistance+0xf2>
	else if (__tmp > 65535)
    51ec:	6b a1       	ldd	r22, Y+35	; 0x23
    51ee:	7c a1       	ldd	r23, Y+36	; 0x24
    51f0:	8d a1       	ldd	r24, Y+37	; 0x25
    51f2:	9e a1       	ldd	r25, Y+38	; 0x26
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	3f ef       	ldi	r19, 0xFF	; 255
    51f8:	4f e7       	ldi	r20, 0x7F	; 127
    51fa:	57 e4       	ldi	r21, 0x47	; 71
    51fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5200:	18 16       	cp	r1, r24
    5202:	4c f5       	brge	.+82     	; 0x5256 <readDistance+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5204:	6f a1       	ldd	r22, Y+39	; 0x27
    5206:	78 a5       	ldd	r23, Y+40	; 0x28
    5208:	89 a5       	ldd	r24, Y+41	; 0x29
    520a:	9a a5       	ldd	r25, Y+42	; 0x2a
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	40 e2       	ldi	r20, 0x20	; 32
    5212:	51 e4       	ldi	r21, 0x41	; 65
    5214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22
    521c:	bc 01       	movw	r22, r24
    521e:	cd 01       	movw	r24, r26
    5220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5224:	dc 01       	movw	r26, r24
    5226:	cb 01       	movw	r24, r22
    5228:	9a a3       	std	Y+34, r25	; 0x22
    522a:	89 a3       	std	Y+33, r24	; 0x21
    522c:	0f c0       	rjmp	.+30     	; 0x524c <readDistance+0xd4>
    522e:	80 e9       	ldi	r24, 0x90	; 144
    5230:	91 e0       	ldi	r25, 0x01	; 1
    5232:	98 a3       	std	Y+32, r25	; 0x20
    5234:	8f 8f       	std	Y+31, r24	; 0x1f
    5236:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5238:	98 a1       	ldd	r25, Y+32	; 0x20
    523a:	01 97       	sbiw	r24, 0x01	; 1
    523c:	f1 f7       	brne	.-4      	; 0x523a <readDistance+0xc2>
    523e:	98 a3       	std	Y+32, r25	; 0x20
    5240:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5242:	89 a1       	ldd	r24, Y+33	; 0x21
    5244:	9a a1       	ldd	r25, Y+34	; 0x22
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	9a a3       	std	Y+34, r25	; 0x22
    524a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    524c:	89 a1       	ldd	r24, Y+33	; 0x21
    524e:	9a a1       	ldd	r25, Y+34	; 0x22
    5250:	00 97       	sbiw	r24, 0x00	; 0
    5252:	69 f7       	brne	.-38     	; 0x522e <readDistance+0xb6>
    5254:	14 c0       	rjmp	.+40     	; 0x527e <readDistance+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5256:	6b a1       	ldd	r22, Y+35	; 0x23
    5258:	7c a1       	ldd	r23, Y+36	; 0x24
    525a:	8d a1       	ldd	r24, Y+37	; 0x25
    525c:	9e a1       	ldd	r25, Y+38	; 0x26
    525e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5262:	dc 01       	movw	r26, r24
    5264:	cb 01       	movw	r24, r22
    5266:	9a a3       	std	Y+34, r25	; 0x22
    5268:	89 a3       	std	Y+33, r24	; 0x21
    526a:	89 a1       	ldd	r24, Y+33	; 0x21
    526c:	9a a1       	ldd	r25, Y+34	; 0x22
    526e:	9e 8f       	std	Y+30, r25	; 0x1e
    5270:	8d 8f       	std	Y+29, r24	; 0x1d
    5272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5274:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	f1 f7       	brne	.-4      	; 0x5276 <readDistance+0xfe>
    527a:	9e 8f       	std	Y+30, r25	; 0x1e
    527c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(100);

	g_distanceForward = Ultrasonic_readDistance(U_forward);
    527e:	80 e0       	ldi	r24, 0x00	; 0
    5280:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <Ultrasonic_readDistance>
    5284:	90 93 b2 01 	sts	0x01B2, r25
    5288:	80 93 b1 01 	sts	0x01B1, r24
    528c:	80 e0       	ldi	r24, 0x00	; 0
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	a8 ec       	ldi	r26, 0xC8	; 200
    5292:	b2 e4       	ldi	r27, 0x42	; 66
    5294:	89 8f       	std	Y+25, r24	; 0x19
    5296:	9a 8f       	std	Y+26, r25	; 0x1a
    5298:	ab 8f       	std	Y+27, r26	; 0x1b
    529a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    529c:	69 8d       	ldd	r22, Y+25	; 0x19
    529e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52a4:	20 e0       	ldi	r18, 0x00	; 0
    52a6:	30 e0       	ldi	r19, 0x00	; 0
    52a8:	4a e7       	ldi	r20, 0x7A	; 122
    52aa:	55 e4       	ldi	r21, 0x45	; 69
    52ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	8d 8b       	std	Y+21, r24	; 0x15
    52b6:	9e 8b       	std	Y+22, r25	; 0x16
    52b8:	af 8b       	std	Y+23, r26	; 0x17
    52ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52bc:	6d 89       	ldd	r22, Y+21	; 0x15
    52be:	7e 89       	ldd	r23, Y+22	; 0x16
    52c0:	8f 89       	ldd	r24, Y+23	; 0x17
    52c2:	98 8d       	ldd	r25, Y+24	; 0x18
    52c4:	20 e0       	ldi	r18, 0x00	; 0
    52c6:	30 e0       	ldi	r19, 0x00	; 0
    52c8:	40 e8       	ldi	r20, 0x80	; 128
    52ca:	5f e3       	ldi	r21, 0x3F	; 63
    52cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52d0:	88 23       	and	r24, r24
    52d2:	2c f4       	brge	.+10     	; 0x52de <readDistance+0x166>
		__ticks = 1;
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	9c 8b       	std	Y+20, r25	; 0x14
    52da:	8b 8b       	std	Y+19, r24	; 0x13
    52dc:	3f c0       	rjmp	.+126    	; 0x535c <readDistance+0x1e4>
	else if (__tmp > 65535)
    52de:	6d 89       	ldd	r22, Y+21	; 0x15
    52e0:	7e 89       	ldd	r23, Y+22	; 0x16
    52e2:	8f 89       	ldd	r24, Y+23	; 0x17
    52e4:	98 8d       	ldd	r25, Y+24	; 0x18
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	3f ef       	ldi	r19, 0xFF	; 255
    52ea:	4f e7       	ldi	r20, 0x7F	; 127
    52ec:	57 e4       	ldi	r21, 0x47	; 71
    52ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52f2:	18 16       	cp	r1, r24
    52f4:	4c f5       	brge	.+82     	; 0x5348 <readDistance+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f6:	69 8d       	ldd	r22, Y+25	; 0x19
    52f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52fe:	20 e0       	ldi	r18, 0x00	; 0
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	40 e2       	ldi	r20, 0x20	; 32
    5304:	51 e4       	ldi	r21, 0x41	; 65
    5306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    530a:	dc 01       	movw	r26, r24
    530c:	cb 01       	movw	r24, r22
    530e:	bc 01       	movw	r22, r24
    5310:	cd 01       	movw	r24, r26
    5312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5316:	dc 01       	movw	r26, r24
    5318:	cb 01       	movw	r24, r22
    531a:	9c 8b       	std	Y+20, r25	; 0x14
    531c:	8b 8b       	std	Y+19, r24	; 0x13
    531e:	0f c0       	rjmp	.+30     	; 0x533e <readDistance+0x1c6>
    5320:	80 e9       	ldi	r24, 0x90	; 144
    5322:	91 e0       	ldi	r25, 0x01	; 1
    5324:	9a 8b       	std	Y+18, r25	; 0x12
    5326:	89 8b       	std	Y+17, r24	; 0x11
    5328:	89 89       	ldd	r24, Y+17	; 0x11
    532a:	9a 89       	ldd	r25, Y+18	; 0x12
    532c:	01 97       	sbiw	r24, 0x01	; 1
    532e:	f1 f7       	brne	.-4      	; 0x532c <readDistance+0x1b4>
    5330:	9a 8b       	std	Y+18, r25	; 0x12
    5332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5334:	8b 89       	ldd	r24, Y+19	; 0x13
    5336:	9c 89       	ldd	r25, Y+20	; 0x14
    5338:	01 97       	sbiw	r24, 0x01	; 1
    533a:	9c 8b       	std	Y+20, r25	; 0x14
    533c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    533e:	8b 89       	ldd	r24, Y+19	; 0x13
    5340:	9c 89       	ldd	r25, Y+20	; 0x14
    5342:	00 97       	sbiw	r24, 0x00	; 0
    5344:	69 f7       	brne	.-38     	; 0x5320 <readDistance+0x1a8>
    5346:	14 c0       	rjmp	.+40     	; 0x5370 <readDistance+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5348:	6d 89       	ldd	r22, Y+21	; 0x15
    534a:	7e 89       	ldd	r23, Y+22	; 0x16
    534c:	8f 89       	ldd	r24, Y+23	; 0x17
    534e:	98 8d       	ldd	r25, Y+24	; 0x18
    5350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5354:	dc 01       	movw	r26, r24
    5356:	cb 01       	movw	r24, r22
    5358:	9c 8b       	std	Y+20, r25	; 0x14
    535a:	8b 8b       	std	Y+19, r24	; 0x13
    535c:	8b 89       	ldd	r24, Y+19	; 0x13
    535e:	9c 89       	ldd	r25, Y+20	; 0x14
    5360:	98 8b       	std	Y+16, r25	; 0x10
    5362:	8f 87       	std	Y+15, r24	; 0x0f
    5364:	8f 85       	ldd	r24, Y+15	; 0x0f
    5366:	98 89       	ldd	r25, Y+16	; 0x10
    5368:	01 97       	sbiw	r24, 0x01	; 1
    536a:	f1 f7       	brne	.-4      	; 0x5368 <readDistance+0x1f0>
    536c:	98 8b       	std	Y+16, r25	; 0x10
    536e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	g_distanceBackward = Ultrasonic_readDistance(U_backward);
    5370:	82 e0       	ldi	r24, 0x02	; 2
    5372:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <Ultrasonic_readDistance>
    5376:	90 93 b4 01 	sts	0x01B4, r25
    537a:	80 93 b3 01 	sts	0x01B3, r24
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	a8 ec       	ldi	r26, 0xC8	; 200
    5384:	b2 e4       	ldi	r27, 0x42	; 66
    5386:	8b 87       	std	Y+11, r24	; 0x0b
    5388:	9c 87       	std	Y+12, r25	; 0x0c
    538a:	ad 87       	std	Y+13, r26	; 0x0d
    538c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    538e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5390:	7c 85       	ldd	r23, Y+12	; 0x0c
    5392:	8d 85       	ldd	r24, Y+13	; 0x0d
    5394:	9e 85       	ldd	r25, Y+14	; 0x0e
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	4a e7       	ldi	r20, 0x7A	; 122
    539c:	55 e4       	ldi	r21, 0x45	; 69
    539e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a2:	dc 01       	movw	r26, r24
    53a4:	cb 01       	movw	r24, r22
    53a6:	8f 83       	std	Y+7, r24	; 0x07
    53a8:	98 87       	std	Y+8, r25	; 0x08
    53aa:	a9 87       	std	Y+9, r26	; 0x09
    53ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53ae:	6f 81       	ldd	r22, Y+7	; 0x07
    53b0:	78 85       	ldd	r23, Y+8	; 0x08
    53b2:	89 85       	ldd	r24, Y+9	; 0x09
    53b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	40 e8       	ldi	r20, 0x80	; 128
    53bc:	5f e3       	ldi	r21, 0x3F	; 63
    53be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53c2:	88 23       	and	r24, r24
    53c4:	2c f4       	brge	.+10     	; 0x53d0 <readDistance+0x258>
		__ticks = 1;
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	9e 83       	std	Y+6, r25	; 0x06
    53cc:	8d 83       	std	Y+5, r24	; 0x05
    53ce:	3f c0       	rjmp	.+126    	; 0x544e <readDistance+0x2d6>
	else if (__tmp > 65535)
    53d0:	6f 81       	ldd	r22, Y+7	; 0x07
    53d2:	78 85       	ldd	r23, Y+8	; 0x08
    53d4:	89 85       	ldd	r24, Y+9	; 0x09
    53d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53d8:	20 e0       	ldi	r18, 0x00	; 0
    53da:	3f ef       	ldi	r19, 0xFF	; 255
    53dc:	4f e7       	ldi	r20, 0x7F	; 127
    53de:	57 e4       	ldi	r21, 0x47	; 71
    53e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53e4:	18 16       	cp	r1, r24
    53e6:	4c f5       	brge	.+82     	; 0x543a <readDistance+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    53ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    53ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    53f0:	20 e0       	ldi	r18, 0x00	; 0
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	40 e2       	ldi	r20, 0x20	; 32
    53f6:	51 e4       	ldi	r21, 0x41	; 65
    53f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	bc 01       	movw	r22, r24
    5402:	cd 01       	movw	r24, r26
    5404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5408:	dc 01       	movw	r26, r24
    540a:	cb 01       	movw	r24, r22
    540c:	9e 83       	std	Y+6, r25	; 0x06
    540e:	8d 83       	std	Y+5, r24	; 0x05
    5410:	0f c0       	rjmp	.+30     	; 0x5430 <readDistance+0x2b8>
    5412:	80 e9       	ldi	r24, 0x90	; 144
    5414:	91 e0       	ldi	r25, 0x01	; 1
    5416:	9c 83       	std	Y+4, r25	; 0x04
    5418:	8b 83       	std	Y+3, r24	; 0x03
    541a:	8b 81       	ldd	r24, Y+3	; 0x03
    541c:	9c 81       	ldd	r25, Y+4	; 0x04
    541e:	01 97       	sbiw	r24, 0x01	; 1
    5420:	f1 f7       	brne	.-4      	; 0x541e <readDistance+0x2a6>
    5422:	9c 83       	std	Y+4, r25	; 0x04
    5424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5426:	8d 81       	ldd	r24, Y+5	; 0x05
    5428:	9e 81       	ldd	r25, Y+6	; 0x06
    542a:	01 97       	sbiw	r24, 0x01	; 1
    542c:	9e 83       	std	Y+6, r25	; 0x06
    542e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5430:	8d 81       	ldd	r24, Y+5	; 0x05
    5432:	9e 81       	ldd	r25, Y+6	; 0x06
    5434:	00 97       	sbiw	r24, 0x00	; 0
    5436:	69 f7       	brne	.-38     	; 0x5412 <readDistance+0x29a>
    5438:	14 c0       	rjmp	.+40     	; 0x5462 <readDistance+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    543a:	6f 81       	ldd	r22, Y+7	; 0x07
    543c:	78 85       	ldd	r23, Y+8	; 0x08
    543e:	89 85       	ldd	r24, Y+9	; 0x09
    5440:	9a 85       	ldd	r25, Y+10	; 0x0a
    5442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5446:	dc 01       	movw	r26, r24
    5448:	cb 01       	movw	r24, r22
    544a:	9e 83       	std	Y+6, r25	; 0x06
    544c:	8d 83       	std	Y+5, r24	; 0x05
    544e:	8d 81       	ldd	r24, Y+5	; 0x05
    5450:	9e 81       	ldd	r25, Y+6	; 0x06
    5452:	9a 83       	std	Y+2, r25	; 0x02
    5454:	89 83       	std	Y+1, r24	; 0x01
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	9a 81       	ldd	r25, Y+2	; 0x02
    545a:	01 97       	sbiw	r24, 0x01	; 1
    545c:	f1 f7       	brne	.-4      	; 0x545a <readDistance+0x2e2>
    545e:	9a 83       	std	Y+2, r25	; 0x02
    5460:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);

	if(g_distanceRight >= 100)
    5462:	80 91 af 01 	lds	r24, 0x01AF
    5466:	90 91 b0 01 	lds	r25, 0x01B0
    546a:	84 36       	cpi	r24, 0x64	; 100
    546c:	91 05       	cpc	r25, r1
    546e:	30 f0       	brcs	.+12     	; 0x547c <readDistance+0x304>
	{
		g_distanceRight = 99;
    5470:	83 e6       	ldi	r24, 0x63	; 99
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	90 93 b0 01 	sts	0x01B0, r25
    5478:	80 93 af 01 	sts	0x01AF, r24
	}
	if(g_distanceForward >= 100)
    547c:	80 91 b1 01 	lds	r24, 0x01B1
    5480:	90 91 b2 01 	lds	r25, 0x01B2
    5484:	84 36       	cpi	r24, 0x64	; 100
    5486:	91 05       	cpc	r25, r1
    5488:	30 f0       	brcs	.+12     	; 0x5496 <readDistance+0x31e>
	{
		g_distanceForward = 99;
    548a:	83 e6       	ldi	r24, 0x63	; 99
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	90 93 b2 01 	sts	0x01B2, r25
    5492:	80 93 b1 01 	sts	0x01B1, r24
	}
	if(g_distanceBackward >= 100)
    5496:	80 91 b3 01 	lds	r24, 0x01B3
    549a:	90 91 b4 01 	lds	r25, 0x01B4
    549e:	84 36       	cpi	r24, 0x64	; 100
    54a0:	91 05       	cpc	r25, r1
    54a2:	30 f0       	brcs	.+12     	; 0x54b0 <readDistance+0x338>
	{
		g_distanceBackward = 99;
    54a4:	83 e6       	ldi	r24, 0x63	; 99
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	90 93 b4 01 	sts	0x01B4, r25
    54ac:	80 93 b3 01 	sts	0x01B3, r24
	}

	l_nums[0] = g_distanceRight;
    54b0:	80 91 af 01 	lds	r24, 0x01AF
    54b4:	90 91 b0 01 	lds	r25, 0x01B0
    54b8:	9c a7       	std	Y+44, r25	; 0x2c
    54ba:	8b a7       	std	Y+43, r24	; 0x2b
	l_nums[1] = g_distanceForward;
    54bc:	80 91 b1 01 	lds	r24, 0x01B1
    54c0:	90 91 b2 01 	lds	r25, 0x01B2
    54c4:	9e a7       	std	Y+46, r25	; 0x2e
    54c6:	8d a7       	std	Y+45, r24	; 0x2d
	l_nums[2] = g_distanceBackward;
    54c8:	80 91 b3 01 	lds	r24, 0x01B3
    54cc:	90 91 b4 01 	lds	r25, 0x01B4
    54d0:	98 ab       	std	Y+48, r25	; 0x30
    54d2:	8f a7       	std	Y+47, r24	; 0x2f

	UART_SendNumbersWithDelimiter(l_nums, 3, ',');
    54d4:	ce 01       	movw	r24, r28
    54d6:	8b 96       	adiw	r24, 0x2b	; 43
    54d8:	63 e0       	ldi	r22, 0x03	; 3
    54da:	4c e2       	ldi	r20, 0x2C	; 44
    54dc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <UART_SendNumbersWithDelimiter>
}
    54e0:	e0 96       	adiw	r28, 0x30	; 48
    54e2:	0f b6       	in	r0, 0x3f	; 63
    54e4:	f8 94       	cli
    54e6:	de bf       	out	0x3e, r29	; 62
    54e8:	0f be       	out	0x3f, r0	; 63
    54ea:	cd bf       	out	0x3d, r28	; 61
    54ec:	cf 91       	pop	r28
    54ee:	df 91       	pop	r29
    54f0:	08 95       	ret

000054f2 <collisionAvoidance>:

void collisionAvoidance(void)
{
    54f2:	df 93       	push	r29
    54f4:	cf 93       	push	r28
    54f6:	cd b7       	in	r28, 0x3d	; 61
    54f8:	de b7       	in	r29, 0x3e	; 62
    54fa:	6c 97       	sbiw	r28, 0x1c	; 28
    54fc:	0f b6       	in	r0, 0x3f	; 63
    54fe:	f8 94       	cli
    5500:	de bf       	out	0x3e, r29	; 62
    5502:	0f be       	out	0x3f, r0	; 63
    5504:	cd bf       	out	0x3d, r28	; 61
	if(g_distanceForward <= 40 && (g_selection == 'F' || g_selection == 'R' || g_selection == 'L'))
    5506:	80 91 b1 01 	lds	r24, 0x01B1
    550a:	90 91 b2 01 	lds	r25, 0x01B2
    550e:	89 32       	cpi	r24, 0x29	; 41
    5510:	91 05       	cpc	r25, r1
    5512:	08 f0       	brcs	.+2      	; 0x5516 <collisionAvoidance+0x24>
    5514:	91 c0       	rjmp	.+290    	; 0x5638 <collisionAvoidance+0x146>
    5516:	80 91 b5 01 	lds	r24, 0x01B5
    551a:	86 34       	cpi	r24, 0x46	; 70
    551c:	49 f0       	breq	.+18     	; 0x5530 <collisionAvoidance+0x3e>
    551e:	80 91 b5 01 	lds	r24, 0x01B5
    5522:	82 35       	cpi	r24, 0x52	; 82
    5524:	29 f0       	breq	.+10     	; 0x5530 <collisionAvoidance+0x3e>
    5526:	80 91 b5 01 	lds	r24, 0x01B5
    552a:	8c 34       	cpi	r24, 0x4C	; 76
    552c:	09 f0       	breq	.+2      	; 0x5530 <collisionAvoidance+0x3e>
    552e:	84 c0       	rjmp	.+264    	; 0x5638 <collisionAvoidance+0x146>
	{
		if(g_distanceForward <= 30)
    5530:	80 91 b1 01 	lds	r24, 0x01B1
    5534:	90 91 b2 01 	lds	r25, 0x01B2
    5538:	8f 31       	cpi	r24, 0x1F	; 31
    553a:	91 05       	cpc	r25, r1
    553c:	08 f0       	brcs	.+2      	; 0x5540 <collisionAvoidance+0x4e>
    553e:	79 c0       	rjmp	.+242    	; 0x5632 <collisionAvoidance+0x140>
		{
			Backward();
    5540:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    5544:	80 e0       	ldi	r24, 0x00	; 0
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	a8 ec       	ldi	r26, 0xC8	; 200
    554a:	b2 e4       	ldi	r27, 0x42	; 66
    554c:	89 8f       	std	Y+25, r24	; 0x19
    554e:	9a 8f       	std	Y+26, r25	; 0x1a
    5550:	ab 8f       	std	Y+27, r26	; 0x1b
    5552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5554:	69 8d       	ldd	r22, Y+25	; 0x19
    5556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    555a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    555c:	20 e0       	ldi	r18, 0x00	; 0
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	4a e7       	ldi	r20, 0x7A	; 122
    5562:	55 e4       	ldi	r21, 0x45	; 69
    5564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	8d 8b       	std	Y+21, r24	; 0x15
    556e:	9e 8b       	std	Y+22, r25	; 0x16
    5570:	af 8b       	std	Y+23, r26	; 0x17
    5572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5574:	6d 89       	ldd	r22, Y+21	; 0x15
    5576:	7e 89       	ldd	r23, Y+22	; 0x16
    5578:	8f 89       	ldd	r24, Y+23	; 0x17
    557a:	98 8d       	ldd	r25, Y+24	; 0x18
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	40 e8       	ldi	r20, 0x80	; 128
    5582:	5f e3       	ldi	r21, 0x3F	; 63
    5584:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5588:	88 23       	and	r24, r24
    558a:	2c f4       	brge	.+10     	; 0x5596 <collisionAvoidance+0xa4>
		__ticks = 1;
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	9c 8b       	std	Y+20, r25	; 0x14
    5592:	8b 8b       	std	Y+19, r24	; 0x13
    5594:	3f c0       	rjmp	.+126    	; 0x5614 <collisionAvoidance+0x122>
	else if (__tmp > 65535)
    5596:	6d 89       	ldd	r22, Y+21	; 0x15
    5598:	7e 89       	ldd	r23, Y+22	; 0x16
    559a:	8f 89       	ldd	r24, Y+23	; 0x17
    559c:	98 8d       	ldd	r25, Y+24	; 0x18
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	3f ef       	ldi	r19, 0xFF	; 255
    55a2:	4f e7       	ldi	r20, 0x7F	; 127
    55a4:	57 e4       	ldi	r21, 0x47	; 71
    55a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55aa:	18 16       	cp	r1, r24
    55ac:	4c f5       	brge	.+82     	; 0x5600 <collisionAvoidance+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ae:	69 8d       	ldd	r22, Y+25	; 0x19
    55b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	40 e2       	ldi	r20, 0x20	; 32
    55bc:	51 e4       	ldi	r21, 0x41	; 65
    55be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c2:	dc 01       	movw	r26, r24
    55c4:	cb 01       	movw	r24, r22
    55c6:	bc 01       	movw	r22, r24
    55c8:	cd 01       	movw	r24, r26
    55ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	9c 8b       	std	Y+20, r25	; 0x14
    55d4:	8b 8b       	std	Y+19, r24	; 0x13
    55d6:	0f c0       	rjmp	.+30     	; 0x55f6 <collisionAvoidance+0x104>
    55d8:	80 e9       	ldi	r24, 0x90	; 144
    55da:	91 e0       	ldi	r25, 0x01	; 1
    55dc:	9a 8b       	std	Y+18, r25	; 0x12
    55de:	89 8b       	std	Y+17, r24	; 0x11
    55e0:	89 89       	ldd	r24, Y+17	; 0x11
    55e2:	9a 89       	ldd	r25, Y+18	; 0x12
    55e4:	01 97       	sbiw	r24, 0x01	; 1
    55e6:	f1 f7       	brne	.-4      	; 0x55e4 <collisionAvoidance+0xf2>
    55e8:	9a 8b       	std	Y+18, r25	; 0x12
    55ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ec:	8b 89       	ldd	r24, Y+19	; 0x13
    55ee:	9c 89       	ldd	r25, Y+20	; 0x14
    55f0:	01 97       	sbiw	r24, 0x01	; 1
    55f2:	9c 8b       	std	Y+20, r25	; 0x14
    55f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f6:	8b 89       	ldd	r24, Y+19	; 0x13
    55f8:	9c 89       	ldd	r25, Y+20	; 0x14
    55fa:	00 97       	sbiw	r24, 0x00	; 0
    55fc:	69 f7       	brne	.-38     	; 0x55d8 <collisionAvoidance+0xe6>
    55fe:	14 c0       	rjmp	.+40     	; 0x5628 <collisionAvoidance+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5600:	6d 89       	ldd	r22, Y+21	; 0x15
    5602:	7e 89       	ldd	r23, Y+22	; 0x16
    5604:	8f 89       	ldd	r24, Y+23	; 0x17
    5606:	98 8d       	ldd	r25, Y+24	; 0x18
    5608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	9c 8b       	std	Y+20, r25	; 0x14
    5612:	8b 8b       	std	Y+19, r24	; 0x13
    5614:	8b 89       	ldd	r24, Y+19	; 0x13
    5616:	9c 89       	ldd	r25, Y+20	; 0x14
    5618:	98 8b       	std	Y+16, r25	; 0x10
    561a:	8f 87       	std	Y+15, r24	; 0x0f
    561c:	8f 85       	ldd	r24, Y+15	; 0x0f
    561e:	98 89       	ldd	r25, Y+16	; 0x10
    5620:	01 97       	sbiw	r24, 0x01	; 1
    5622:	f1 f7       	brne	.-4      	; 0x5620 <collisionAvoidance+0x12e>
    5624:	98 8b       	std	Y+16, r25	; 0x10
    5626:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			Stop();
    5628:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
			Buzzer_off();
    562c:	0e 94 80 27 	call	0x4f00	; 0x4f00 <Buzzer_off>
    5630:	9e c0       	rjmp	.+316    	; 0x576e <collisionAvoidance+0x27c>
		}
		else
		{
			Buzzer_on();
    5632:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <Buzzer_on>
    5636:	9b c0       	rjmp	.+310    	; 0x576e <collisionAvoidance+0x27c>
		}
	}
	else if(g_distanceBackward <= 40 && (g_selection == 'B' || g_selection == 'A' || g_selection == 'H'))
    5638:	80 91 b3 01 	lds	r24, 0x01B3
    563c:	90 91 b4 01 	lds	r25, 0x01B4
    5640:	89 32       	cpi	r24, 0x29	; 41
    5642:	91 05       	cpc	r25, r1
    5644:	08 f0       	brcs	.+2      	; 0x5648 <collisionAvoidance+0x156>
    5646:	91 c0       	rjmp	.+290    	; 0x576a <collisionAvoidance+0x278>
    5648:	80 91 b5 01 	lds	r24, 0x01B5
    564c:	82 34       	cpi	r24, 0x42	; 66
    564e:	49 f0       	breq	.+18     	; 0x5662 <collisionAvoidance+0x170>
    5650:	80 91 b5 01 	lds	r24, 0x01B5
    5654:	81 34       	cpi	r24, 0x41	; 65
    5656:	29 f0       	breq	.+10     	; 0x5662 <collisionAvoidance+0x170>
    5658:	80 91 b5 01 	lds	r24, 0x01B5
    565c:	88 34       	cpi	r24, 0x48	; 72
    565e:	09 f0       	breq	.+2      	; 0x5662 <collisionAvoidance+0x170>
    5660:	84 c0       	rjmp	.+264    	; 0x576a <collisionAvoidance+0x278>
	{
		if(g_distanceBackward <= 30)
    5662:	80 91 b3 01 	lds	r24, 0x01B3
    5666:	90 91 b4 01 	lds	r25, 0x01B4
    566a:	8f 31       	cpi	r24, 0x1F	; 31
    566c:	91 05       	cpc	r25, r1
    566e:	08 f0       	brcs	.+2      	; 0x5672 <collisionAvoidance+0x180>
    5670:	79 c0       	rjmp	.+242    	; 0x5764 <collisionAvoidance+0x272>
		{
			Forward();
    5672:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Forward>
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	a8 ec       	ldi	r26, 0xC8	; 200
    567c:	b2 e4       	ldi	r27, 0x42	; 66
    567e:	8b 87       	std	Y+11, r24	; 0x0b
    5680:	9c 87       	std	Y+12, r25	; 0x0c
    5682:	ad 87       	std	Y+13, r26	; 0x0d
    5684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5686:	6b 85       	ldd	r22, Y+11	; 0x0b
    5688:	7c 85       	ldd	r23, Y+12	; 0x0c
    568a:	8d 85       	ldd	r24, Y+13	; 0x0d
    568c:	9e 85       	ldd	r25, Y+14	; 0x0e
    568e:	20 e0       	ldi	r18, 0x00	; 0
    5690:	30 e0       	ldi	r19, 0x00	; 0
    5692:	4a e7       	ldi	r20, 0x7A	; 122
    5694:	55 e4       	ldi	r21, 0x45	; 69
    5696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    569a:	dc 01       	movw	r26, r24
    569c:	cb 01       	movw	r24, r22
    569e:	8f 83       	std	Y+7, r24	; 0x07
    56a0:	98 87       	std	Y+8, r25	; 0x08
    56a2:	a9 87       	std	Y+9, r26	; 0x09
    56a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56a6:	6f 81       	ldd	r22, Y+7	; 0x07
    56a8:	78 85       	ldd	r23, Y+8	; 0x08
    56aa:	89 85       	ldd	r24, Y+9	; 0x09
    56ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ae:	20 e0       	ldi	r18, 0x00	; 0
    56b0:	30 e0       	ldi	r19, 0x00	; 0
    56b2:	40 e8       	ldi	r20, 0x80	; 128
    56b4:	5f e3       	ldi	r21, 0x3F	; 63
    56b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56ba:	88 23       	and	r24, r24
    56bc:	2c f4       	brge	.+10     	; 0x56c8 <collisionAvoidance+0x1d6>
		__ticks = 1;
    56be:	81 e0       	ldi	r24, 0x01	; 1
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	9e 83       	std	Y+6, r25	; 0x06
    56c4:	8d 83       	std	Y+5, r24	; 0x05
    56c6:	3f c0       	rjmp	.+126    	; 0x5746 <collisionAvoidance+0x254>
	else if (__tmp > 65535)
    56c8:	6f 81       	ldd	r22, Y+7	; 0x07
    56ca:	78 85       	ldd	r23, Y+8	; 0x08
    56cc:	89 85       	ldd	r24, Y+9	; 0x09
    56ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d0:	20 e0       	ldi	r18, 0x00	; 0
    56d2:	3f ef       	ldi	r19, 0xFF	; 255
    56d4:	4f e7       	ldi	r20, 0x7F	; 127
    56d6:	57 e4       	ldi	r21, 0x47	; 71
    56d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56dc:	18 16       	cp	r1, r24
    56de:	4c f5       	brge	.+82     	; 0x5732 <collisionAvoidance+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    56e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    56e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    56e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	40 e2       	ldi	r20, 0x20	; 32
    56ee:	51 e4       	ldi	r21, 0x41	; 65
    56f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56f4:	dc 01       	movw	r26, r24
    56f6:	cb 01       	movw	r24, r22
    56f8:	bc 01       	movw	r22, r24
    56fa:	cd 01       	movw	r24, r26
    56fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5700:	dc 01       	movw	r26, r24
    5702:	cb 01       	movw	r24, r22
    5704:	9e 83       	std	Y+6, r25	; 0x06
    5706:	8d 83       	std	Y+5, r24	; 0x05
    5708:	0f c0       	rjmp	.+30     	; 0x5728 <collisionAvoidance+0x236>
    570a:	80 e9       	ldi	r24, 0x90	; 144
    570c:	91 e0       	ldi	r25, 0x01	; 1
    570e:	9c 83       	std	Y+4, r25	; 0x04
    5710:	8b 83       	std	Y+3, r24	; 0x03
    5712:	8b 81       	ldd	r24, Y+3	; 0x03
    5714:	9c 81       	ldd	r25, Y+4	; 0x04
    5716:	01 97       	sbiw	r24, 0x01	; 1
    5718:	f1 f7       	brne	.-4      	; 0x5716 <collisionAvoidance+0x224>
    571a:	9c 83       	std	Y+4, r25	; 0x04
    571c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    571e:	8d 81       	ldd	r24, Y+5	; 0x05
    5720:	9e 81       	ldd	r25, Y+6	; 0x06
    5722:	01 97       	sbiw	r24, 0x01	; 1
    5724:	9e 83       	std	Y+6, r25	; 0x06
    5726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5728:	8d 81       	ldd	r24, Y+5	; 0x05
    572a:	9e 81       	ldd	r25, Y+6	; 0x06
    572c:	00 97       	sbiw	r24, 0x00	; 0
    572e:	69 f7       	brne	.-38     	; 0x570a <collisionAvoidance+0x218>
    5730:	14 c0       	rjmp	.+40     	; 0x575a <collisionAvoidance+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5732:	6f 81       	ldd	r22, Y+7	; 0x07
    5734:	78 85       	ldd	r23, Y+8	; 0x08
    5736:	89 85       	ldd	r24, Y+9	; 0x09
    5738:	9a 85       	ldd	r25, Y+10	; 0x0a
    573a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    573e:	dc 01       	movw	r26, r24
    5740:	cb 01       	movw	r24, r22
    5742:	9e 83       	std	Y+6, r25	; 0x06
    5744:	8d 83       	std	Y+5, r24	; 0x05
    5746:	8d 81       	ldd	r24, Y+5	; 0x05
    5748:	9e 81       	ldd	r25, Y+6	; 0x06
    574a:	9a 83       	std	Y+2, r25	; 0x02
    574c:	89 83       	std	Y+1, r24	; 0x01
    574e:	89 81       	ldd	r24, Y+1	; 0x01
    5750:	9a 81       	ldd	r25, Y+2	; 0x02
    5752:	01 97       	sbiw	r24, 0x01	; 1
    5754:	f1 f7       	brne	.-4      	; 0x5752 <collisionAvoidance+0x260>
    5756:	9a 83       	std	Y+2, r25	; 0x02
    5758:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			Stop();
    575a:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
			Buzzer_off();
    575e:	0e 94 80 27 	call	0x4f00	; 0x4f00 <Buzzer_off>
    5762:	05 c0       	rjmp	.+10     	; 0x576e <collisionAvoidance+0x27c>
		}
		else
		{
			Buzzer_on();
    5764:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <Buzzer_on>
    5768:	02 c0       	rjmp	.+4      	; 0x576e <collisionAvoidance+0x27c>
		}
	}
	else
	{
		Buzzer_off();
    576a:	0e 94 80 27 	call	0x4f00	; 0x4f00 <Buzzer_off>
	}
}
    576e:	6c 96       	adiw	r28, 0x1c	; 28
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	de bf       	out	0x3e, r29	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	cd bf       	out	0x3d, r28	; 61
    577a:	cf 91       	pop	r28
    577c:	df 91       	pop	r29
    577e:	08 95       	ret

00005780 <autoParking>:

void autoParking (void)
{
    5780:	0f 93       	push	r16
    5782:	1f 93       	push	r17
    5784:	df 93       	push	r29
    5786:	cf 93       	push	r28
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
    578c:	c5 53       	subi	r28, 0x35	; 53
    578e:	d1 40       	sbci	r29, 0x01	; 1
    5790:	0f b6       	in	r0, 0x3f	; 63
    5792:	f8 94       	cli
    5794:	de bf       	out	0x3e, r29	; 62
    5796:	0f be       	out	0x3f, r0	; 63
    5798:	cd bf       	out	0x3d, r28	; 61
	uint8 l_counter = 0;
    579a:	fe 01       	movw	r30, r28
    579c:	eb 5c       	subi	r30, 0xCB	; 203
    579e:	fe 4f       	sbci	r31, 0xFE	; 254
    57a0:	10 82       	st	Z, r1

	LCD_clearScreen();
    57a2:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <LCD_clearScreen>
    57a6:	fe 01       	movw	r30, r28
    57a8:	ef 5c       	subi	r30, 0xCF	; 207
    57aa:	fe 4f       	sbci	r31, 0xFE	; 254
    57ac:	80 e0       	ldi	r24, 0x00	; 0
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	aa ef       	ldi	r26, 0xFA	; 250
    57b2:	b3 e4       	ldi	r27, 0x43	; 67
    57b4:	80 83       	st	Z, r24
    57b6:	91 83       	std	Z+1, r25	; 0x01
    57b8:	a2 83       	std	Z+2, r26	; 0x02
    57ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57bc:	8e 01       	movw	r16, r28
    57be:	03 5d       	subi	r16, 0xD3	; 211
    57c0:	1e 4f       	sbci	r17, 0xFE	; 254
    57c2:	fe 01       	movw	r30, r28
    57c4:	ef 5c       	subi	r30, 0xCF	; 207
    57c6:	fe 4f       	sbci	r31, 0xFE	; 254
    57c8:	60 81       	ld	r22, Z
    57ca:	71 81       	ldd	r23, Z+1	; 0x01
    57cc:	82 81       	ldd	r24, Z+2	; 0x02
    57ce:	93 81       	ldd	r25, Z+3	; 0x03
    57d0:	20 e0       	ldi	r18, 0x00	; 0
    57d2:	30 e0       	ldi	r19, 0x00	; 0
    57d4:	4a e7       	ldi	r20, 0x7A	; 122
    57d6:	55 e4       	ldi	r21, 0x45	; 69
    57d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57dc:	dc 01       	movw	r26, r24
    57de:	cb 01       	movw	r24, r22
    57e0:	f8 01       	movw	r30, r16
    57e2:	80 83       	st	Z, r24
    57e4:	91 83       	std	Z+1, r25	; 0x01
    57e6:	a2 83       	std	Z+2, r26	; 0x02
    57e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57ea:	fe 01       	movw	r30, r28
    57ec:	e3 5d       	subi	r30, 0xD3	; 211
    57ee:	fe 4f       	sbci	r31, 0xFE	; 254
    57f0:	60 81       	ld	r22, Z
    57f2:	71 81       	ldd	r23, Z+1	; 0x01
    57f4:	82 81       	ldd	r24, Z+2	; 0x02
    57f6:	93 81       	ldd	r25, Z+3	; 0x03
    57f8:	20 e0       	ldi	r18, 0x00	; 0
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	40 e8       	ldi	r20, 0x80	; 128
    57fe:	5f e3       	ldi	r21, 0x3F	; 63
    5800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5804:	88 23       	and	r24, r24
    5806:	44 f4       	brge	.+16     	; 0x5818 <autoParking+0x98>
		__ticks = 1;
    5808:	fe 01       	movw	r30, r28
    580a:	e5 5d       	subi	r30, 0xD5	; 213
    580c:	fe 4f       	sbci	r31, 0xFE	; 254
    580e:	81 e0       	ldi	r24, 0x01	; 1
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	91 83       	std	Z+1, r25	; 0x01
    5814:	80 83       	st	Z, r24
    5816:	64 c0       	rjmp	.+200    	; 0x58e0 <autoParking+0x160>
	else if (__tmp > 65535)
    5818:	fe 01       	movw	r30, r28
    581a:	e3 5d       	subi	r30, 0xD3	; 211
    581c:	fe 4f       	sbci	r31, 0xFE	; 254
    581e:	60 81       	ld	r22, Z
    5820:	71 81       	ldd	r23, Z+1	; 0x01
    5822:	82 81       	ldd	r24, Z+2	; 0x02
    5824:	93 81       	ldd	r25, Z+3	; 0x03
    5826:	20 e0       	ldi	r18, 0x00	; 0
    5828:	3f ef       	ldi	r19, 0xFF	; 255
    582a:	4f e7       	ldi	r20, 0x7F	; 127
    582c:	57 e4       	ldi	r21, 0x47	; 71
    582e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5832:	18 16       	cp	r1, r24
    5834:	0c f0       	brlt	.+2      	; 0x5838 <autoParking+0xb8>
    5836:	43 c0       	rjmp	.+134    	; 0x58be <autoParking+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5838:	fe 01       	movw	r30, r28
    583a:	ef 5c       	subi	r30, 0xCF	; 207
    583c:	fe 4f       	sbci	r31, 0xFE	; 254
    583e:	60 81       	ld	r22, Z
    5840:	71 81       	ldd	r23, Z+1	; 0x01
    5842:	82 81       	ldd	r24, Z+2	; 0x02
    5844:	93 81       	ldd	r25, Z+3	; 0x03
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	40 e2       	ldi	r20, 0x20	; 32
    584c:	51 e4       	ldi	r21, 0x41	; 65
    584e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5852:	dc 01       	movw	r26, r24
    5854:	cb 01       	movw	r24, r22
    5856:	8e 01       	movw	r16, r28
    5858:	05 5d       	subi	r16, 0xD5	; 213
    585a:	1e 4f       	sbci	r17, 0xFE	; 254
    585c:	bc 01       	movw	r22, r24
    585e:	cd 01       	movw	r24, r26
    5860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5864:	dc 01       	movw	r26, r24
    5866:	cb 01       	movw	r24, r22
    5868:	f8 01       	movw	r30, r16
    586a:	91 83       	std	Z+1, r25	; 0x01
    586c:	80 83       	st	Z, r24
    586e:	1f c0       	rjmp	.+62     	; 0x58ae <autoParking+0x12e>
    5870:	fe 01       	movw	r30, r28
    5872:	e7 5d       	subi	r30, 0xD7	; 215
    5874:	fe 4f       	sbci	r31, 0xFE	; 254
    5876:	80 e9       	ldi	r24, 0x90	; 144
    5878:	91 e0       	ldi	r25, 0x01	; 1
    587a:	91 83       	std	Z+1, r25	; 0x01
    587c:	80 83       	st	Z, r24
    587e:	fe 01       	movw	r30, r28
    5880:	e7 5d       	subi	r30, 0xD7	; 215
    5882:	fe 4f       	sbci	r31, 0xFE	; 254
    5884:	80 81       	ld	r24, Z
    5886:	91 81       	ldd	r25, Z+1	; 0x01
    5888:	01 97       	sbiw	r24, 0x01	; 1
    588a:	f1 f7       	brne	.-4      	; 0x5888 <autoParking+0x108>
    588c:	fe 01       	movw	r30, r28
    588e:	e7 5d       	subi	r30, 0xD7	; 215
    5890:	fe 4f       	sbci	r31, 0xFE	; 254
    5892:	91 83       	std	Z+1, r25	; 0x01
    5894:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5896:	de 01       	movw	r26, r28
    5898:	a5 5d       	subi	r26, 0xD5	; 213
    589a:	be 4f       	sbci	r27, 0xFE	; 254
    589c:	fe 01       	movw	r30, r28
    589e:	e5 5d       	subi	r30, 0xD5	; 213
    58a0:	fe 4f       	sbci	r31, 0xFE	; 254
    58a2:	80 81       	ld	r24, Z
    58a4:	91 81       	ldd	r25, Z+1	; 0x01
    58a6:	01 97       	sbiw	r24, 0x01	; 1
    58a8:	11 96       	adiw	r26, 0x01	; 1
    58aa:	9c 93       	st	X, r25
    58ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58ae:	fe 01       	movw	r30, r28
    58b0:	e5 5d       	subi	r30, 0xD5	; 213
    58b2:	fe 4f       	sbci	r31, 0xFE	; 254
    58b4:	80 81       	ld	r24, Z
    58b6:	91 81       	ldd	r25, Z+1	; 0x01
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	d1 f6       	brne	.-76     	; 0x5870 <autoParking+0xf0>
    58bc:	27 c0       	rjmp	.+78     	; 0x590c <autoParking+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58be:	8e 01       	movw	r16, r28
    58c0:	05 5d       	subi	r16, 0xD5	; 213
    58c2:	1e 4f       	sbci	r17, 0xFE	; 254
    58c4:	fe 01       	movw	r30, r28
    58c6:	e3 5d       	subi	r30, 0xD3	; 211
    58c8:	fe 4f       	sbci	r31, 0xFE	; 254
    58ca:	60 81       	ld	r22, Z
    58cc:	71 81       	ldd	r23, Z+1	; 0x01
    58ce:	82 81       	ldd	r24, Z+2	; 0x02
    58d0:	93 81       	ldd	r25, Z+3	; 0x03
    58d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	f8 01       	movw	r30, r16
    58dc:	91 83       	std	Z+1, r25	; 0x01
    58de:	80 83       	st	Z, r24
    58e0:	de 01       	movw	r26, r28
    58e2:	a9 5d       	subi	r26, 0xD9	; 217
    58e4:	be 4f       	sbci	r27, 0xFE	; 254
    58e6:	fe 01       	movw	r30, r28
    58e8:	e5 5d       	subi	r30, 0xD5	; 213
    58ea:	fe 4f       	sbci	r31, 0xFE	; 254
    58ec:	80 81       	ld	r24, Z
    58ee:	91 81       	ldd	r25, Z+1	; 0x01
    58f0:	8d 93       	st	X+, r24
    58f2:	9c 93       	st	X, r25
    58f4:	fe 01       	movw	r30, r28
    58f6:	e9 5d       	subi	r30, 0xD9	; 217
    58f8:	fe 4f       	sbci	r31, 0xFE	; 254
    58fa:	80 81       	ld	r24, Z
    58fc:	91 81       	ldd	r25, Z+1	; 0x01
    58fe:	01 97       	sbiw	r24, 0x01	; 1
    5900:	f1 f7       	brne	.-4      	; 0x58fe <autoParking+0x17e>
    5902:	fe 01       	movw	r30, r28
    5904:	e9 5d       	subi	r30, 0xD9	; 217
    5906:	fe 4f       	sbci	r31, 0xFE	; 254
    5908:	91 83       	std	Z+1, r25	; 0x01
    590a:	80 83       	st	Z, r24

	_delay_ms(500);

	readDistance();
    590c:	0e 94 bc 28 	call	0x5178	; 0x5178 <readDistance>

	Forward();
    5910:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Forward>
    5914:	0c 94 54 3a 	jmp	0x74a8	; 0x74a8 <autoParking+0x1d28>

	while (30 <= g_distanceRight)
	{
		readDistance();
    5918:	0e 94 bc 28 	call	0x5178	; 0x5178 <readDistance>
		collisionAvoidance();
    591c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <collisionAvoidance>
    5920:	fe 01       	movw	r30, r28
    5922:	ed 5d       	subi	r30, 0xDD	; 221
    5924:	fe 4f       	sbci	r31, 0xFE	; 254
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	a8 ec       	ldi	r26, 0xC8	; 200
    592c:	b2 e4       	ldi	r27, 0x42	; 66
    592e:	80 83       	st	Z, r24
    5930:	91 83       	std	Z+1, r25	; 0x01
    5932:	a2 83       	std	Z+2, r26	; 0x02
    5934:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5936:	8e 01       	movw	r16, r28
    5938:	01 5e       	subi	r16, 0xE1	; 225
    593a:	1e 4f       	sbci	r17, 0xFE	; 254
    593c:	fe 01       	movw	r30, r28
    593e:	ed 5d       	subi	r30, 0xDD	; 221
    5940:	fe 4f       	sbci	r31, 0xFE	; 254
    5942:	60 81       	ld	r22, Z
    5944:	71 81       	ldd	r23, Z+1	; 0x01
    5946:	82 81       	ldd	r24, Z+2	; 0x02
    5948:	93 81       	ldd	r25, Z+3	; 0x03
    594a:	20 e0       	ldi	r18, 0x00	; 0
    594c:	30 e0       	ldi	r19, 0x00	; 0
    594e:	4a e7       	ldi	r20, 0x7A	; 122
    5950:	55 e4       	ldi	r21, 0x45	; 69
    5952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5956:	dc 01       	movw	r26, r24
    5958:	cb 01       	movw	r24, r22
    595a:	f8 01       	movw	r30, r16
    595c:	80 83       	st	Z, r24
    595e:	91 83       	std	Z+1, r25	; 0x01
    5960:	a2 83       	std	Z+2, r26	; 0x02
    5962:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5964:	fe 01       	movw	r30, r28
    5966:	e1 5e       	subi	r30, 0xE1	; 225
    5968:	fe 4f       	sbci	r31, 0xFE	; 254
    596a:	60 81       	ld	r22, Z
    596c:	71 81       	ldd	r23, Z+1	; 0x01
    596e:	82 81       	ldd	r24, Z+2	; 0x02
    5970:	93 81       	ldd	r25, Z+3	; 0x03
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	40 e8       	ldi	r20, 0x80	; 128
    5978:	5f e3       	ldi	r21, 0x3F	; 63
    597a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    597e:	88 23       	and	r24, r24
    5980:	44 f4       	brge	.+16     	; 0x5992 <autoParking+0x212>
		__ticks = 1;
    5982:	fe 01       	movw	r30, r28
    5984:	e3 5e       	subi	r30, 0xE3	; 227
    5986:	fe 4f       	sbci	r31, 0xFE	; 254
    5988:	81 e0       	ldi	r24, 0x01	; 1
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	91 83       	std	Z+1, r25	; 0x01
    598e:	80 83       	st	Z, r24
    5990:	64 c0       	rjmp	.+200    	; 0x5a5a <autoParking+0x2da>
	else if (__tmp > 65535)
    5992:	fe 01       	movw	r30, r28
    5994:	e1 5e       	subi	r30, 0xE1	; 225
    5996:	fe 4f       	sbci	r31, 0xFE	; 254
    5998:	60 81       	ld	r22, Z
    599a:	71 81       	ldd	r23, Z+1	; 0x01
    599c:	82 81       	ldd	r24, Z+2	; 0x02
    599e:	93 81       	ldd	r25, Z+3	; 0x03
    59a0:	20 e0       	ldi	r18, 0x00	; 0
    59a2:	3f ef       	ldi	r19, 0xFF	; 255
    59a4:	4f e7       	ldi	r20, 0x7F	; 127
    59a6:	57 e4       	ldi	r21, 0x47	; 71
    59a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59ac:	18 16       	cp	r1, r24
    59ae:	0c f0       	brlt	.+2      	; 0x59b2 <autoParking+0x232>
    59b0:	43 c0       	rjmp	.+134    	; 0x5a38 <autoParking+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59b2:	fe 01       	movw	r30, r28
    59b4:	ed 5d       	subi	r30, 0xDD	; 221
    59b6:	fe 4f       	sbci	r31, 0xFE	; 254
    59b8:	60 81       	ld	r22, Z
    59ba:	71 81       	ldd	r23, Z+1	; 0x01
    59bc:	82 81       	ldd	r24, Z+2	; 0x02
    59be:	93 81       	ldd	r25, Z+3	; 0x03
    59c0:	20 e0       	ldi	r18, 0x00	; 0
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	40 e2       	ldi	r20, 0x20	; 32
    59c6:	51 e4       	ldi	r21, 0x41	; 65
    59c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59cc:	dc 01       	movw	r26, r24
    59ce:	cb 01       	movw	r24, r22
    59d0:	8e 01       	movw	r16, r28
    59d2:	03 5e       	subi	r16, 0xE3	; 227
    59d4:	1e 4f       	sbci	r17, 0xFE	; 254
    59d6:	bc 01       	movw	r22, r24
    59d8:	cd 01       	movw	r24, r26
    59da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	f8 01       	movw	r30, r16
    59e4:	91 83       	std	Z+1, r25	; 0x01
    59e6:	80 83       	st	Z, r24
    59e8:	1f c0       	rjmp	.+62     	; 0x5a28 <autoParking+0x2a8>
    59ea:	fe 01       	movw	r30, r28
    59ec:	e5 5e       	subi	r30, 0xE5	; 229
    59ee:	fe 4f       	sbci	r31, 0xFE	; 254
    59f0:	80 e9       	ldi	r24, 0x90	; 144
    59f2:	91 e0       	ldi	r25, 0x01	; 1
    59f4:	91 83       	std	Z+1, r25	; 0x01
    59f6:	80 83       	st	Z, r24
    59f8:	fe 01       	movw	r30, r28
    59fa:	e5 5e       	subi	r30, 0xE5	; 229
    59fc:	fe 4f       	sbci	r31, 0xFE	; 254
    59fe:	80 81       	ld	r24, Z
    5a00:	91 81       	ldd	r25, Z+1	; 0x01
    5a02:	01 97       	sbiw	r24, 0x01	; 1
    5a04:	f1 f7       	brne	.-4      	; 0x5a02 <autoParking+0x282>
    5a06:	fe 01       	movw	r30, r28
    5a08:	e5 5e       	subi	r30, 0xE5	; 229
    5a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a0c:	91 83       	std	Z+1, r25	; 0x01
    5a0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a10:	de 01       	movw	r26, r28
    5a12:	a3 5e       	subi	r26, 0xE3	; 227
    5a14:	be 4f       	sbci	r27, 0xFE	; 254
    5a16:	fe 01       	movw	r30, r28
    5a18:	e3 5e       	subi	r30, 0xE3	; 227
    5a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a1c:	80 81       	ld	r24, Z
    5a1e:	91 81       	ldd	r25, Z+1	; 0x01
    5a20:	01 97       	sbiw	r24, 0x01	; 1
    5a22:	11 96       	adiw	r26, 0x01	; 1
    5a24:	9c 93       	st	X, r25
    5a26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a28:	fe 01       	movw	r30, r28
    5a2a:	e3 5e       	subi	r30, 0xE3	; 227
    5a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a2e:	80 81       	ld	r24, Z
    5a30:	91 81       	ldd	r25, Z+1	; 0x01
    5a32:	00 97       	sbiw	r24, 0x00	; 0
    5a34:	d1 f6       	brne	.-76     	; 0x59ea <autoParking+0x26a>
    5a36:	27 c0       	rjmp	.+78     	; 0x5a86 <autoParking+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a38:	8e 01       	movw	r16, r28
    5a3a:	03 5e       	subi	r16, 0xE3	; 227
    5a3c:	1e 4f       	sbci	r17, 0xFE	; 254
    5a3e:	fe 01       	movw	r30, r28
    5a40:	e1 5e       	subi	r30, 0xE1	; 225
    5a42:	fe 4f       	sbci	r31, 0xFE	; 254
    5a44:	60 81       	ld	r22, Z
    5a46:	71 81       	ldd	r23, Z+1	; 0x01
    5a48:	82 81       	ldd	r24, Z+2	; 0x02
    5a4a:	93 81       	ldd	r25, Z+3	; 0x03
    5a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a50:	dc 01       	movw	r26, r24
    5a52:	cb 01       	movw	r24, r22
    5a54:	f8 01       	movw	r30, r16
    5a56:	91 83       	std	Z+1, r25	; 0x01
    5a58:	80 83       	st	Z, r24
    5a5a:	de 01       	movw	r26, r28
    5a5c:	a7 5e       	subi	r26, 0xE7	; 231
    5a5e:	be 4f       	sbci	r27, 0xFE	; 254
    5a60:	fe 01       	movw	r30, r28
    5a62:	e3 5e       	subi	r30, 0xE3	; 227
    5a64:	fe 4f       	sbci	r31, 0xFE	; 254
    5a66:	80 81       	ld	r24, Z
    5a68:	91 81       	ldd	r25, Z+1	; 0x01
    5a6a:	8d 93       	st	X+, r24
    5a6c:	9c 93       	st	X, r25
    5a6e:	fe 01       	movw	r30, r28
    5a70:	e7 5e       	subi	r30, 0xE7	; 231
    5a72:	fe 4f       	sbci	r31, 0xFE	; 254
    5a74:	80 81       	ld	r24, Z
    5a76:	91 81       	ldd	r25, Z+1	; 0x01
    5a78:	01 97       	sbiw	r24, 0x01	; 1
    5a7a:	f1 f7       	brne	.-4      	; 0x5a78 <autoParking+0x2f8>
    5a7c:	fe 01       	movw	r30, r28
    5a7e:	e7 5e       	subi	r30, 0xE7	; 231
    5a80:	fe 4f       	sbci	r31, 0xFE	; 254
    5a82:	91 83       	std	Z+1, r25	; 0x01
    5a84:	80 83       	st	Z, r24

		_delay_ms(100);

		l_counter++;
    5a86:	de 01       	movw	r26, r28
    5a88:	ab 5c       	subi	r26, 0xCB	; 203
    5a8a:	be 4f       	sbci	r27, 0xFE	; 254
    5a8c:	fe 01       	movw	r30, r28
    5a8e:	eb 5c       	subi	r30, 0xCB	; 203
    5a90:	fe 4f       	sbci	r31, 0xFE	; 254
    5a92:	80 81       	ld	r24, Z
    5a94:	8f 5f       	subi	r24, 0xFF	; 255
    5a96:	8c 93       	st	X, r24
		if (5 < l_counter)
    5a98:	fe 01       	movw	r30, r28
    5a9a:	eb 5c       	subi	r30, 0xCB	; 203
    5a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a9e:	80 81       	ld	r24, Z
    5aa0:	86 30       	cpi	r24, 0x06	; 6
    5aa2:	10 f4       	brcc	.+4      	; 0x5aa8 <autoParking+0x328>
    5aa4:	0c 94 54 3a 	jmp	0x74a8	; 0x74a8 <autoParking+0x1d28>
		{
			LCD_displayStringRowColumn(1, 0, "SPACE Available");
    5aa8:	20 e6       	ldi	r18, 0x60	; 96
    5aaa:	30 e0       	ldi	r19, 0x00	; 0
    5aac:	81 e0       	ldi	r24, 0x01	; 1
    5aae:	60 e0       	ldi	r22, 0x00	; 0
    5ab0:	a9 01       	movw	r20, r18
    5ab2:	0e 94 20 27 	call	0x4e40	; 0x4e40 <LCD_displayStringRowColumn>

			Stop();
    5ab6:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
    5aba:	fe 01       	movw	r30, r28
    5abc:	eb 5e       	subi	r30, 0xEB	; 235
    5abe:	fe 4f       	sbci	r31, 0xFE	; 254
    5ac0:	80 e0       	ldi	r24, 0x00	; 0
    5ac2:	90 e0       	ldi	r25, 0x00	; 0
    5ac4:	aa ef       	ldi	r26, 0xFA	; 250
    5ac6:	b3 e4       	ldi	r27, 0x43	; 67
    5ac8:	80 83       	st	Z, r24
    5aca:	91 83       	std	Z+1, r25	; 0x01
    5acc:	a2 83       	std	Z+2, r26	; 0x02
    5ace:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ad0:	8e 01       	movw	r16, r28
    5ad2:	0f 5e       	subi	r16, 0xEF	; 239
    5ad4:	1e 4f       	sbci	r17, 0xFE	; 254
    5ad6:	fe 01       	movw	r30, r28
    5ad8:	eb 5e       	subi	r30, 0xEB	; 235
    5ada:	fe 4f       	sbci	r31, 0xFE	; 254
    5adc:	60 81       	ld	r22, Z
    5ade:	71 81       	ldd	r23, Z+1	; 0x01
    5ae0:	82 81       	ldd	r24, Z+2	; 0x02
    5ae2:	93 81       	ldd	r25, Z+3	; 0x03
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	4a e7       	ldi	r20, 0x7A	; 122
    5aea:	55 e4       	ldi	r21, 0x45	; 69
    5aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5af0:	dc 01       	movw	r26, r24
    5af2:	cb 01       	movw	r24, r22
    5af4:	f8 01       	movw	r30, r16
    5af6:	80 83       	st	Z, r24
    5af8:	91 83       	std	Z+1, r25	; 0x01
    5afa:	a2 83       	std	Z+2, r26	; 0x02
    5afc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5afe:	fe 01       	movw	r30, r28
    5b00:	ef 5e       	subi	r30, 0xEF	; 239
    5b02:	fe 4f       	sbci	r31, 0xFE	; 254
    5b04:	60 81       	ld	r22, Z
    5b06:	71 81       	ldd	r23, Z+1	; 0x01
    5b08:	82 81       	ldd	r24, Z+2	; 0x02
    5b0a:	93 81       	ldd	r25, Z+3	; 0x03
    5b0c:	20 e0       	ldi	r18, 0x00	; 0
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	40 e8       	ldi	r20, 0x80	; 128
    5b12:	5f e3       	ldi	r21, 0x3F	; 63
    5b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b18:	88 23       	and	r24, r24
    5b1a:	44 f4       	brge	.+16     	; 0x5b2c <autoParking+0x3ac>
		__ticks = 1;
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	e1 5f       	subi	r30, 0xF1	; 241
    5b20:	fe 4f       	sbci	r31, 0xFE	; 254
    5b22:	81 e0       	ldi	r24, 0x01	; 1
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	91 83       	std	Z+1, r25	; 0x01
    5b28:	80 83       	st	Z, r24
    5b2a:	64 c0       	rjmp	.+200    	; 0x5bf4 <autoParking+0x474>
	else if (__tmp > 65535)
    5b2c:	fe 01       	movw	r30, r28
    5b2e:	ef 5e       	subi	r30, 0xEF	; 239
    5b30:	fe 4f       	sbci	r31, 0xFE	; 254
    5b32:	60 81       	ld	r22, Z
    5b34:	71 81       	ldd	r23, Z+1	; 0x01
    5b36:	82 81       	ldd	r24, Z+2	; 0x02
    5b38:	93 81       	ldd	r25, Z+3	; 0x03
    5b3a:	20 e0       	ldi	r18, 0x00	; 0
    5b3c:	3f ef       	ldi	r19, 0xFF	; 255
    5b3e:	4f e7       	ldi	r20, 0x7F	; 127
    5b40:	57 e4       	ldi	r21, 0x47	; 71
    5b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b46:	18 16       	cp	r1, r24
    5b48:	0c f0       	brlt	.+2      	; 0x5b4c <autoParking+0x3cc>
    5b4a:	43 c0       	rjmp	.+134    	; 0x5bd2 <autoParking+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b4c:	fe 01       	movw	r30, r28
    5b4e:	eb 5e       	subi	r30, 0xEB	; 235
    5b50:	fe 4f       	sbci	r31, 0xFE	; 254
    5b52:	60 81       	ld	r22, Z
    5b54:	71 81       	ldd	r23, Z+1	; 0x01
    5b56:	82 81       	ldd	r24, Z+2	; 0x02
    5b58:	93 81       	ldd	r25, Z+3	; 0x03
    5b5a:	20 e0       	ldi	r18, 0x00	; 0
    5b5c:	30 e0       	ldi	r19, 0x00	; 0
    5b5e:	40 e2       	ldi	r20, 0x20	; 32
    5b60:	51 e4       	ldi	r21, 0x41	; 65
    5b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b66:	dc 01       	movw	r26, r24
    5b68:	cb 01       	movw	r24, r22
    5b6a:	8e 01       	movw	r16, r28
    5b6c:	01 5f       	subi	r16, 0xF1	; 241
    5b6e:	1e 4f       	sbci	r17, 0xFE	; 254
    5b70:	bc 01       	movw	r22, r24
    5b72:	cd 01       	movw	r24, r26
    5b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b78:	dc 01       	movw	r26, r24
    5b7a:	cb 01       	movw	r24, r22
    5b7c:	f8 01       	movw	r30, r16
    5b7e:	91 83       	std	Z+1, r25	; 0x01
    5b80:	80 83       	st	Z, r24
    5b82:	1f c0       	rjmp	.+62     	; 0x5bc2 <autoParking+0x442>
    5b84:	fe 01       	movw	r30, r28
    5b86:	e3 5f       	subi	r30, 0xF3	; 243
    5b88:	fe 4f       	sbci	r31, 0xFE	; 254
    5b8a:	80 e9       	ldi	r24, 0x90	; 144
    5b8c:	91 e0       	ldi	r25, 0x01	; 1
    5b8e:	91 83       	std	Z+1, r25	; 0x01
    5b90:	80 83       	st	Z, r24
    5b92:	fe 01       	movw	r30, r28
    5b94:	e3 5f       	subi	r30, 0xF3	; 243
    5b96:	fe 4f       	sbci	r31, 0xFE	; 254
    5b98:	80 81       	ld	r24, Z
    5b9a:	91 81       	ldd	r25, Z+1	; 0x01
    5b9c:	01 97       	sbiw	r24, 0x01	; 1
    5b9e:	f1 f7       	brne	.-4      	; 0x5b9c <autoParking+0x41c>
    5ba0:	fe 01       	movw	r30, r28
    5ba2:	e3 5f       	subi	r30, 0xF3	; 243
    5ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ba6:	91 83       	std	Z+1, r25	; 0x01
    5ba8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5baa:	de 01       	movw	r26, r28
    5bac:	a1 5f       	subi	r26, 0xF1	; 241
    5bae:	be 4f       	sbci	r27, 0xFE	; 254
    5bb0:	fe 01       	movw	r30, r28
    5bb2:	e1 5f       	subi	r30, 0xF1	; 241
    5bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb6:	80 81       	ld	r24, Z
    5bb8:	91 81       	ldd	r25, Z+1	; 0x01
    5bba:	01 97       	sbiw	r24, 0x01	; 1
    5bbc:	11 96       	adiw	r26, 0x01	; 1
    5bbe:	9c 93       	st	X, r25
    5bc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	e1 5f       	subi	r30, 0xF1	; 241
    5bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc8:	80 81       	ld	r24, Z
    5bca:	91 81       	ldd	r25, Z+1	; 0x01
    5bcc:	00 97       	sbiw	r24, 0x00	; 0
    5bce:	d1 f6       	brne	.-76     	; 0x5b84 <autoParking+0x404>
    5bd0:	27 c0       	rjmp	.+78     	; 0x5c20 <autoParking+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bd2:	8e 01       	movw	r16, r28
    5bd4:	01 5f       	subi	r16, 0xF1	; 241
    5bd6:	1e 4f       	sbci	r17, 0xFE	; 254
    5bd8:	fe 01       	movw	r30, r28
    5bda:	ef 5e       	subi	r30, 0xEF	; 239
    5bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    5bde:	60 81       	ld	r22, Z
    5be0:	71 81       	ldd	r23, Z+1	; 0x01
    5be2:	82 81       	ldd	r24, Z+2	; 0x02
    5be4:	93 81       	ldd	r25, Z+3	; 0x03
    5be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bea:	dc 01       	movw	r26, r24
    5bec:	cb 01       	movw	r24, r22
    5bee:	f8 01       	movw	r30, r16
    5bf0:	91 83       	std	Z+1, r25	; 0x01
    5bf2:	80 83       	st	Z, r24
    5bf4:	de 01       	movw	r26, r28
    5bf6:	a5 5f       	subi	r26, 0xF5	; 245
    5bf8:	be 4f       	sbci	r27, 0xFE	; 254
    5bfa:	fe 01       	movw	r30, r28
    5bfc:	e1 5f       	subi	r30, 0xF1	; 241
    5bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    5c00:	80 81       	ld	r24, Z
    5c02:	91 81       	ldd	r25, Z+1	; 0x01
    5c04:	8d 93       	st	X+, r24
    5c06:	9c 93       	st	X, r25
    5c08:	fe 01       	movw	r30, r28
    5c0a:	e5 5f       	subi	r30, 0xF5	; 245
    5c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    5c0e:	80 81       	ld	r24, Z
    5c10:	91 81       	ldd	r25, Z+1	; 0x01
    5c12:	01 97       	sbiw	r24, 0x01	; 1
    5c14:	f1 f7       	brne	.-4      	; 0x5c12 <autoParking+0x492>
    5c16:	fe 01       	movw	r30, r28
    5c18:	e5 5f       	subi	r30, 0xF5	; 245
    5c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c1c:	91 83       	std	Z+1, r25	; 0x01
    5c1e:	80 83       	st	Z, r24

			_delay_ms(500);

			Left_Forward_Parking(100);
    5c20:	84 e6       	ldi	r24, 0x64	; 100
    5c22:	0e 94 2d 1b 	call	0x365a	; 0x365a <Left_Forward_Parking>
    5c26:	fe 01       	movw	r30, r28
    5c28:	e9 5f       	subi	r30, 0xF9	; 249
    5c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	aa ef       	ldi	r26, 0xFA	; 250
    5c32:	b3 e4       	ldi	r27, 0x43	; 67
    5c34:	80 83       	st	Z, r24
    5c36:	91 83       	std	Z+1, r25	; 0x01
    5c38:	a2 83       	std	Z+2, r26	; 0x02
    5c3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c3c:	8e 01       	movw	r16, r28
    5c3e:	0d 5f       	subi	r16, 0xFD	; 253
    5c40:	1e 4f       	sbci	r17, 0xFE	; 254
    5c42:	fe 01       	movw	r30, r28
    5c44:	e9 5f       	subi	r30, 0xF9	; 249
    5c46:	fe 4f       	sbci	r31, 0xFE	; 254
    5c48:	60 81       	ld	r22, Z
    5c4a:	71 81       	ldd	r23, Z+1	; 0x01
    5c4c:	82 81       	ldd	r24, Z+2	; 0x02
    5c4e:	93 81       	ldd	r25, Z+3	; 0x03
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	4a e7       	ldi	r20, 0x7A	; 122
    5c56:	55 e4       	ldi	r21, 0x45	; 69
    5c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	cb 01       	movw	r24, r22
    5c60:	f8 01       	movw	r30, r16
    5c62:	80 83       	st	Z, r24
    5c64:	91 83       	std	Z+1, r25	; 0x01
    5c66:	a2 83       	std	Z+2, r26	; 0x02
    5c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c6a:	fe 01       	movw	r30, r28
    5c6c:	ed 5f       	subi	r30, 0xFD	; 253
    5c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c70:	60 81       	ld	r22, Z
    5c72:	71 81       	ldd	r23, Z+1	; 0x01
    5c74:	82 81       	ldd	r24, Z+2	; 0x02
    5c76:	93 81       	ldd	r25, Z+3	; 0x03
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	40 e8       	ldi	r20, 0x80	; 128
    5c7e:	5f e3       	ldi	r21, 0x3F	; 63
    5c80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c84:	88 23       	and	r24, r24
    5c86:	44 f4       	brge	.+16     	; 0x5c98 <autoParking+0x518>
		__ticks = 1;
    5c88:	fe 01       	movw	r30, r28
    5c8a:	ef 5f       	subi	r30, 0xFF	; 255
    5c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	91 83       	std	Z+1, r25	; 0x01
    5c94:	80 83       	st	Z, r24
    5c96:	64 c0       	rjmp	.+200    	; 0x5d60 <autoParking+0x5e0>
	else if (__tmp > 65535)
    5c98:	fe 01       	movw	r30, r28
    5c9a:	ed 5f       	subi	r30, 0xFD	; 253
    5c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    5c9e:	60 81       	ld	r22, Z
    5ca0:	71 81       	ldd	r23, Z+1	; 0x01
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	93 81       	ldd	r25, Z+3	; 0x03
    5ca6:	20 e0       	ldi	r18, 0x00	; 0
    5ca8:	3f ef       	ldi	r19, 0xFF	; 255
    5caa:	4f e7       	ldi	r20, 0x7F	; 127
    5cac:	57 e4       	ldi	r21, 0x47	; 71
    5cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cb2:	18 16       	cp	r1, r24
    5cb4:	0c f0       	brlt	.+2      	; 0x5cb8 <autoParking+0x538>
    5cb6:	43 c0       	rjmp	.+134    	; 0x5d3e <autoParking+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cb8:	fe 01       	movw	r30, r28
    5cba:	e9 5f       	subi	r30, 0xF9	; 249
    5cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    5cbe:	60 81       	ld	r22, Z
    5cc0:	71 81       	ldd	r23, Z+1	; 0x01
    5cc2:	82 81       	ldd	r24, Z+2	; 0x02
    5cc4:	93 81       	ldd	r25, Z+3	; 0x03
    5cc6:	20 e0       	ldi	r18, 0x00	; 0
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	40 e2       	ldi	r20, 0x20	; 32
    5ccc:	51 e4       	ldi	r21, 0x41	; 65
    5cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	8e 01       	movw	r16, r28
    5cd8:	0f 5f       	subi	r16, 0xFF	; 255
    5cda:	1e 4f       	sbci	r17, 0xFE	; 254
    5cdc:	bc 01       	movw	r22, r24
    5cde:	cd 01       	movw	r24, r26
    5ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce4:	dc 01       	movw	r26, r24
    5ce6:	cb 01       	movw	r24, r22
    5ce8:	f8 01       	movw	r30, r16
    5cea:	91 83       	std	Z+1, r25	; 0x01
    5cec:	80 83       	st	Z, r24
    5cee:	1f c0       	rjmp	.+62     	; 0x5d2e <autoParking+0x5ae>
    5cf0:	fe 01       	movw	r30, r28
    5cf2:	e1 50       	subi	r30, 0x01	; 1
    5cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf6:	80 e9       	ldi	r24, 0x90	; 144
    5cf8:	91 e0       	ldi	r25, 0x01	; 1
    5cfa:	91 83       	std	Z+1, r25	; 0x01
    5cfc:	80 83       	st	Z, r24
    5cfe:	fe 01       	movw	r30, r28
    5d00:	e1 50       	subi	r30, 0x01	; 1
    5d02:	ff 4f       	sbci	r31, 0xFF	; 255
    5d04:	80 81       	ld	r24, Z
    5d06:	91 81       	ldd	r25, Z+1	; 0x01
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	f1 f7       	brne	.-4      	; 0x5d08 <autoParking+0x588>
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	e1 50       	subi	r30, 0x01	; 1
    5d10:	ff 4f       	sbci	r31, 0xFF	; 255
    5d12:	91 83       	std	Z+1, r25	; 0x01
    5d14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d16:	de 01       	movw	r26, r28
    5d18:	af 5f       	subi	r26, 0xFF	; 255
    5d1a:	be 4f       	sbci	r27, 0xFE	; 254
    5d1c:	fe 01       	movw	r30, r28
    5d1e:	ef 5f       	subi	r30, 0xFF	; 255
    5d20:	fe 4f       	sbci	r31, 0xFE	; 254
    5d22:	80 81       	ld	r24, Z
    5d24:	91 81       	ldd	r25, Z+1	; 0x01
    5d26:	01 97       	sbiw	r24, 0x01	; 1
    5d28:	11 96       	adiw	r26, 0x01	; 1
    5d2a:	9c 93       	st	X, r25
    5d2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d2e:	fe 01       	movw	r30, r28
    5d30:	ef 5f       	subi	r30, 0xFF	; 255
    5d32:	fe 4f       	sbci	r31, 0xFE	; 254
    5d34:	80 81       	ld	r24, Z
    5d36:	91 81       	ldd	r25, Z+1	; 0x01
    5d38:	00 97       	sbiw	r24, 0x00	; 0
    5d3a:	d1 f6       	brne	.-76     	; 0x5cf0 <autoParking+0x570>
    5d3c:	27 c0       	rjmp	.+78     	; 0x5d8c <autoParking+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d3e:	8e 01       	movw	r16, r28
    5d40:	0f 5f       	subi	r16, 0xFF	; 255
    5d42:	1e 4f       	sbci	r17, 0xFE	; 254
    5d44:	fe 01       	movw	r30, r28
    5d46:	ed 5f       	subi	r30, 0xFD	; 253
    5d48:	fe 4f       	sbci	r31, 0xFE	; 254
    5d4a:	60 81       	ld	r22, Z
    5d4c:	71 81       	ldd	r23, Z+1	; 0x01
    5d4e:	82 81       	ldd	r24, Z+2	; 0x02
    5d50:	93 81       	ldd	r25, Z+3	; 0x03
    5d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d56:	dc 01       	movw	r26, r24
    5d58:	cb 01       	movw	r24, r22
    5d5a:	f8 01       	movw	r30, r16
    5d5c:	91 83       	std	Z+1, r25	; 0x01
    5d5e:	80 83       	st	Z, r24
    5d60:	de 01       	movw	r26, r28
    5d62:	a3 50       	subi	r26, 0x03	; 3
    5d64:	bf 4f       	sbci	r27, 0xFF	; 255
    5d66:	fe 01       	movw	r30, r28
    5d68:	ef 5f       	subi	r30, 0xFF	; 255
    5d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    5d6c:	80 81       	ld	r24, Z
    5d6e:	91 81       	ldd	r25, Z+1	; 0x01
    5d70:	8d 93       	st	X+, r24
    5d72:	9c 93       	st	X, r25
    5d74:	fe 01       	movw	r30, r28
    5d76:	e3 50       	subi	r30, 0x03	; 3
    5d78:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7a:	80 81       	ld	r24, Z
    5d7c:	91 81       	ldd	r25, Z+1	; 0x01
    5d7e:	01 97       	sbiw	r24, 0x01	; 1
    5d80:	f1 f7       	brne	.-4      	; 0x5d7e <autoParking+0x5fe>
    5d82:	fe 01       	movw	r30, r28
    5d84:	e3 50       	subi	r30, 0x03	; 3
    5d86:	ff 4f       	sbci	r31, 0xFF	; 255
    5d88:	91 83       	std	Z+1, r25	; 0x01
    5d8a:	80 83       	st	Z, r24
			_delay_ms(500);
			Backward();
    5d8c:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    5d90:	fe 01       	movw	r30, r28
    5d92:	e7 50       	subi	r30, 0x07	; 7
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	80 e0       	ldi	r24, 0x00	; 0
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	a8 ec       	ldi	r26, 0xC8	; 200
    5d9c:	b2 e4       	ldi	r27, 0x42	; 66
    5d9e:	80 83       	st	Z, r24
    5da0:	91 83       	std	Z+1, r25	; 0x01
    5da2:	a2 83       	std	Z+2, r26	; 0x02
    5da4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5da6:	8e 01       	movw	r16, r28
    5da8:	0b 50       	subi	r16, 0x0B	; 11
    5daa:	1f 4f       	sbci	r17, 0xFF	; 255
    5dac:	fe 01       	movw	r30, r28
    5dae:	e7 50       	subi	r30, 0x07	; 7
    5db0:	ff 4f       	sbci	r31, 0xFF	; 255
    5db2:	60 81       	ld	r22, Z
    5db4:	71 81       	ldd	r23, Z+1	; 0x01
    5db6:	82 81       	ldd	r24, Z+2	; 0x02
    5db8:	93 81       	ldd	r25, Z+3	; 0x03
    5dba:	20 e0       	ldi	r18, 0x00	; 0
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	4a e7       	ldi	r20, 0x7A	; 122
    5dc0:	55 e4       	ldi	r21, 0x45	; 69
    5dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	cb 01       	movw	r24, r22
    5dca:	f8 01       	movw	r30, r16
    5dcc:	80 83       	st	Z, r24
    5dce:	91 83       	std	Z+1, r25	; 0x01
    5dd0:	a2 83       	std	Z+2, r26	; 0x02
    5dd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dd4:	fe 01       	movw	r30, r28
    5dd6:	eb 50       	subi	r30, 0x0B	; 11
    5dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dda:	60 81       	ld	r22, Z
    5ddc:	71 81       	ldd	r23, Z+1	; 0x01
    5dde:	82 81       	ldd	r24, Z+2	; 0x02
    5de0:	93 81       	ldd	r25, Z+3	; 0x03
    5de2:	20 e0       	ldi	r18, 0x00	; 0
    5de4:	30 e0       	ldi	r19, 0x00	; 0
    5de6:	40 e8       	ldi	r20, 0x80	; 128
    5de8:	5f e3       	ldi	r21, 0x3F	; 63
    5dea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dee:	88 23       	and	r24, r24
    5df0:	44 f4       	brge	.+16     	; 0x5e02 <autoParking+0x682>
		__ticks = 1;
    5df2:	fe 01       	movw	r30, r28
    5df4:	ed 50       	subi	r30, 0x0D	; 13
    5df6:	ff 4f       	sbci	r31, 0xFF	; 255
    5df8:	81 e0       	ldi	r24, 0x01	; 1
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	91 83       	std	Z+1, r25	; 0x01
    5dfe:	80 83       	st	Z, r24
    5e00:	64 c0       	rjmp	.+200    	; 0x5eca <autoParking+0x74a>
	else if (__tmp > 65535)
    5e02:	fe 01       	movw	r30, r28
    5e04:	eb 50       	subi	r30, 0x0B	; 11
    5e06:	ff 4f       	sbci	r31, 0xFF	; 255
    5e08:	60 81       	ld	r22, Z
    5e0a:	71 81       	ldd	r23, Z+1	; 0x01
    5e0c:	82 81       	ldd	r24, Z+2	; 0x02
    5e0e:	93 81       	ldd	r25, Z+3	; 0x03
    5e10:	20 e0       	ldi	r18, 0x00	; 0
    5e12:	3f ef       	ldi	r19, 0xFF	; 255
    5e14:	4f e7       	ldi	r20, 0x7F	; 127
    5e16:	57 e4       	ldi	r21, 0x47	; 71
    5e18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e1c:	18 16       	cp	r1, r24
    5e1e:	0c f0       	brlt	.+2      	; 0x5e22 <autoParking+0x6a2>
    5e20:	43 c0       	rjmp	.+134    	; 0x5ea8 <autoParking+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e22:	fe 01       	movw	r30, r28
    5e24:	e7 50       	subi	r30, 0x07	; 7
    5e26:	ff 4f       	sbci	r31, 0xFF	; 255
    5e28:	60 81       	ld	r22, Z
    5e2a:	71 81       	ldd	r23, Z+1	; 0x01
    5e2c:	82 81       	ldd	r24, Z+2	; 0x02
    5e2e:	93 81       	ldd	r25, Z+3	; 0x03
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	40 e2       	ldi	r20, 0x20	; 32
    5e36:	51 e4       	ldi	r21, 0x41	; 65
    5e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e3c:	dc 01       	movw	r26, r24
    5e3e:	cb 01       	movw	r24, r22
    5e40:	8e 01       	movw	r16, r28
    5e42:	0d 50       	subi	r16, 0x0D	; 13
    5e44:	1f 4f       	sbci	r17, 0xFF	; 255
    5e46:	bc 01       	movw	r22, r24
    5e48:	cd 01       	movw	r24, r26
    5e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e4e:	dc 01       	movw	r26, r24
    5e50:	cb 01       	movw	r24, r22
    5e52:	f8 01       	movw	r30, r16
    5e54:	91 83       	std	Z+1, r25	; 0x01
    5e56:	80 83       	st	Z, r24
    5e58:	1f c0       	rjmp	.+62     	; 0x5e98 <autoParking+0x718>
    5e5a:	fe 01       	movw	r30, r28
    5e5c:	ef 50       	subi	r30, 0x0F	; 15
    5e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e60:	80 e9       	ldi	r24, 0x90	; 144
    5e62:	91 e0       	ldi	r25, 0x01	; 1
    5e64:	91 83       	std	Z+1, r25	; 0x01
    5e66:	80 83       	st	Z, r24
    5e68:	fe 01       	movw	r30, r28
    5e6a:	ef 50       	subi	r30, 0x0F	; 15
    5e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6e:	80 81       	ld	r24, Z
    5e70:	91 81       	ldd	r25, Z+1	; 0x01
    5e72:	01 97       	sbiw	r24, 0x01	; 1
    5e74:	f1 f7       	brne	.-4      	; 0x5e72 <autoParking+0x6f2>
    5e76:	fe 01       	movw	r30, r28
    5e78:	ef 50       	subi	r30, 0x0F	; 15
    5e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e7c:	91 83       	std	Z+1, r25	; 0x01
    5e7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e80:	de 01       	movw	r26, r28
    5e82:	ad 50       	subi	r26, 0x0D	; 13
    5e84:	bf 4f       	sbci	r27, 0xFF	; 255
    5e86:	fe 01       	movw	r30, r28
    5e88:	ed 50       	subi	r30, 0x0D	; 13
    5e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e8c:	80 81       	ld	r24, Z
    5e8e:	91 81       	ldd	r25, Z+1	; 0x01
    5e90:	01 97       	sbiw	r24, 0x01	; 1
    5e92:	11 96       	adiw	r26, 0x01	; 1
    5e94:	9c 93       	st	X, r25
    5e96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e98:	fe 01       	movw	r30, r28
    5e9a:	ed 50       	subi	r30, 0x0D	; 13
    5e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9e:	80 81       	ld	r24, Z
    5ea0:	91 81       	ldd	r25, Z+1	; 0x01
    5ea2:	00 97       	sbiw	r24, 0x00	; 0
    5ea4:	d1 f6       	brne	.-76     	; 0x5e5a <autoParking+0x6da>
    5ea6:	27 c0       	rjmp	.+78     	; 0x5ef6 <autoParking+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ea8:	8e 01       	movw	r16, r28
    5eaa:	0d 50       	subi	r16, 0x0D	; 13
    5eac:	1f 4f       	sbci	r17, 0xFF	; 255
    5eae:	fe 01       	movw	r30, r28
    5eb0:	eb 50       	subi	r30, 0x0B	; 11
    5eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb4:	60 81       	ld	r22, Z
    5eb6:	71 81       	ldd	r23, Z+1	; 0x01
    5eb8:	82 81       	ldd	r24, Z+2	; 0x02
    5eba:	93 81       	ldd	r25, Z+3	; 0x03
    5ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ec0:	dc 01       	movw	r26, r24
    5ec2:	cb 01       	movw	r24, r22
    5ec4:	f8 01       	movw	r30, r16
    5ec6:	91 83       	std	Z+1, r25	; 0x01
    5ec8:	80 83       	st	Z, r24
    5eca:	de 01       	movw	r26, r28
    5ecc:	a1 51       	subi	r26, 0x11	; 17
    5ece:	bf 4f       	sbci	r27, 0xFF	; 255
    5ed0:	fe 01       	movw	r30, r28
    5ed2:	ed 50       	subi	r30, 0x0D	; 13
    5ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed6:	80 81       	ld	r24, Z
    5ed8:	91 81       	ldd	r25, Z+1	; 0x01
    5eda:	8d 93       	st	X+, r24
    5edc:	9c 93       	st	X, r25
    5ede:	fe 01       	movw	r30, r28
    5ee0:	e1 51       	subi	r30, 0x11	; 17
    5ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee4:	80 81       	ld	r24, Z
    5ee6:	91 81       	ldd	r25, Z+1	; 0x01
    5ee8:	01 97       	sbiw	r24, 0x01	; 1
    5eea:	f1 f7       	brne	.-4      	; 0x5ee8 <autoParking+0x768>
    5eec:	fe 01       	movw	r30, r28
    5eee:	e1 51       	subi	r30, 0x11	; 17
    5ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef2:	91 83       	std	Z+1, r25	; 0x01
    5ef4:	80 83       	st	Z, r24
			_delay_ms(100);
			Left_Forward_Parking(100);
    5ef6:	84 e6       	ldi	r24, 0x64	; 100
    5ef8:	0e 94 2d 1b 	call	0x365a	; 0x365a <Left_Forward_Parking>
    5efc:	fe 01       	movw	r30, r28
    5efe:	e5 51       	subi	r30, 0x15	; 21
    5f00:	ff 4f       	sbci	r31, 0xFF	; 255
    5f02:	80 e0       	ldi	r24, 0x00	; 0
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	aa ef       	ldi	r26, 0xFA	; 250
    5f08:	b3 e4       	ldi	r27, 0x43	; 67
    5f0a:	80 83       	st	Z, r24
    5f0c:	91 83       	std	Z+1, r25	; 0x01
    5f0e:	a2 83       	std	Z+2, r26	; 0x02
    5f10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f12:	8e 01       	movw	r16, r28
    5f14:	09 51       	subi	r16, 0x19	; 25
    5f16:	1f 4f       	sbci	r17, 0xFF	; 255
    5f18:	fe 01       	movw	r30, r28
    5f1a:	e5 51       	subi	r30, 0x15	; 21
    5f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1e:	60 81       	ld	r22, Z
    5f20:	71 81       	ldd	r23, Z+1	; 0x01
    5f22:	82 81       	ldd	r24, Z+2	; 0x02
    5f24:	93 81       	ldd	r25, Z+3	; 0x03
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	4a e7       	ldi	r20, 0x7A	; 122
    5f2c:	55 e4       	ldi	r21, 0x45	; 69
    5f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f32:	dc 01       	movw	r26, r24
    5f34:	cb 01       	movw	r24, r22
    5f36:	f8 01       	movw	r30, r16
    5f38:	80 83       	st	Z, r24
    5f3a:	91 83       	std	Z+1, r25	; 0x01
    5f3c:	a2 83       	std	Z+2, r26	; 0x02
    5f3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f40:	fe 01       	movw	r30, r28
    5f42:	e9 51       	subi	r30, 0x19	; 25
    5f44:	ff 4f       	sbci	r31, 0xFF	; 255
    5f46:	60 81       	ld	r22, Z
    5f48:	71 81       	ldd	r23, Z+1	; 0x01
    5f4a:	82 81       	ldd	r24, Z+2	; 0x02
    5f4c:	93 81       	ldd	r25, Z+3	; 0x03
    5f4e:	20 e0       	ldi	r18, 0x00	; 0
    5f50:	30 e0       	ldi	r19, 0x00	; 0
    5f52:	40 e8       	ldi	r20, 0x80	; 128
    5f54:	5f e3       	ldi	r21, 0x3F	; 63
    5f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f5a:	88 23       	and	r24, r24
    5f5c:	44 f4       	brge	.+16     	; 0x5f6e <autoParking+0x7ee>
		__ticks = 1;
    5f5e:	fe 01       	movw	r30, r28
    5f60:	eb 51       	subi	r30, 0x1B	; 27
    5f62:	ff 4f       	sbci	r31, 0xFF	; 255
    5f64:	81 e0       	ldi	r24, 0x01	; 1
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	91 83       	std	Z+1, r25	; 0x01
    5f6a:	80 83       	st	Z, r24
    5f6c:	64 c0       	rjmp	.+200    	; 0x6036 <autoParking+0x8b6>
	else if (__tmp > 65535)
    5f6e:	fe 01       	movw	r30, r28
    5f70:	e9 51       	subi	r30, 0x19	; 25
    5f72:	ff 4f       	sbci	r31, 0xFF	; 255
    5f74:	60 81       	ld	r22, Z
    5f76:	71 81       	ldd	r23, Z+1	; 0x01
    5f78:	82 81       	ldd	r24, Z+2	; 0x02
    5f7a:	93 81       	ldd	r25, Z+3	; 0x03
    5f7c:	20 e0       	ldi	r18, 0x00	; 0
    5f7e:	3f ef       	ldi	r19, 0xFF	; 255
    5f80:	4f e7       	ldi	r20, 0x7F	; 127
    5f82:	57 e4       	ldi	r21, 0x47	; 71
    5f84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f88:	18 16       	cp	r1, r24
    5f8a:	0c f0       	brlt	.+2      	; 0x5f8e <autoParking+0x80e>
    5f8c:	43 c0       	rjmp	.+134    	; 0x6014 <autoParking+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f8e:	fe 01       	movw	r30, r28
    5f90:	e5 51       	subi	r30, 0x15	; 21
    5f92:	ff 4f       	sbci	r31, 0xFF	; 255
    5f94:	60 81       	ld	r22, Z
    5f96:	71 81       	ldd	r23, Z+1	; 0x01
    5f98:	82 81       	ldd	r24, Z+2	; 0x02
    5f9a:	93 81       	ldd	r25, Z+3	; 0x03
    5f9c:	20 e0       	ldi	r18, 0x00	; 0
    5f9e:	30 e0       	ldi	r19, 0x00	; 0
    5fa0:	40 e2       	ldi	r20, 0x20	; 32
    5fa2:	51 e4       	ldi	r21, 0x41	; 65
    5fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fa8:	dc 01       	movw	r26, r24
    5faa:	cb 01       	movw	r24, r22
    5fac:	8e 01       	movw	r16, r28
    5fae:	0b 51       	subi	r16, 0x1B	; 27
    5fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5fb2:	bc 01       	movw	r22, r24
    5fb4:	cd 01       	movw	r24, r26
    5fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fba:	dc 01       	movw	r26, r24
    5fbc:	cb 01       	movw	r24, r22
    5fbe:	f8 01       	movw	r30, r16
    5fc0:	91 83       	std	Z+1, r25	; 0x01
    5fc2:	80 83       	st	Z, r24
    5fc4:	1f c0       	rjmp	.+62     	; 0x6004 <autoParking+0x884>
    5fc6:	fe 01       	movw	r30, r28
    5fc8:	ed 51       	subi	r30, 0x1D	; 29
    5fca:	ff 4f       	sbci	r31, 0xFF	; 255
    5fcc:	80 e9       	ldi	r24, 0x90	; 144
    5fce:	91 e0       	ldi	r25, 0x01	; 1
    5fd0:	91 83       	std	Z+1, r25	; 0x01
    5fd2:	80 83       	st	Z, r24
    5fd4:	fe 01       	movw	r30, r28
    5fd6:	ed 51       	subi	r30, 0x1D	; 29
    5fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fda:	80 81       	ld	r24, Z
    5fdc:	91 81       	ldd	r25, Z+1	; 0x01
    5fde:	01 97       	sbiw	r24, 0x01	; 1
    5fe0:	f1 f7       	brne	.-4      	; 0x5fde <autoParking+0x85e>
    5fe2:	fe 01       	movw	r30, r28
    5fe4:	ed 51       	subi	r30, 0x1D	; 29
    5fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe8:	91 83       	std	Z+1, r25	; 0x01
    5fea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fec:	de 01       	movw	r26, r28
    5fee:	ab 51       	subi	r26, 0x1B	; 27
    5ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ff2:	fe 01       	movw	r30, r28
    5ff4:	eb 51       	subi	r30, 0x1B	; 27
    5ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff8:	80 81       	ld	r24, Z
    5ffa:	91 81       	ldd	r25, Z+1	; 0x01
    5ffc:	01 97       	sbiw	r24, 0x01	; 1
    5ffe:	11 96       	adiw	r26, 0x01	; 1
    6000:	9c 93       	st	X, r25
    6002:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6004:	fe 01       	movw	r30, r28
    6006:	eb 51       	subi	r30, 0x1B	; 27
    6008:	ff 4f       	sbci	r31, 0xFF	; 255
    600a:	80 81       	ld	r24, Z
    600c:	91 81       	ldd	r25, Z+1	; 0x01
    600e:	00 97       	sbiw	r24, 0x00	; 0
    6010:	d1 f6       	brne	.-76     	; 0x5fc6 <autoParking+0x846>
    6012:	27 c0       	rjmp	.+78     	; 0x6062 <autoParking+0x8e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6014:	8e 01       	movw	r16, r28
    6016:	0b 51       	subi	r16, 0x1B	; 27
    6018:	1f 4f       	sbci	r17, 0xFF	; 255
    601a:	fe 01       	movw	r30, r28
    601c:	e9 51       	subi	r30, 0x19	; 25
    601e:	ff 4f       	sbci	r31, 0xFF	; 255
    6020:	60 81       	ld	r22, Z
    6022:	71 81       	ldd	r23, Z+1	; 0x01
    6024:	82 81       	ldd	r24, Z+2	; 0x02
    6026:	93 81       	ldd	r25, Z+3	; 0x03
    6028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    602c:	dc 01       	movw	r26, r24
    602e:	cb 01       	movw	r24, r22
    6030:	f8 01       	movw	r30, r16
    6032:	91 83       	std	Z+1, r25	; 0x01
    6034:	80 83       	st	Z, r24
    6036:	de 01       	movw	r26, r28
    6038:	af 51       	subi	r26, 0x1F	; 31
    603a:	bf 4f       	sbci	r27, 0xFF	; 255
    603c:	fe 01       	movw	r30, r28
    603e:	eb 51       	subi	r30, 0x1B	; 27
    6040:	ff 4f       	sbci	r31, 0xFF	; 255
    6042:	80 81       	ld	r24, Z
    6044:	91 81       	ldd	r25, Z+1	; 0x01
    6046:	8d 93       	st	X+, r24
    6048:	9c 93       	st	X, r25
    604a:	fe 01       	movw	r30, r28
    604c:	ef 51       	subi	r30, 0x1F	; 31
    604e:	ff 4f       	sbci	r31, 0xFF	; 255
    6050:	80 81       	ld	r24, Z
    6052:	91 81       	ldd	r25, Z+1	; 0x01
    6054:	01 97       	sbiw	r24, 0x01	; 1
    6056:	f1 f7       	brne	.-4      	; 0x6054 <autoParking+0x8d4>
    6058:	fe 01       	movw	r30, r28
    605a:	ef 51       	subi	r30, 0x1F	; 31
    605c:	ff 4f       	sbci	r31, 0xFF	; 255
    605e:	91 83       	std	Z+1, r25	; 0x01
    6060:	80 83       	st	Z, r24
			_delay_ms(500);
			Backward();
    6062:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    6066:	fe 01       	movw	r30, r28
    6068:	e3 52       	subi	r30, 0x23	; 35
    606a:	ff 4f       	sbci	r31, 0xFF	; 255
    606c:	80 e0       	ldi	r24, 0x00	; 0
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	a8 ec       	ldi	r26, 0xC8	; 200
    6072:	b2 e4       	ldi	r27, 0x42	; 66
    6074:	80 83       	st	Z, r24
    6076:	91 83       	std	Z+1, r25	; 0x01
    6078:	a2 83       	std	Z+2, r26	; 0x02
    607a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    607c:	8e 01       	movw	r16, r28
    607e:	07 52       	subi	r16, 0x27	; 39
    6080:	1f 4f       	sbci	r17, 0xFF	; 255
    6082:	fe 01       	movw	r30, r28
    6084:	e3 52       	subi	r30, 0x23	; 35
    6086:	ff 4f       	sbci	r31, 0xFF	; 255
    6088:	60 81       	ld	r22, Z
    608a:	71 81       	ldd	r23, Z+1	; 0x01
    608c:	82 81       	ldd	r24, Z+2	; 0x02
    608e:	93 81       	ldd	r25, Z+3	; 0x03
    6090:	20 e0       	ldi	r18, 0x00	; 0
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	4a e7       	ldi	r20, 0x7A	; 122
    6096:	55 e4       	ldi	r21, 0x45	; 69
    6098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    609c:	dc 01       	movw	r26, r24
    609e:	cb 01       	movw	r24, r22
    60a0:	f8 01       	movw	r30, r16
    60a2:	80 83       	st	Z, r24
    60a4:	91 83       	std	Z+1, r25	; 0x01
    60a6:	a2 83       	std	Z+2, r26	; 0x02
    60a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    60aa:	fe 01       	movw	r30, r28
    60ac:	e7 52       	subi	r30, 0x27	; 39
    60ae:	ff 4f       	sbci	r31, 0xFF	; 255
    60b0:	60 81       	ld	r22, Z
    60b2:	71 81       	ldd	r23, Z+1	; 0x01
    60b4:	82 81       	ldd	r24, Z+2	; 0x02
    60b6:	93 81       	ldd	r25, Z+3	; 0x03
    60b8:	20 e0       	ldi	r18, 0x00	; 0
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	40 e8       	ldi	r20, 0x80	; 128
    60be:	5f e3       	ldi	r21, 0x3F	; 63
    60c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60c4:	88 23       	and	r24, r24
    60c6:	44 f4       	brge	.+16     	; 0x60d8 <autoParking+0x958>
		__ticks = 1;
    60c8:	fe 01       	movw	r30, r28
    60ca:	e9 52       	subi	r30, 0x29	; 41
    60cc:	ff 4f       	sbci	r31, 0xFF	; 255
    60ce:	81 e0       	ldi	r24, 0x01	; 1
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	91 83       	std	Z+1, r25	; 0x01
    60d4:	80 83       	st	Z, r24
    60d6:	64 c0       	rjmp	.+200    	; 0x61a0 <autoParking+0xa20>
	else if (__tmp > 65535)
    60d8:	fe 01       	movw	r30, r28
    60da:	e7 52       	subi	r30, 0x27	; 39
    60dc:	ff 4f       	sbci	r31, 0xFF	; 255
    60de:	60 81       	ld	r22, Z
    60e0:	71 81       	ldd	r23, Z+1	; 0x01
    60e2:	82 81       	ldd	r24, Z+2	; 0x02
    60e4:	93 81       	ldd	r25, Z+3	; 0x03
    60e6:	20 e0       	ldi	r18, 0x00	; 0
    60e8:	3f ef       	ldi	r19, 0xFF	; 255
    60ea:	4f e7       	ldi	r20, 0x7F	; 127
    60ec:	57 e4       	ldi	r21, 0x47	; 71
    60ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60f2:	18 16       	cp	r1, r24
    60f4:	0c f0       	brlt	.+2      	; 0x60f8 <autoParking+0x978>
    60f6:	43 c0       	rjmp	.+134    	; 0x617e <autoParking+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60f8:	fe 01       	movw	r30, r28
    60fa:	e3 52       	subi	r30, 0x23	; 35
    60fc:	ff 4f       	sbci	r31, 0xFF	; 255
    60fe:	60 81       	ld	r22, Z
    6100:	71 81       	ldd	r23, Z+1	; 0x01
    6102:	82 81       	ldd	r24, Z+2	; 0x02
    6104:	93 81       	ldd	r25, Z+3	; 0x03
    6106:	20 e0       	ldi	r18, 0x00	; 0
    6108:	30 e0       	ldi	r19, 0x00	; 0
    610a:	40 e2       	ldi	r20, 0x20	; 32
    610c:	51 e4       	ldi	r21, 0x41	; 65
    610e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6112:	dc 01       	movw	r26, r24
    6114:	cb 01       	movw	r24, r22
    6116:	8e 01       	movw	r16, r28
    6118:	09 52       	subi	r16, 0x29	; 41
    611a:	1f 4f       	sbci	r17, 0xFF	; 255
    611c:	bc 01       	movw	r22, r24
    611e:	cd 01       	movw	r24, r26
    6120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6124:	dc 01       	movw	r26, r24
    6126:	cb 01       	movw	r24, r22
    6128:	f8 01       	movw	r30, r16
    612a:	91 83       	std	Z+1, r25	; 0x01
    612c:	80 83       	st	Z, r24
    612e:	1f c0       	rjmp	.+62     	; 0x616e <autoParking+0x9ee>
    6130:	fe 01       	movw	r30, r28
    6132:	eb 52       	subi	r30, 0x2B	; 43
    6134:	ff 4f       	sbci	r31, 0xFF	; 255
    6136:	80 e9       	ldi	r24, 0x90	; 144
    6138:	91 e0       	ldi	r25, 0x01	; 1
    613a:	91 83       	std	Z+1, r25	; 0x01
    613c:	80 83       	st	Z, r24
    613e:	fe 01       	movw	r30, r28
    6140:	eb 52       	subi	r30, 0x2B	; 43
    6142:	ff 4f       	sbci	r31, 0xFF	; 255
    6144:	80 81       	ld	r24, Z
    6146:	91 81       	ldd	r25, Z+1	; 0x01
    6148:	01 97       	sbiw	r24, 0x01	; 1
    614a:	f1 f7       	brne	.-4      	; 0x6148 <autoParking+0x9c8>
    614c:	fe 01       	movw	r30, r28
    614e:	eb 52       	subi	r30, 0x2B	; 43
    6150:	ff 4f       	sbci	r31, 0xFF	; 255
    6152:	91 83       	std	Z+1, r25	; 0x01
    6154:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6156:	de 01       	movw	r26, r28
    6158:	a9 52       	subi	r26, 0x29	; 41
    615a:	bf 4f       	sbci	r27, 0xFF	; 255
    615c:	fe 01       	movw	r30, r28
    615e:	e9 52       	subi	r30, 0x29	; 41
    6160:	ff 4f       	sbci	r31, 0xFF	; 255
    6162:	80 81       	ld	r24, Z
    6164:	91 81       	ldd	r25, Z+1	; 0x01
    6166:	01 97       	sbiw	r24, 0x01	; 1
    6168:	11 96       	adiw	r26, 0x01	; 1
    616a:	9c 93       	st	X, r25
    616c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    616e:	fe 01       	movw	r30, r28
    6170:	e9 52       	subi	r30, 0x29	; 41
    6172:	ff 4f       	sbci	r31, 0xFF	; 255
    6174:	80 81       	ld	r24, Z
    6176:	91 81       	ldd	r25, Z+1	; 0x01
    6178:	00 97       	sbiw	r24, 0x00	; 0
    617a:	d1 f6       	brne	.-76     	; 0x6130 <autoParking+0x9b0>
    617c:	27 c0       	rjmp	.+78     	; 0x61cc <autoParking+0xa4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    617e:	8e 01       	movw	r16, r28
    6180:	09 52       	subi	r16, 0x29	; 41
    6182:	1f 4f       	sbci	r17, 0xFF	; 255
    6184:	fe 01       	movw	r30, r28
    6186:	e7 52       	subi	r30, 0x27	; 39
    6188:	ff 4f       	sbci	r31, 0xFF	; 255
    618a:	60 81       	ld	r22, Z
    618c:	71 81       	ldd	r23, Z+1	; 0x01
    618e:	82 81       	ldd	r24, Z+2	; 0x02
    6190:	93 81       	ldd	r25, Z+3	; 0x03
    6192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6196:	dc 01       	movw	r26, r24
    6198:	cb 01       	movw	r24, r22
    619a:	f8 01       	movw	r30, r16
    619c:	91 83       	std	Z+1, r25	; 0x01
    619e:	80 83       	st	Z, r24
    61a0:	de 01       	movw	r26, r28
    61a2:	ad 52       	subi	r26, 0x2D	; 45
    61a4:	bf 4f       	sbci	r27, 0xFF	; 255
    61a6:	fe 01       	movw	r30, r28
    61a8:	e9 52       	subi	r30, 0x29	; 41
    61aa:	ff 4f       	sbci	r31, 0xFF	; 255
    61ac:	80 81       	ld	r24, Z
    61ae:	91 81       	ldd	r25, Z+1	; 0x01
    61b0:	8d 93       	st	X+, r24
    61b2:	9c 93       	st	X, r25
    61b4:	fe 01       	movw	r30, r28
    61b6:	ed 52       	subi	r30, 0x2D	; 45
    61b8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ba:	80 81       	ld	r24, Z
    61bc:	91 81       	ldd	r25, Z+1	; 0x01
    61be:	01 97       	sbiw	r24, 0x01	; 1
    61c0:	f1 f7       	brne	.-4      	; 0x61be <autoParking+0xa3e>
    61c2:	fe 01       	movw	r30, r28
    61c4:	ed 52       	subi	r30, 0x2D	; 45
    61c6:	ff 4f       	sbci	r31, 0xFF	; 255
    61c8:	91 83       	std	Z+1, r25	; 0x01
    61ca:	80 83       	st	Z, r24
			_delay_ms(100);
			Left_Forward_Parking(100);
    61cc:	84 e6       	ldi	r24, 0x64	; 100
    61ce:	0e 94 2d 1b 	call	0x365a	; 0x365a <Left_Forward_Parking>
    61d2:	fe 01       	movw	r30, r28
    61d4:	e1 53       	subi	r30, 0x31	; 49
    61d6:	ff 4f       	sbci	r31, 0xFF	; 255
    61d8:	80 e0       	ldi	r24, 0x00	; 0
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	aa ef       	ldi	r26, 0xFA	; 250
    61de:	b3 e4       	ldi	r27, 0x43	; 67
    61e0:	80 83       	st	Z, r24
    61e2:	91 83       	std	Z+1, r25	; 0x01
    61e4:	a2 83       	std	Z+2, r26	; 0x02
    61e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61e8:	8e 01       	movw	r16, r28
    61ea:	05 53       	subi	r16, 0x35	; 53
    61ec:	1f 4f       	sbci	r17, 0xFF	; 255
    61ee:	fe 01       	movw	r30, r28
    61f0:	e1 53       	subi	r30, 0x31	; 49
    61f2:	ff 4f       	sbci	r31, 0xFF	; 255
    61f4:	60 81       	ld	r22, Z
    61f6:	71 81       	ldd	r23, Z+1	; 0x01
    61f8:	82 81       	ldd	r24, Z+2	; 0x02
    61fa:	93 81       	ldd	r25, Z+3	; 0x03
    61fc:	20 e0       	ldi	r18, 0x00	; 0
    61fe:	30 e0       	ldi	r19, 0x00	; 0
    6200:	4a e7       	ldi	r20, 0x7A	; 122
    6202:	55 e4       	ldi	r21, 0x45	; 69
    6204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6208:	dc 01       	movw	r26, r24
    620a:	cb 01       	movw	r24, r22
    620c:	f8 01       	movw	r30, r16
    620e:	80 83       	st	Z, r24
    6210:	91 83       	std	Z+1, r25	; 0x01
    6212:	a2 83       	std	Z+2, r26	; 0x02
    6214:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6216:	fe 01       	movw	r30, r28
    6218:	e5 53       	subi	r30, 0x35	; 53
    621a:	ff 4f       	sbci	r31, 0xFF	; 255
    621c:	60 81       	ld	r22, Z
    621e:	71 81       	ldd	r23, Z+1	; 0x01
    6220:	82 81       	ldd	r24, Z+2	; 0x02
    6222:	93 81       	ldd	r25, Z+3	; 0x03
    6224:	20 e0       	ldi	r18, 0x00	; 0
    6226:	30 e0       	ldi	r19, 0x00	; 0
    6228:	40 e8       	ldi	r20, 0x80	; 128
    622a:	5f e3       	ldi	r21, 0x3F	; 63
    622c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6230:	88 23       	and	r24, r24
    6232:	44 f4       	brge	.+16     	; 0x6244 <autoParking+0xac4>
		__ticks = 1;
    6234:	fe 01       	movw	r30, r28
    6236:	e7 53       	subi	r30, 0x37	; 55
    6238:	ff 4f       	sbci	r31, 0xFF	; 255
    623a:	81 e0       	ldi	r24, 0x01	; 1
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	91 83       	std	Z+1, r25	; 0x01
    6240:	80 83       	st	Z, r24
    6242:	64 c0       	rjmp	.+200    	; 0x630c <autoParking+0xb8c>
	else if (__tmp > 65535)
    6244:	fe 01       	movw	r30, r28
    6246:	e5 53       	subi	r30, 0x35	; 53
    6248:	ff 4f       	sbci	r31, 0xFF	; 255
    624a:	60 81       	ld	r22, Z
    624c:	71 81       	ldd	r23, Z+1	; 0x01
    624e:	82 81       	ldd	r24, Z+2	; 0x02
    6250:	93 81       	ldd	r25, Z+3	; 0x03
    6252:	20 e0       	ldi	r18, 0x00	; 0
    6254:	3f ef       	ldi	r19, 0xFF	; 255
    6256:	4f e7       	ldi	r20, 0x7F	; 127
    6258:	57 e4       	ldi	r21, 0x47	; 71
    625a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    625e:	18 16       	cp	r1, r24
    6260:	0c f0       	brlt	.+2      	; 0x6264 <autoParking+0xae4>
    6262:	43 c0       	rjmp	.+134    	; 0x62ea <autoParking+0xb6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6264:	fe 01       	movw	r30, r28
    6266:	e1 53       	subi	r30, 0x31	; 49
    6268:	ff 4f       	sbci	r31, 0xFF	; 255
    626a:	60 81       	ld	r22, Z
    626c:	71 81       	ldd	r23, Z+1	; 0x01
    626e:	82 81       	ldd	r24, Z+2	; 0x02
    6270:	93 81       	ldd	r25, Z+3	; 0x03
    6272:	20 e0       	ldi	r18, 0x00	; 0
    6274:	30 e0       	ldi	r19, 0x00	; 0
    6276:	40 e2       	ldi	r20, 0x20	; 32
    6278:	51 e4       	ldi	r21, 0x41	; 65
    627a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    627e:	dc 01       	movw	r26, r24
    6280:	cb 01       	movw	r24, r22
    6282:	8e 01       	movw	r16, r28
    6284:	07 53       	subi	r16, 0x37	; 55
    6286:	1f 4f       	sbci	r17, 0xFF	; 255
    6288:	bc 01       	movw	r22, r24
    628a:	cd 01       	movw	r24, r26
    628c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6290:	dc 01       	movw	r26, r24
    6292:	cb 01       	movw	r24, r22
    6294:	f8 01       	movw	r30, r16
    6296:	91 83       	std	Z+1, r25	; 0x01
    6298:	80 83       	st	Z, r24
    629a:	1f c0       	rjmp	.+62     	; 0x62da <autoParking+0xb5a>
    629c:	fe 01       	movw	r30, r28
    629e:	e9 53       	subi	r30, 0x39	; 57
    62a0:	ff 4f       	sbci	r31, 0xFF	; 255
    62a2:	80 e9       	ldi	r24, 0x90	; 144
    62a4:	91 e0       	ldi	r25, 0x01	; 1
    62a6:	91 83       	std	Z+1, r25	; 0x01
    62a8:	80 83       	st	Z, r24
    62aa:	fe 01       	movw	r30, r28
    62ac:	e9 53       	subi	r30, 0x39	; 57
    62ae:	ff 4f       	sbci	r31, 0xFF	; 255
    62b0:	80 81       	ld	r24, Z
    62b2:	91 81       	ldd	r25, Z+1	; 0x01
    62b4:	01 97       	sbiw	r24, 0x01	; 1
    62b6:	f1 f7       	brne	.-4      	; 0x62b4 <autoParking+0xb34>
    62b8:	fe 01       	movw	r30, r28
    62ba:	e9 53       	subi	r30, 0x39	; 57
    62bc:	ff 4f       	sbci	r31, 0xFF	; 255
    62be:	91 83       	std	Z+1, r25	; 0x01
    62c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62c2:	de 01       	movw	r26, r28
    62c4:	a7 53       	subi	r26, 0x37	; 55
    62c6:	bf 4f       	sbci	r27, 0xFF	; 255
    62c8:	fe 01       	movw	r30, r28
    62ca:	e7 53       	subi	r30, 0x37	; 55
    62cc:	ff 4f       	sbci	r31, 0xFF	; 255
    62ce:	80 81       	ld	r24, Z
    62d0:	91 81       	ldd	r25, Z+1	; 0x01
    62d2:	01 97       	sbiw	r24, 0x01	; 1
    62d4:	11 96       	adiw	r26, 0x01	; 1
    62d6:	9c 93       	st	X, r25
    62d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62da:	fe 01       	movw	r30, r28
    62dc:	e7 53       	subi	r30, 0x37	; 55
    62de:	ff 4f       	sbci	r31, 0xFF	; 255
    62e0:	80 81       	ld	r24, Z
    62e2:	91 81       	ldd	r25, Z+1	; 0x01
    62e4:	00 97       	sbiw	r24, 0x00	; 0
    62e6:	d1 f6       	brne	.-76     	; 0x629c <autoParking+0xb1c>
    62e8:	27 c0       	rjmp	.+78     	; 0x6338 <autoParking+0xbb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62ea:	8e 01       	movw	r16, r28
    62ec:	07 53       	subi	r16, 0x37	; 55
    62ee:	1f 4f       	sbci	r17, 0xFF	; 255
    62f0:	fe 01       	movw	r30, r28
    62f2:	e5 53       	subi	r30, 0x35	; 53
    62f4:	ff 4f       	sbci	r31, 0xFF	; 255
    62f6:	60 81       	ld	r22, Z
    62f8:	71 81       	ldd	r23, Z+1	; 0x01
    62fa:	82 81       	ldd	r24, Z+2	; 0x02
    62fc:	93 81       	ldd	r25, Z+3	; 0x03
    62fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6302:	dc 01       	movw	r26, r24
    6304:	cb 01       	movw	r24, r22
    6306:	f8 01       	movw	r30, r16
    6308:	91 83       	std	Z+1, r25	; 0x01
    630a:	80 83       	st	Z, r24
    630c:	de 01       	movw	r26, r28
    630e:	ab 53       	subi	r26, 0x3B	; 59
    6310:	bf 4f       	sbci	r27, 0xFF	; 255
    6312:	fe 01       	movw	r30, r28
    6314:	e7 53       	subi	r30, 0x37	; 55
    6316:	ff 4f       	sbci	r31, 0xFF	; 255
    6318:	80 81       	ld	r24, Z
    631a:	91 81       	ldd	r25, Z+1	; 0x01
    631c:	8d 93       	st	X+, r24
    631e:	9c 93       	st	X, r25
    6320:	fe 01       	movw	r30, r28
    6322:	eb 53       	subi	r30, 0x3B	; 59
    6324:	ff 4f       	sbci	r31, 0xFF	; 255
    6326:	80 81       	ld	r24, Z
    6328:	91 81       	ldd	r25, Z+1	; 0x01
    632a:	01 97       	sbiw	r24, 0x01	; 1
    632c:	f1 f7       	brne	.-4      	; 0x632a <autoParking+0xbaa>
    632e:	fe 01       	movw	r30, r28
    6330:	eb 53       	subi	r30, 0x3B	; 59
    6332:	ff 4f       	sbci	r31, 0xFF	; 255
    6334:	91 83       	std	Z+1, r25	; 0x01
    6336:	80 83       	st	Z, r24
			_delay_ms(500);

			Stop();
    6338:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
    633c:	fe 01       	movw	r30, r28
    633e:	ef 53       	subi	r30, 0x3F	; 63
    6340:	ff 4f       	sbci	r31, 0xFF	; 255
    6342:	80 e0       	ldi	r24, 0x00	; 0
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	aa ef       	ldi	r26, 0xFA	; 250
    6348:	b3 e4       	ldi	r27, 0x43	; 67
    634a:	80 83       	st	Z, r24
    634c:	91 83       	std	Z+1, r25	; 0x01
    634e:	a2 83       	std	Z+2, r26	; 0x02
    6350:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6352:	8e 01       	movw	r16, r28
    6354:	03 54       	subi	r16, 0x43	; 67
    6356:	1f 4f       	sbci	r17, 0xFF	; 255
    6358:	fe 01       	movw	r30, r28
    635a:	ef 53       	subi	r30, 0x3F	; 63
    635c:	ff 4f       	sbci	r31, 0xFF	; 255
    635e:	60 81       	ld	r22, Z
    6360:	71 81       	ldd	r23, Z+1	; 0x01
    6362:	82 81       	ldd	r24, Z+2	; 0x02
    6364:	93 81       	ldd	r25, Z+3	; 0x03
    6366:	20 e0       	ldi	r18, 0x00	; 0
    6368:	30 e0       	ldi	r19, 0x00	; 0
    636a:	4a e7       	ldi	r20, 0x7A	; 122
    636c:	55 e4       	ldi	r21, 0x45	; 69
    636e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6372:	dc 01       	movw	r26, r24
    6374:	cb 01       	movw	r24, r22
    6376:	f8 01       	movw	r30, r16
    6378:	80 83       	st	Z, r24
    637a:	91 83       	std	Z+1, r25	; 0x01
    637c:	a2 83       	std	Z+2, r26	; 0x02
    637e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6380:	fe 01       	movw	r30, r28
    6382:	e3 54       	subi	r30, 0x43	; 67
    6384:	ff 4f       	sbci	r31, 0xFF	; 255
    6386:	60 81       	ld	r22, Z
    6388:	71 81       	ldd	r23, Z+1	; 0x01
    638a:	82 81       	ldd	r24, Z+2	; 0x02
    638c:	93 81       	ldd	r25, Z+3	; 0x03
    638e:	20 e0       	ldi	r18, 0x00	; 0
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	40 e8       	ldi	r20, 0x80	; 128
    6394:	5f e3       	ldi	r21, 0x3F	; 63
    6396:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    639a:	88 23       	and	r24, r24
    639c:	44 f4       	brge	.+16     	; 0x63ae <autoParking+0xc2e>
		__ticks = 1;
    639e:	fe 01       	movw	r30, r28
    63a0:	e5 54       	subi	r30, 0x45	; 69
    63a2:	ff 4f       	sbci	r31, 0xFF	; 255
    63a4:	81 e0       	ldi	r24, 0x01	; 1
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	91 83       	std	Z+1, r25	; 0x01
    63aa:	80 83       	st	Z, r24
    63ac:	64 c0       	rjmp	.+200    	; 0x6476 <autoParking+0xcf6>
	else if (__tmp > 65535)
    63ae:	fe 01       	movw	r30, r28
    63b0:	e3 54       	subi	r30, 0x43	; 67
    63b2:	ff 4f       	sbci	r31, 0xFF	; 255
    63b4:	60 81       	ld	r22, Z
    63b6:	71 81       	ldd	r23, Z+1	; 0x01
    63b8:	82 81       	ldd	r24, Z+2	; 0x02
    63ba:	93 81       	ldd	r25, Z+3	; 0x03
    63bc:	20 e0       	ldi	r18, 0x00	; 0
    63be:	3f ef       	ldi	r19, 0xFF	; 255
    63c0:	4f e7       	ldi	r20, 0x7F	; 127
    63c2:	57 e4       	ldi	r21, 0x47	; 71
    63c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    63c8:	18 16       	cp	r1, r24
    63ca:	0c f0       	brlt	.+2      	; 0x63ce <autoParking+0xc4e>
    63cc:	43 c0       	rjmp	.+134    	; 0x6454 <autoParking+0xcd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63ce:	fe 01       	movw	r30, r28
    63d0:	ef 53       	subi	r30, 0x3F	; 63
    63d2:	ff 4f       	sbci	r31, 0xFF	; 255
    63d4:	60 81       	ld	r22, Z
    63d6:	71 81       	ldd	r23, Z+1	; 0x01
    63d8:	82 81       	ldd	r24, Z+2	; 0x02
    63da:	93 81       	ldd	r25, Z+3	; 0x03
    63dc:	20 e0       	ldi	r18, 0x00	; 0
    63de:	30 e0       	ldi	r19, 0x00	; 0
    63e0:	40 e2       	ldi	r20, 0x20	; 32
    63e2:	51 e4       	ldi	r21, 0x41	; 65
    63e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63e8:	dc 01       	movw	r26, r24
    63ea:	cb 01       	movw	r24, r22
    63ec:	8e 01       	movw	r16, r28
    63ee:	05 54       	subi	r16, 0x45	; 69
    63f0:	1f 4f       	sbci	r17, 0xFF	; 255
    63f2:	bc 01       	movw	r22, r24
    63f4:	cd 01       	movw	r24, r26
    63f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63fa:	dc 01       	movw	r26, r24
    63fc:	cb 01       	movw	r24, r22
    63fe:	f8 01       	movw	r30, r16
    6400:	91 83       	std	Z+1, r25	; 0x01
    6402:	80 83       	st	Z, r24
    6404:	1f c0       	rjmp	.+62     	; 0x6444 <autoParking+0xcc4>
    6406:	fe 01       	movw	r30, r28
    6408:	e7 54       	subi	r30, 0x47	; 71
    640a:	ff 4f       	sbci	r31, 0xFF	; 255
    640c:	80 e9       	ldi	r24, 0x90	; 144
    640e:	91 e0       	ldi	r25, 0x01	; 1
    6410:	91 83       	std	Z+1, r25	; 0x01
    6412:	80 83       	st	Z, r24
    6414:	fe 01       	movw	r30, r28
    6416:	e7 54       	subi	r30, 0x47	; 71
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	80 81       	ld	r24, Z
    641c:	91 81       	ldd	r25, Z+1	; 0x01
    641e:	01 97       	sbiw	r24, 0x01	; 1
    6420:	f1 f7       	brne	.-4      	; 0x641e <autoParking+0xc9e>
    6422:	fe 01       	movw	r30, r28
    6424:	e7 54       	subi	r30, 0x47	; 71
    6426:	ff 4f       	sbci	r31, 0xFF	; 255
    6428:	91 83       	std	Z+1, r25	; 0x01
    642a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    642c:	de 01       	movw	r26, r28
    642e:	a5 54       	subi	r26, 0x45	; 69
    6430:	bf 4f       	sbci	r27, 0xFF	; 255
    6432:	fe 01       	movw	r30, r28
    6434:	e5 54       	subi	r30, 0x45	; 69
    6436:	ff 4f       	sbci	r31, 0xFF	; 255
    6438:	80 81       	ld	r24, Z
    643a:	91 81       	ldd	r25, Z+1	; 0x01
    643c:	01 97       	sbiw	r24, 0x01	; 1
    643e:	11 96       	adiw	r26, 0x01	; 1
    6440:	9c 93       	st	X, r25
    6442:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6444:	fe 01       	movw	r30, r28
    6446:	e5 54       	subi	r30, 0x45	; 69
    6448:	ff 4f       	sbci	r31, 0xFF	; 255
    644a:	80 81       	ld	r24, Z
    644c:	91 81       	ldd	r25, Z+1	; 0x01
    644e:	00 97       	sbiw	r24, 0x00	; 0
    6450:	d1 f6       	brne	.-76     	; 0x6406 <autoParking+0xc86>
    6452:	27 c0       	rjmp	.+78     	; 0x64a2 <autoParking+0xd22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6454:	8e 01       	movw	r16, r28
    6456:	05 54       	subi	r16, 0x45	; 69
    6458:	1f 4f       	sbci	r17, 0xFF	; 255
    645a:	fe 01       	movw	r30, r28
    645c:	e3 54       	subi	r30, 0x43	; 67
    645e:	ff 4f       	sbci	r31, 0xFF	; 255
    6460:	60 81       	ld	r22, Z
    6462:	71 81       	ldd	r23, Z+1	; 0x01
    6464:	82 81       	ldd	r24, Z+2	; 0x02
    6466:	93 81       	ldd	r25, Z+3	; 0x03
    6468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    646c:	dc 01       	movw	r26, r24
    646e:	cb 01       	movw	r24, r22
    6470:	f8 01       	movw	r30, r16
    6472:	91 83       	std	Z+1, r25	; 0x01
    6474:	80 83       	st	Z, r24
    6476:	de 01       	movw	r26, r28
    6478:	a9 54       	subi	r26, 0x49	; 73
    647a:	bf 4f       	sbci	r27, 0xFF	; 255
    647c:	fe 01       	movw	r30, r28
    647e:	e5 54       	subi	r30, 0x45	; 69
    6480:	ff 4f       	sbci	r31, 0xFF	; 255
    6482:	80 81       	ld	r24, Z
    6484:	91 81       	ldd	r25, Z+1	; 0x01
    6486:	8d 93       	st	X+, r24
    6488:	9c 93       	st	X, r25
    648a:	fe 01       	movw	r30, r28
    648c:	e9 54       	subi	r30, 0x49	; 73
    648e:	ff 4f       	sbci	r31, 0xFF	; 255
    6490:	80 81       	ld	r24, Z
    6492:	91 81       	ldd	r25, Z+1	; 0x01
    6494:	01 97       	sbiw	r24, 0x01	; 1
    6496:	f1 f7       	brne	.-4      	; 0x6494 <autoParking+0xd14>
    6498:	fe 01       	movw	r30, r28
    649a:	e9 54       	subi	r30, 0x49	; 73
    649c:	ff 4f       	sbci	r31, 0xFF	; 255
    649e:	91 83       	std	Z+1, r25	; 0x01
    64a0:	80 83       	st	Z, r24
			_delay_ms(500);

			Backward();
    64a2:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    64a6:	fe 01       	movw	r30, r28
    64a8:	ed 54       	subi	r30, 0x4D	; 77
    64aa:	ff 4f       	sbci	r31, 0xFF	; 255
    64ac:	80 e0       	ldi	r24, 0x00	; 0
    64ae:	90 e0       	ldi	r25, 0x00	; 0
    64b0:	a1 e6       	ldi	r26, 0x61	; 97
    64b2:	b4 e4       	ldi	r27, 0x44	; 68
    64b4:	80 83       	st	Z, r24
    64b6:	91 83       	std	Z+1, r25	; 0x01
    64b8:	a2 83       	std	Z+2, r26	; 0x02
    64ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64bc:	8e 01       	movw	r16, r28
    64be:	01 55       	subi	r16, 0x51	; 81
    64c0:	1f 4f       	sbci	r17, 0xFF	; 255
    64c2:	fe 01       	movw	r30, r28
    64c4:	ed 54       	subi	r30, 0x4D	; 77
    64c6:	ff 4f       	sbci	r31, 0xFF	; 255
    64c8:	60 81       	ld	r22, Z
    64ca:	71 81       	ldd	r23, Z+1	; 0x01
    64cc:	82 81       	ldd	r24, Z+2	; 0x02
    64ce:	93 81       	ldd	r25, Z+3	; 0x03
    64d0:	20 e0       	ldi	r18, 0x00	; 0
    64d2:	30 e0       	ldi	r19, 0x00	; 0
    64d4:	4a e7       	ldi	r20, 0x7A	; 122
    64d6:	55 e4       	ldi	r21, 0x45	; 69
    64d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64dc:	dc 01       	movw	r26, r24
    64de:	cb 01       	movw	r24, r22
    64e0:	f8 01       	movw	r30, r16
    64e2:	80 83       	st	Z, r24
    64e4:	91 83       	std	Z+1, r25	; 0x01
    64e6:	a2 83       	std	Z+2, r26	; 0x02
    64e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    64ea:	fe 01       	movw	r30, r28
    64ec:	e1 55       	subi	r30, 0x51	; 81
    64ee:	ff 4f       	sbci	r31, 0xFF	; 255
    64f0:	60 81       	ld	r22, Z
    64f2:	71 81       	ldd	r23, Z+1	; 0x01
    64f4:	82 81       	ldd	r24, Z+2	; 0x02
    64f6:	93 81       	ldd	r25, Z+3	; 0x03
    64f8:	20 e0       	ldi	r18, 0x00	; 0
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	40 e8       	ldi	r20, 0x80	; 128
    64fe:	5f e3       	ldi	r21, 0x3F	; 63
    6500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6504:	88 23       	and	r24, r24
    6506:	44 f4       	brge	.+16     	; 0x6518 <autoParking+0xd98>
		__ticks = 1;
    6508:	fe 01       	movw	r30, r28
    650a:	e3 55       	subi	r30, 0x53	; 83
    650c:	ff 4f       	sbci	r31, 0xFF	; 255
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	91 83       	std	Z+1, r25	; 0x01
    6514:	80 83       	st	Z, r24
    6516:	64 c0       	rjmp	.+200    	; 0x65e0 <autoParking+0xe60>
	else if (__tmp > 65535)
    6518:	fe 01       	movw	r30, r28
    651a:	e1 55       	subi	r30, 0x51	; 81
    651c:	ff 4f       	sbci	r31, 0xFF	; 255
    651e:	60 81       	ld	r22, Z
    6520:	71 81       	ldd	r23, Z+1	; 0x01
    6522:	82 81       	ldd	r24, Z+2	; 0x02
    6524:	93 81       	ldd	r25, Z+3	; 0x03
    6526:	20 e0       	ldi	r18, 0x00	; 0
    6528:	3f ef       	ldi	r19, 0xFF	; 255
    652a:	4f e7       	ldi	r20, 0x7F	; 127
    652c:	57 e4       	ldi	r21, 0x47	; 71
    652e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6532:	18 16       	cp	r1, r24
    6534:	0c f0       	brlt	.+2      	; 0x6538 <autoParking+0xdb8>
    6536:	43 c0       	rjmp	.+134    	; 0x65be <autoParking+0xe3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6538:	fe 01       	movw	r30, r28
    653a:	ed 54       	subi	r30, 0x4D	; 77
    653c:	ff 4f       	sbci	r31, 0xFF	; 255
    653e:	60 81       	ld	r22, Z
    6540:	71 81       	ldd	r23, Z+1	; 0x01
    6542:	82 81       	ldd	r24, Z+2	; 0x02
    6544:	93 81       	ldd	r25, Z+3	; 0x03
    6546:	20 e0       	ldi	r18, 0x00	; 0
    6548:	30 e0       	ldi	r19, 0x00	; 0
    654a:	40 e2       	ldi	r20, 0x20	; 32
    654c:	51 e4       	ldi	r21, 0x41	; 65
    654e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6552:	dc 01       	movw	r26, r24
    6554:	cb 01       	movw	r24, r22
    6556:	8e 01       	movw	r16, r28
    6558:	03 55       	subi	r16, 0x53	; 83
    655a:	1f 4f       	sbci	r17, 0xFF	; 255
    655c:	bc 01       	movw	r22, r24
    655e:	cd 01       	movw	r24, r26
    6560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6564:	dc 01       	movw	r26, r24
    6566:	cb 01       	movw	r24, r22
    6568:	f8 01       	movw	r30, r16
    656a:	91 83       	std	Z+1, r25	; 0x01
    656c:	80 83       	st	Z, r24
    656e:	1f c0       	rjmp	.+62     	; 0x65ae <autoParking+0xe2e>
    6570:	fe 01       	movw	r30, r28
    6572:	e5 55       	subi	r30, 0x55	; 85
    6574:	ff 4f       	sbci	r31, 0xFF	; 255
    6576:	80 e9       	ldi	r24, 0x90	; 144
    6578:	91 e0       	ldi	r25, 0x01	; 1
    657a:	91 83       	std	Z+1, r25	; 0x01
    657c:	80 83       	st	Z, r24
    657e:	fe 01       	movw	r30, r28
    6580:	e5 55       	subi	r30, 0x55	; 85
    6582:	ff 4f       	sbci	r31, 0xFF	; 255
    6584:	80 81       	ld	r24, Z
    6586:	91 81       	ldd	r25, Z+1	; 0x01
    6588:	01 97       	sbiw	r24, 0x01	; 1
    658a:	f1 f7       	brne	.-4      	; 0x6588 <autoParking+0xe08>
    658c:	fe 01       	movw	r30, r28
    658e:	e5 55       	subi	r30, 0x55	; 85
    6590:	ff 4f       	sbci	r31, 0xFF	; 255
    6592:	91 83       	std	Z+1, r25	; 0x01
    6594:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6596:	de 01       	movw	r26, r28
    6598:	a3 55       	subi	r26, 0x53	; 83
    659a:	bf 4f       	sbci	r27, 0xFF	; 255
    659c:	fe 01       	movw	r30, r28
    659e:	e3 55       	subi	r30, 0x53	; 83
    65a0:	ff 4f       	sbci	r31, 0xFF	; 255
    65a2:	80 81       	ld	r24, Z
    65a4:	91 81       	ldd	r25, Z+1	; 0x01
    65a6:	01 97       	sbiw	r24, 0x01	; 1
    65a8:	11 96       	adiw	r26, 0x01	; 1
    65aa:	9c 93       	st	X, r25
    65ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65ae:	fe 01       	movw	r30, r28
    65b0:	e3 55       	subi	r30, 0x53	; 83
    65b2:	ff 4f       	sbci	r31, 0xFF	; 255
    65b4:	80 81       	ld	r24, Z
    65b6:	91 81       	ldd	r25, Z+1	; 0x01
    65b8:	00 97       	sbiw	r24, 0x00	; 0
    65ba:	d1 f6       	brne	.-76     	; 0x6570 <autoParking+0xdf0>
    65bc:	27 c0       	rjmp	.+78     	; 0x660c <autoParking+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65be:	8e 01       	movw	r16, r28
    65c0:	03 55       	subi	r16, 0x53	; 83
    65c2:	1f 4f       	sbci	r17, 0xFF	; 255
    65c4:	fe 01       	movw	r30, r28
    65c6:	e1 55       	subi	r30, 0x51	; 81
    65c8:	ff 4f       	sbci	r31, 0xFF	; 255
    65ca:	60 81       	ld	r22, Z
    65cc:	71 81       	ldd	r23, Z+1	; 0x01
    65ce:	82 81       	ldd	r24, Z+2	; 0x02
    65d0:	93 81       	ldd	r25, Z+3	; 0x03
    65d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65d6:	dc 01       	movw	r26, r24
    65d8:	cb 01       	movw	r24, r22
    65da:	f8 01       	movw	r30, r16
    65dc:	91 83       	std	Z+1, r25	; 0x01
    65de:	80 83       	st	Z, r24
    65e0:	de 01       	movw	r26, r28
    65e2:	a7 55       	subi	r26, 0x57	; 87
    65e4:	bf 4f       	sbci	r27, 0xFF	; 255
    65e6:	fe 01       	movw	r30, r28
    65e8:	e3 55       	subi	r30, 0x53	; 83
    65ea:	ff 4f       	sbci	r31, 0xFF	; 255
    65ec:	80 81       	ld	r24, Z
    65ee:	91 81       	ldd	r25, Z+1	; 0x01
    65f0:	8d 93       	st	X+, r24
    65f2:	9c 93       	st	X, r25
    65f4:	fe 01       	movw	r30, r28
    65f6:	e7 55       	subi	r30, 0x57	; 87
    65f8:	ff 4f       	sbci	r31, 0xFF	; 255
    65fa:	80 81       	ld	r24, Z
    65fc:	91 81       	ldd	r25, Z+1	; 0x01
    65fe:	01 97       	sbiw	r24, 0x01	; 1
    6600:	f1 f7       	brne	.-4      	; 0x65fe <autoParking+0xe7e>
    6602:	fe 01       	movw	r30, r28
    6604:	e7 55       	subi	r30, 0x57	; 87
    6606:	ff 4f       	sbci	r31, 0xFF	; 255
    6608:	91 83       	std	Z+1, r25	; 0x01
    660a:	80 83       	st	Z, r24
			_delay_ms(900);

			Stop();
    660c:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
    6610:	fe 01       	movw	r30, r28
    6612:	eb 55       	subi	r30, 0x5B	; 91
    6614:	ff 4f       	sbci	r31, 0xFF	; 255
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	aa ef       	ldi	r26, 0xFA	; 250
    661c:	b3 e4       	ldi	r27, 0x43	; 67
    661e:	80 83       	st	Z, r24
    6620:	91 83       	std	Z+1, r25	; 0x01
    6622:	a2 83       	std	Z+2, r26	; 0x02
    6624:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6626:	8e 01       	movw	r16, r28
    6628:	0f 55       	subi	r16, 0x5F	; 95
    662a:	1f 4f       	sbci	r17, 0xFF	; 255
    662c:	fe 01       	movw	r30, r28
    662e:	eb 55       	subi	r30, 0x5B	; 91
    6630:	ff 4f       	sbci	r31, 0xFF	; 255
    6632:	60 81       	ld	r22, Z
    6634:	71 81       	ldd	r23, Z+1	; 0x01
    6636:	82 81       	ldd	r24, Z+2	; 0x02
    6638:	93 81       	ldd	r25, Z+3	; 0x03
    663a:	20 e0       	ldi	r18, 0x00	; 0
    663c:	30 e0       	ldi	r19, 0x00	; 0
    663e:	4a e7       	ldi	r20, 0x7A	; 122
    6640:	55 e4       	ldi	r21, 0x45	; 69
    6642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6646:	dc 01       	movw	r26, r24
    6648:	cb 01       	movw	r24, r22
    664a:	f8 01       	movw	r30, r16
    664c:	80 83       	st	Z, r24
    664e:	91 83       	std	Z+1, r25	; 0x01
    6650:	a2 83       	std	Z+2, r26	; 0x02
    6652:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6654:	fe 01       	movw	r30, r28
    6656:	ef 55       	subi	r30, 0x5F	; 95
    6658:	ff 4f       	sbci	r31, 0xFF	; 255
    665a:	60 81       	ld	r22, Z
    665c:	71 81       	ldd	r23, Z+1	; 0x01
    665e:	82 81       	ldd	r24, Z+2	; 0x02
    6660:	93 81       	ldd	r25, Z+3	; 0x03
    6662:	20 e0       	ldi	r18, 0x00	; 0
    6664:	30 e0       	ldi	r19, 0x00	; 0
    6666:	40 e8       	ldi	r20, 0x80	; 128
    6668:	5f e3       	ldi	r21, 0x3F	; 63
    666a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    666e:	88 23       	and	r24, r24
    6670:	44 f4       	brge	.+16     	; 0x6682 <autoParking+0xf02>
		__ticks = 1;
    6672:	fe 01       	movw	r30, r28
    6674:	e1 56       	subi	r30, 0x61	; 97
    6676:	ff 4f       	sbci	r31, 0xFF	; 255
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	91 83       	std	Z+1, r25	; 0x01
    667e:	80 83       	st	Z, r24
    6680:	64 c0       	rjmp	.+200    	; 0x674a <autoParking+0xfca>
	else if (__tmp > 65535)
    6682:	fe 01       	movw	r30, r28
    6684:	ef 55       	subi	r30, 0x5F	; 95
    6686:	ff 4f       	sbci	r31, 0xFF	; 255
    6688:	60 81       	ld	r22, Z
    668a:	71 81       	ldd	r23, Z+1	; 0x01
    668c:	82 81       	ldd	r24, Z+2	; 0x02
    668e:	93 81       	ldd	r25, Z+3	; 0x03
    6690:	20 e0       	ldi	r18, 0x00	; 0
    6692:	3f ef       	ldi	r19, 0xFF	; 255
    6694:	4f e7       	ldi	r20, 0x7F	; 127
    6696:	57 e4       	ldi	r21, 0x47	; 71
    6698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    669c:	18 16       	cp	r1, r24
    669e:	0c f0       	brlt	.+2      	; 0x66a2 <autoParking+0xf22>
    66a0:	43 c0       	rjmp	.+134    	; 0x6728 <autoParking+0xfa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66a2:	fe 01       	movw	r30, r28
    66a4:	eb 55       	subi	r30, 0x5B	; 91
    66a6:	ff 4f       	sbci	r31, 0xFF	; 255
    66a8:	60 81       	ld	r22, Z
    66aa:	71 81       	ldd	r23, Z+1	; 0x01
    66ac:	82 81       	ldd	r24, Z+2	; 0x02
    66ae:	93 81       	ldd	r25, Z+3	; 0x03
    66b0:	20 e0       	ldi	r18, 0x00	; 0
    66b2:	30 e0       	ldi	r19, 0x00	; 0
    66b4:	40 e2       	ldi	r20, 0x20	; 32
    66b6:	51 e4       	ldi	r21, 0x41	; 65
    66b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66bc:	dc 01       	movw	r26, r24
    66be:	cb 01       	movw	r24, r22
    66c0:	8e 01       	movw	r16, r28
    66c2:	01 56       	subi	r16, 0x61	; 97
    66c4:	1f 4f       	sbci	r17, 0xFF	; 255
    66c6:	bc 01       	movw	r22, r24
    66c8:	cd 01       	movw	r24, r26
    66ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66ce:	dc 01       	movw	r26, r24
    66d0:	cb 01       	movw	r24, r22
    66d2:	f8 01       	movw	r30, r16
    66d4:	91 83       	std	Z+1, r25	; 0x01
    66d6:	80 83       	st	Z, r24
    66d8:	1f c0       	rjmp	.+62     	; 0x6718 <autoParking+0xf98>
    66da:	fe 01       	movw	r30, r28
    66dc:	e3 56       	subi	r30, 0x63	; 99
    66de:	ff 4f       	sbci	r31, 0xFF	; 255
    66e0:	80 e9       	ldi	r24, 0x90	; 144
    66e2:	91 e0       	ldi	r25, 0x01	; 1
    66e4:	91 83       	std	Z+1, r25	; 0x01
    66e6:	80 83       	st	Z, r24
    66e8:	fe 01       	movw	r30, r28
    66ea:	e3 56       	subi	r30, 0x63	; 99
    66ec:	ff 4f       	sbci	r31, 0xFF	; 255
    66ee:	80 81       	ld	r24, Z
    66f0:	91 81       	ldd	r25, Z+1	; 0x01
    66f2:	01 97       	sbiw	r24, 0x01	; 1
    66f4:	f1 f7       	brne	.-4      	; 0x66f2 <autoParking+0xf72>
    66f6:	fe 01       	movw	r30, r28
    66f8:	e3 56       	subi	r30, 0x63	; 99
    66fa:	ff 4f       	sbci	r31, 0xFF	; 255
    66fc:	91 83       	std	Z+1, r25	; 0x01
    66fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6700:	de 01       	movw	r26, r28
    6702:	a1 56       	subi	r26, 0x61	; 97
    6704:	bf 4f       	sbci	r27, 0xFF	; 255
    6706:	fe 01       	movw	r30, r28
    6708:	e1 56       	subi	r30, 0x61	; 97
    670a:	ff 4f       	sbci	r31, 0xFF	; 255
    670c:	80 81       	ld	r24, Z
    670e:	91 81       	ldd	r25, Z+1	; 0x01
    6710:	01 97       	sbiw	r24, 0x01	; 1
    6712:	11 96       	adiw	r26, 0x01	; 1
    6714:	9c 93       	st	X, r25
    6716:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6718:	fe 01       	movw	r30, r28
    671a:	e1 56       	subi	r30, 0x61	; 97
    671c:	ff 4f       	sbci	r31, 0xFF	; 255
    671e:	80 81       	ld	r24, Z
    6720:	91 81       	ldd	r25, Z+1	; 0x01
    6722:	00 97       	sbiw	r24, 0x00	; 0
    6724:	d1 f6       	brne	.-76     	; 0x66da <autoParking+0xf5a>
    6726:	27 c0       	rjmp	.+78     	; 0x6776 <autoParking+0xff6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6728:	8e 01       	movw	r16, r28
    672a:	01 56       	subi	r16, 0x61	; 97
    672c:	1f 4f       	sbci	r17, 0xFF	; 255
    672e:	fe 01       	movw	r30, r28
    6730:	ef 55       	subi	r30, 0x5F	; 95
    6732:	ff 4f       	sbci	r31, 0xFF	; 255
    6734:	60 81       	ld	r22, Z
    6736:	71 81       	ldd	r23, Z+1	; 0x01
    6738:	82 81       	ldd	r24, Z+2	; 0x02
    673a:	93 81       	ldd	r25, Z+3	; 0x03
    673c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6740:	dc 01       	movw	r26, r24
    6742:	cb 01       	movw	r24, r22
    6744:	f8 01       	movw	r30, r16
    6746:	91 83       	std	Z+1, r25	; 0x01
    6748:	80 83       	st	Z, r24
    674a:	de 01       	movw	r26, r28
    674c:	a5 56       	subi	r26, 0x65	; 101
    674e:	bf 4f       	sbci	r27, 0xFF	; 255
    6750:	fe 01       	movw	r30, r28
    6752:	e1 56       	subi	r30, 0x61	; 97
    6754:	ff 4f       	sbci	r31, 0xFF	; 255
    6756:	80 81       	ld	r24, Z
    6758:	91 81       	ldd	r25, Z+1	; 0x01
    675a:	8d 93       	st	X+, r24
    675c:	9c 93       	st	X, r25
    675e:	fe 01       	movw	r30, r28
    6760:	e5 56       	subi	r30, 0x65	; 101
    6762:	ff 4f       	sbci	r31, 0xFF	; 255
    6764:	80 81       	ld	r24, Z
    6766:	91 81       	ldd	r25, Z+1	; 0x01
    6768:	01 97       	sbiw	r24, 0x01	; 1
    676a:	f1 f7       	brne	.-4      	; 0x6768 <autoParking+0xfe8>
    676c:	fe 01       	movw	r30, r28
    676e:	e5 56       	subi	r30, 0x65	; 101
    6770:	ff 4f       	sbci	r31, 0xFF	; 255
    6772:	91 83       	std	Z+1, r25	; 0x01
    6774:	80 83       	st	Z, r24

			_delay_ms(500);

			Right_Forward_Parking(100);
    6776:	84 e6       	ldi	r24, 0x64	; 100
    6778:	0e 94 ed 19 	call	0x33da	; 0x33da <Right_Forward_Parking>
    677c:	fe 01       	movw	r30, r28
    677e:	e9 56       	subi	r30, 0x69	; 105
    6780:	ff 4f       	sbci	r31, 0xFF	; 255
    6782:	80 e0       	ldi	r24, 0x00	; 0
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	af e2       	ldi	r26, 0x2F	; 47
    6788:	b4 e4       	ldi	r27, 0x44	; 68
    678a:	80 83       	st	Z, r24
    678c:	91 83       	std	Z+1, r25	; 0x01
    678e:	a2 83       	std	Z+2, r26	; 0x02
    6790:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6792:	8e 01       	movw	r16, r28
    6794:	0d 56       	subi	r16, 0x6D	; 109
    6796:	1f 4f       	sbci	r17, 0xFF	; 255
    6798:	fe 01       	movw	r30, r28
    679a:	e9 56       	subi	r30, 0x69	; 105
    679c:	ff 4f       	sbci	r31, 0xFF	; 255
    679e:	60 81       	ld	r22, Z
    67a0:	71 81       	ldd	r23, Z+1	; 0x01
    67a2:	82 81       	ldd	r24, Z+2	; 0x02
    67a4:	93 81       	ldd	r25, Z+3	; 0x03
    67a6:	20 e0       	ldi	r18, 0x00	; 0
    67a8:	30 e0       	ldi	r19, 0x00	; 0
    67aa:	4a e7       	ldi	r20, 0x7A	; 122
    67ac:	55 e4       	ldi	r21, 0x45	; 69
    67ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67b2:	dc 01       	movw	r26, r24
    67b4:	cb 01       	movw	r24, r22
    67b6:	f8 01       	movw	r30, r16
    67b8:	80 83       	st	Z, r24
    67ba:	91 83       	std	Z+1, r25	; 0x01
    67bc:	a2 83       	std	Z+2, r26	; 0x02
    67be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67c0:	fe 01       	movw	r30, r28
    67c2:	ed 56       	subi	r30, 0x6D	; 109
    67c4:	ff 4f       	sbci	r31, 0xFF	; 255
    67c6:	60 81       	ld	r22, Z
    67c8:	71 81       	ldd	r23, Z+1	; 0x01
    67ca:	82 81       	ldd	r24, Z+2	; 0x02
    67cc:	93 81       	ldd	r25, Z+3	; 0x03
    67ce:	20 e0       	ldi	r18, 0x00	; 0
    67d0:	30 e0       	ldi	r19, 0x00	; 0
    67d2:	40 e8       	ldi	r20, 0x80	; 128
    67d4:	5f e3       	ldi	r21, 0x3F	; 63
    67d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67da:	88 23       	and	r24, r24
    67dc:	44 f4       	brge	.+16     	; 0x67ee <autoParking+0x106e>
		__ticks = 1;
    67de:	fe 01       	movw	r30, r28
    67e0:	ef 56       	subi	r30, 0x6F	; 111
    67e2:	ff 4f       	sbci	r31, 0xFF	; 255
    67e4:	81 e0       	ldi	r24, 0x01	; 1
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	91 83       	std	Z+1, r25	; 0x01
    67ea:	80 83       	st	Z, r24
    67ec:	64 c0       	rjmp	.+200    	; 0x68b6 <autoParking+0x1136>
	else if (__tmp > 65535)
    67ee:	fe 01       	movw	r30, r28
    67f0:	ed 56       	subi	r30, 0x6D	; 109
    67f2:	ff 4f       	sbci	r31, 0xFF	; 255
    67f4:	60 81       	ld	r22, Z
    67f6:	71 81       	ldd	r23, Z+1	; 0x01
    67f8:	82 81       	ldd	r24, Z+2	; 0x02
    67fa:	93 81       	ldd	r25, Z+3	; 0x03
    67fc:	20 e0       	ldi	r18, 0x00	; 0
    67fe:	3f ef       	ldi	r19, 0xFF	; 255
    6800:	4f e7       	ldi	r20, 0x7F	; 127
    6802:	57 e4       	ldi	r21, 0x47	; 71
    6804:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6808:	18 16       	cp	r1, r24
    680a:	0c f0       	brlt	.+2      	; 0x680e <autoParking+0x108e>
    680c:	43 c0       	rjmp	.+134    	; 0x6894 <autoParking+0x1114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    680e:	fe 01       	movw	r30, r28
    6810:	e9 56       	subi	r30, 0x69	; 105
    6812:	ff 4f       	sbci	r31, 0xFF	; 255
    6814:	60 81       	ld	r22, Z
    6816:	71 81       	ldd	r23, Z+1	; 0x01
    6818:	82 81       	ldd	r24, Z+2	; 0x02
    681a:	93 81       	ldd	r25, Z+3	; 0x03
    681c:	20 e0       	ldi	r18, 0x00	; 0
    681e:	30 e0       	ldi	r19, 0x00	; 0
    6820:	40 e2       	ldi	r20, 0x20	; 32
    6822:	51 e4       	ldi	r21, 0x41	; 65
    6824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6828:	dc 01       	movw	r26, r24
    682a:	cb 01       	movw	r24, r22
    682c:	8e 01       	movw	r16, r28
    682e:	0f 56       	subi	r16, 0x6F	; 111
    6830:	1f 4f       	sbci	r17, 0xFF	; 255
    6832:	bc 01       	movw	r22, r24
    6834:	cd 01       	movw	r24, r26
    6836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    683a:	dc 01       	movw	r26, r24
    683c:	cb 01       	movw	r24, r22
    683e:	f8 01       	movw	r30, r16
    6840:	91 83       	std	Z+1, r25	; 0x01
    6842:	80 83       	st	Z, r24
    6844:	1f c0       	rjmp	.+62     	; 0x6884 <autoParking+0x1104>
    6846:	fe 01       	movw	r30, r28
    6848:	e1 57       	subi	r30, 0x71	; 113
    684a:	ff 4f       	sbci	r31, 0xFF	; 255
    684c:	80 e9       	ldi	r24, 0x90	; 144
    684e:	91 e0       	ldi	r25, 0x01	; 1
    6850:	91 83       	std	Z+1, r25	; 0x01
    6852:	80 83       	st	Z, r24
    6854:	fe 01       	movw	r30, r28
    6856:	e1 57       	subi	r30, 0x71	; 113
    6858:	ff 4f       	sbci	r31, 0xFF	; 255
    685a:	80 81       	ld	r24, Z
    685c:	91 81       	ldd	r25, Z+1	; 0x01
    685e:	01 97       	sbiw	r24, 0x01	; 1
    6860:	f1 f7       	brne	.-4      	; 0x685e <autoParking+0x10de>
    6862:	fe 01       	movw	r30, r28
    6864:	e1 57       	subi	r30, 0x71	; 113
    6866:	ff 4f       	sbci	r31, 0xFF	; 255
    6868:	91 83       	std	Z+1, r25	; 0x01
    686a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    686c:	de 01       	movw	r26, r28
    686e:	af 56       	subi	r26, 0x6F	; 111
    6870:	bf 4f       	sbci	r27, 0xFF	; 255
    6872:	fe 01       	movw	r30, r28
    6874:	ef 56       	subi	r30, 0x6F	; 111
    6876:	ff 4f       	sbci	r31, 0xFF	; 255
    6878:	80 81       	ld	r24, Z
    687a:	91 81       	ldd	r25, Z+1	; 0x01
    687c:	01 97       	sbiw	r24, 0x01	; 1
    687e:	11 96       	adiw	r26, 0x01	; 1
    6880:	9c 93       	st	X, r25
    6882:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6884:	fe 01       	movw	r30, r28
    6886:	ef 56       	subi	r30, 0x6F	; 111
    6888:	ff 4f       	sbci	r31, 0xFF	; 255
    688a:	80 81       	ld	r24, Z
    688c:	91 81       	ldd	r25, Z+1	; 0x01
    688e:	00 97       	sbiw	r24, 0x00	; 0
    6890:	d1 f6       	brne	.-76     	; 0x6846 <autoParking+0x10c6>
    6892:	27 c0       	rjmp	.+78     	; 0x68e2 <autoParking+0x1162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6894:	8e 01       	movw	r16, r28
    6896:	0f 56       	subi	r16, 0x6F	; 111
    6898:	1f 4f       	sbci	r17, 0xFF	; 255
    689a:	fe 01       	movw	r30, r28
    689c:	ed 56       	subi	r30, 0x6D	; 109
    689e:	ff 4f       	sbci	r31, 0xFF	; 255
    68a0:	60 81       	ld	r22, Z
    68a2:	71 81       	ldd	r23, Z+1	; 0x01
    68a4:	82 81       	ldd	r24, Z+2	; 0x02
    68a6:	93 81       	ldd	r25, Z+3	; 0x03
    68a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68ac:	dc 01       	movw	r26, r24
    68ae:	cb 01       	movw	r24, r22
    68b0:	f8 01       	movw	r30, r16
    68b2:	91 83       	std	Z+1, r25	; 0x01
    68b4:	80 83       	st	Z, r24
    68b6:	de 01       	movw	r26, r28
    68b8:	a3 57       	subi	r26, 0x73	; 115
    68ba:	bf 4f       	sbci	r27, 0xFF	; 255
    68bc:	fe 01       	movw	r30, r28
    68be:	ef 56       	subi	r30, 0x6F	; 111
    68c0:	ff 4f       	sbci	r31, 0xFF	; 255
    68c2:	80 81       	ld	r24, Z
    68c4:	91 81       	ldd	r25, Z+1	; 0x01
    68c6:	8d 93       	st	X+, r24
    68c8:	9c 93       	st	X, r25
    68ca:	fe 01       	movw	r30, r28
    68cc:	e3 57       	subi	r30, 0x73	; 115
    68ce:	ff 4f       	sbci	r31, 0xFF	; 255
    68d0:	80 81       	ld	r24, Z
    68d2:	91 81       	ldd	r25, Z+1	; 0x01
    68d4:	01 97       	sbiw	r24, 0x01	; 1
    68d6:	f1 f7       	brne	.-4      	; 0x68d4 <autoParking+0x1154>
    68d8:	fe 01       	movw	r30, r28
    68da:	e3 57       	subi	r30, 0x73	; 115
    68dc:	ff 4f       	sbci	r31, 0xFF	; 255
    68de:	91 83       	std	Z+1, r25	; 0x01
    68e0:	80 83       	st	Z, r24
			_delay_ms(700);
			Backward();
    68e2:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    68e6:	fe 01       	movw	r30, r28
    68e8:	e7 57       	subi	r30, 0x77	; 119
    68ea:	ff 4f       	sbci	r31, 0xFF	; 255
    68ec:	80 e0       	ldi	r24, 0x00	; 0
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	aa ef       	ldi	r26, 0xFA	; 250
    68f2:	b3 e4       	ldi	r27, 0x43	; 67
    68f4:	80 83       	st	Z, r24
    68f6:	91 83       	std	Z+1, r25	; 0x01
    68f8:	a2 83       	std	Z+2, r26	; 0x02
    68fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68fc:	8e 01       	movw	r16, r28
    68fe:	0b 57       	subi	r16, 0x7B	; 123
    6900:	1f 4f       	sbci	r17, 0xFF	; 255
    6902:	fe 01       	movw	r30, r28
    6904:	e7 57       	subi	r30, 0x77	; 119
    6906:	ff 4f       	sbci	r31, 0xFF	; 255
    6908:	60 81       	ld	r22, Z
    690a:	71 81       	ldd	r23, Z+1	; 0x01
    690c:	82 81       	ldd	r24, Z+2	; 0x02
    690e:	93 81       	ldd	r25, Z+3	; 0x03
    6910:	20 e0       	ldi	r18, 0x00	; 0
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	4a e7       	ldi	r20, 0x7A	; 122
    6916:	55 e4       	ldi	r21, 0x45	; 69
    6918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    691c:	dc 01       	movw	r26, r24
    691e:	cb 01       	movw	r24, r22
    6920:	f8 01       	movw	r30, r16
    6922:	80 83       	st	Z, r24
    6924:	91 83       	std	Z+1, r25	; 0x01
    6926:	a2 83       	std	Z+2, r26	; 0x02
    6928:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    692a:	fe 01       	movw	r30, r28
    692c:	eb 57       	subi	r30, 0x7B	; 123
    692e:	ff 4f       	sbci	r31, 0xFF	; 255
    6930:	60 81       	ld	r22, Z
    6932:	71 81       	ldd	r23, Z+1	; 0x01
    6934:	82 81       	ldd	r24, Z+2	; 0x02
    6936:	93 81       	ldd	r25, Z+3	; 0x03
    6938:	20 e0       	ldi	r18, 0x00	; 0
    693a:	30 e0       	ldi	r19, 0x00	; 0
    693c:	40 e8       	ldi	r20, 0x80	; 128
    693e:	5f e3       	ldi	r21, 0x3F	; 63
    6940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6944:	88 23       	and	r24, r24
    6946:	44 f4       	brge	.+16     	; 0x6958 <autoParking+0x11d8>
		__ticks = 1;
    6948:	fe 01       	movw	r30, r28
    694a:	ed 57       	subi	r30, 0x7D	; 125
    694c:	ff 4f       	sbci	r31, 0xFF	; 255
    694e:	81 e0       	ldi	r24, 0x01	; 1
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	91 83       	std	Z+1, r25	; 0x01
    6954:	80 83       	st	Z, r24
    6956:	64 c0       	rjmp	.+200    	; 0x6a20 <autoParking+0x12a0>
	else if (__tmp > 65535)
    6958:	fe 01       	movw	r30, r28
    695a:	eb 57       	subi	r30, 0x7B	; 123
    695c:	ff 4f       	sbci	r31, 0xFF	; 255
    695e:	60 81       	ld	r22, Z
    6960:	71 81       	ldd	r23, Z+1	; 0x01
    6962:	82 81       	ldd	r24, Z+2	; 0x02
    6964:	93 81       	ldd	r25, Z+3	; 0x03
    6966:	20 e0       	ldi	r18, 0x00	; 0
    6968:	3f ef       	ldi	r19, 0xFF	; 255
    696a:	4f e7       	ldi	r20, 0x7F	; 127
    696c:	57 e4       	ldi	r21, 0x47	; 71
    696e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6972:	18 16       	cp	r1, r24
    6974:	0c f0       	brlt	.+2      	; 0x6978 <autoParking+0x11f8>
    6976:	43 c0       	rjmp	.+134    	; 0x69fe <autoParking+0x127e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6978:	fe 01       	movw	r30, r28
    697a:	e7 57       	subi	r30, 0x77	; 119
    697c:	ff 4f       	sbci	r31, 0xFF	; 255
    697e:	60 81       	ld	r22, Z
    6980:	71 81       	ldd	r23, Z+1	; 0x01
    6982:	82 81       	ldd	r24, Z+2	; 0x02
    6984:	93 81       	ldd	r25, Z+3	; 0x03
    6986:	20 e0       	ldi	r18, 0x00	; 0
    6988:	30 e0       	ldi	r19, 0x00	; 0
    698a:	40 e2       	ldi	r20, 0x20	; 32
    698c:	51 e4       	ldi	r21, 0x41	; 65
    698e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6992:	dc 01       	movw	r26, r24
    6994:	cb 01       	movw	r24, r22
    6996:	8e 01       	movw	r16, r28
    6998:	0d 57       	subi	r16, 0x7D	; 125
    699a:	1f 4f       	sbci	r17, 0xFF	; 255
    699c:	bc 01       	movw	r22, r24
    699e:	cd 01       	movw	r24, r26
    69a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69a4:	dc 01       	movw	r26, r24
    69a6:	cb 01       	movw	r24, r22
    69a8:	f8 01       	movw	r30, r16
    69aa:	91 83       	std	Z+1, r25	; 0x01
    69ac:	80 83       	st	Z, r24
    69ae:	1f c0       	rjmp	.+62     	; 0x69ee <autoParking+0x126e>
    69b0:	fe 01       	movw	r30, r28
    69b2:	ef 57       	subi	r30, 0x7F	; 127
    69b4:	ff 4f       	sbci	r31, 0xFF	; 255
    69b6:	80 e9       	ldi	r24, 0x90	; 144
    69b8:	91 e0       	ldi	r25, 0x01	; 1
    69ba:	91 83       	std	Z+1, r25	; 0x01
    69bc:	80 83       	st	Z, r24
    69be:	fe 01       	movw	r30, r28
    69c0:	ef 57       	subi	r30, 0x7F	; 127
    69c2:	ff 4f       	sbci	r31, 0xFF	; 255
    69c4:	80 81       	ld	r24, Z
    69c6:	91 81       	ldd	r25, Z+1	; 0x01
    69c8:	01 97       	sbiw	r24, 0x01	; 1
    69ca:	f1 f7       	brne	.-4      	; 0x69c8 <autoParking+0x1248>
    69cc:	fe 01       	movw	r30, r28
    69ce:	ef 57       	subi	r30, 0x7F	; 127
    69d0:	ff 4f       	sbci	r31, 0xFF	; 255
    69d2:	91 83       	std	Z+1, r25	; 0x01
    69d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69d6:	de 01       	movw	r26, r28
    69d8:	ad 57       	subi	r26, 0x7D	; 125
    69da:	bf 4f       	sbci	r27, 0xFF	; 255
    69dc:	fe 01       	movw	r30, r28
    69de:	ed 57       	subi	r30, 0x7D	; 125
    69e0:	ff 4f       	sbci	r31, 0xFF	; 255
    69e2:	80 81       	ld	r24, Z
    69e4:	91 81       	ldd	r25, Z+1	; 0x01
    69e6:	01 97       	sbiw	r24, 0x01	; 1
    69e8:	11 96       	adiw	r26, 0x01	; 1
    69ea:	9c 93       	st	X, r25
    69ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69ee:	fe 01       	movw	r30, r28
    69f0:	ed 57       	subi	r30, 0x7D	; 125
    69f2:	ff 4f       	sbci	r31, 0xFF	; 255
    69f4:	80 81       	ld	r24, Z
    69f6:	91 81       	ldd	r25, Z+1	; 0x01
    69f8:	00 97       	sbiw	r24, 0x00	; 0
    69fa:	d1 f6       	brne	.-76     	; 0x69b0 <autoParking+0x1230>
    69fc:	27 c0       	rjmp	.+78     	; 0x6a4c <autoParking+0x12cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69fe:	8e 01       	movw	r16, r28
    6a00:	0d 57       	subi	r16, 0x7D	; 125
    6a02:	1f 4f       	sbci	r17, 0xFF	; 255
    6a04:	fe 01       	movw	r30, r28
    6a06:	eb 57       	subi	r30, 0x7B	; 123
    6a08:	ff 4f       	sbci	r31, 0xFF	; 255
    6a0a:	60 81       	ld	r22, Z
    6a0c:	71 81       	ldd	r23, Z+1	; 0x01
    6a0e:	82 81       	ldd	r24, Z+2	; 0x02
    6a10:	93 81       	ldd	r25, Z+3	; 0x03
    6a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a16:	dc 01       	movw	r26, r24
    6a18:	cb 01       	movw	r24, r22
    6a1a:	f8 01       	movw	r30, r16
    6a1c:	91 83       	std	Z+1, r25	; 0x01
    6a1e:	80 83       	st	Z, r24
    6a20:	de 01       	movw	r26, r28
    6a22:	a1 58       	subi	r26, 0x81	; 129
    6a24:	bf 4f       	sbci	r27, 0xFF	; 255
    6a26:	fe 01       	movw	r30, r28
    6a28:	ed 57       	subi	r30, 0x7D	; 125
    6a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a2c:	80 81       	ld	r24, Z
    6a2e:	91 81       	ldd	r25, Z+1	; 0x01
    6a30:	8d 93       	st	X+, r24
    6a32:	9c 93       	st	X, r25
    6a34:	fe 01       	movw	r30, r28
    6a36:	e1 58       	subi	r30, 0x81	; 129
    6a38:	ff 4f       	sbci	r31, 0xFF	; 255
    6a3a:	80 81       	ld	r24, Z
    6a3c:	91 81       	ldd	r25, Z+1	; 0x01
    6a3e:	01 97       	sbiw	r24, 0x01	; 1
    6a40:	f1 f7       	brne	.-4      	; 0x6a3e <autoParking+0x12be>
    6a42:	fe 01       	movw	r30, r28
    6a44:	e1 58       	subi	r30, 0x81	; 129
    6a46:	ff 4f       	sbci	r31, 0xFF	; 255
    6a48:	91 83       	std	Z+1, r25	; 0x01
    6a4a:	80 83       	st	Z, r24
			_delay_ms(500);
			Right_Forward_Parking(100);
    6a4c:	84 e6       	ldi	r24, 0x64	; 100
    6a4e:	0e 94 ed 19 	call	0x33da	; 0x33da <Right_Forward_Parking>
    6a52:	fe 01       	movw	r30, r28
    6a54:	e5 58       	subi	r30, 0x85	; 133
    6a56:	ff 4f       	sbci	r31, 0xFF	; 255
    6a58:	80 e0       	ldi	r24, 0x00	; 0
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	af e2       	ldi	r26, 0x2F	; 47
    6a5e:	b4 e4       	ldi	r27, 0x44	; 68
    6a60:	80 83       	st	Z, r24
    6a62:	91 83       	std	Z+1, r25	; 0x01
    6a64:	a2 83       	std	Z+2, r26	; 0x02
    6a66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a68:	8e 01       	movw	r16, r28
    6a6a:	09 58       	subi	r16, 0x89	; 137
    6a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    6a6e:	fe 01       	movw	r30, r28
    6a70:	e5 58       	subi	r30, 0x85	; 133
    6a72:	ff 4f       	sbci	r31, 0xFF	; 255
    6a74:	60 81       	ld	r22, Z
    6a76:	71 81       	ldd	r23, Z+1	; 0x01
    6a78:	82 81       	ldd	r24, Z+2	; 0x02
    6a7a:	93 81       	ldd	r25, Z+3	; 0x03
    6a7c:	20 e0       	ldi	r18, 0x00	; 0
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	4a e7       	ldi	r20, 0x7A	; 122
    6a82:	55 e4       	ldi	r21, 0x45	; 69
    6a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a88:	dc 01       	movw	r26, r24
    6a8a:	cb 01       	movw	r24, r22
    6a8c:	f8 01       	movw	r30, r16
    6a8e:	80 83       	st	Z, r24
    6a90:	91 83       	std	Z+1, r25	; 0x01
    6a92:	a2 83       	std	Z+2, r26	; 0x02
    6a94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a96:	fe 01       	movw	r30, r28
    6a98:	e9 58       	subi	r30, 0x89	; 137
    6a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a9c:	60 81       	ld	r22, Z
    6a9e:	71 81       	ldd	r23, Z+1	; 0x01
    6aa0:	82 81       	ldd	r24, Z+2	; 0x02
    6aa2:	93 81       	ldd	r25, Z+3	; 0x03
    6aa4:	20 e0       	ldi	r18, 0x00	; 0
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	40 e8       	ldi	r20, 0x80	; 128
    6aaa:	5f e3       	ldi	r21, 0x3F	; 63
    6aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6ab0:	88 23       	and	r24, r24
    6ab2:	44 f4       	brge	.+16     	; 0x6ac4 <autoParking+0x1344>
		__ticks = 1;
    6ab4:	fe 01       	movw	r30, r28
    6ab6:	eb 58       	subi	r30, 0x8B	; 139
    6ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aba:	81 e0       	ldi	r24, 0x01	; 1
    6abc:	90 e0       	ldi	r25, 0x00	; 0
    6abe:	91 83       	std	Z+1, r25	; 0x01
    6ac0:	80 83       	st	Z, r24
    6ac2:	64 c0       	rjmp	.+200    	; 0x6b8c <autoParking+0x140c>
	else if (__tmp > 65535)
    6ac4:	fe 01       	movw	r30, r28
    6ac6:	e9 58       	subi	r30, 0x89	; 137
    6ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aca:	60 81       	ld	r22, Z
    6acc:	71 81       	ldd	r23, Z+1	; 0x01
    6ace:	82 81       	ldd	r24, Z+2	; 0x02
    6ad0:	93 81       	ldd	r25, Z+3	; 0x03
    6ad2:	20 e0       	ldi	r18, 0x00	; 0
    6ad4:	3f ef       	ldi	r19, 0xFF	; 255
    6ad6:	4f e7       	ldi	r20, 0x7F	; 127
    6ad8:	57 e4       	ldi	r21, 0x47	; 71
    6ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6ade:	18 16       	cp	r1, r24
    6ae0:	0c f0       	brlt	.+2      	; 0x6ae4 <autoParking+0x1364>
    6ae2:	43 c0       	rjmp	.+134    	; 0x6b6a <autoParking+0x13ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ae4:	fe 01       	movw	r30, r28
    6ae6:	e5 58       	subi	r30, 0x85	; 133
    6ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aea:	60 81       	ld	r22, Z
    6aec:	71 81       	ldd	r23, Z+1	; 0x01
    6aee:	82 81       	ldd	r24, Z+2	; 0x02
    6af0:	93 81       	ldd	r25, Z+3	; 0x03
    6af2:	20 e0       	ldi	r18, 0x00	; 0
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	40 e2       	ldi	r20, 0x20	; 32
    6af8:	51 e4       	ldi	r21, 0x41	; 65
    6afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6afe:	dc 01       	movw	r26, r24
    6b00:	cb 01       	movw	r24, r22
    6b02:	8e 01       	movw	r16, r28
    6b04:	0b 58       	subi	r16, 0x8B	; 139
    6b06:	1f 4f       	sbci	r17, 0xFF	; 255
    6b08:	bc 01       	movw	r22, r24
    6b0a:	cd 01       	movw	r24, r26
    6b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b10:	dc 01       	movw	r26, r24
    6b12:	cb 01       	movw	r24, r22
    6b14:	f8 01       	movw	r30, r16
    6b16:	91 83       	std	Z+1, r25	; 0x01
    6b18:	80 83       	st	Z, r24
    6b1a:	1f c0       	rjmp	.+62     	; 0x6b5a <autoParking+0x13da>
    6b1c:	fe 01       	movw	r30, r28
    6b1e:	ed 58       	subi	r30, 0x8D	; 141
    6b20:	ff 4f       	sbci	r31, 0xFF	; 255
    6b22:	80 e9       	ldi	r24, 0x90	; 144
    6b24:	91 e0       	ldi	r25, 0x01	; 1
    6b26:	91 83       	std	Z+1, r25	; 0x01
    6b28:	80 83       	st	Z, r24
    6b2a:	fe 01       	movw	r30, r28
    6b2c:	ed 58       	subi	r30, 0x8D	; 141
    6b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b30:	80 81       	ld	r24, Z
    6b32:	91 81       	ldd	r25, Z+1	; 0x01
    6b34:	01 97       	sbiw	r24, 0x01	; 1
    6b36:	f1 f7       	brne	.-4      	; 0x6b34 <autoParking+0x13b4>
    6b38:	fe 01       	movw	r30, r28
    6b3a:	ed 58       	subi	r30, 0x8D	; 141
    6b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b3e:	91 83       	std	Z+1, r25	; 0x01
    6b40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b42:	de 01       	movw	r26, r28
    6b44:	ab 58       	subi	r26, 0x8B	; 139
    6b46:	bf 4f       	sbci	r27, 0xFF	; 255
    6b48:	fe 01       	movw	r30, r28
    6b4a:	eb 58       	subi	r30, 0x8B	; 139
    6b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b4e:	80 81       	ld	r24, Z
    6b50:	91 81       	ldd	r25, Z+1	; 0x01
    6b52:	01 97       	sbiw	r24, 0x01	; 1
    6b54:	11 96       	adiw	r26, 0x01	; 1
    6b56:	9c 93       	st	X, r25
    6b58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b5a:	fe 01       	movw	r30, r28
    6b5c:	eb 58       	subi	r30, 0x8B	; 139
    6b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b60:	80 81       	ld	r24, Z
    6b62:	91 81       	ldd	r25, Z+1	; 0x01
    6b64:	00 97       	sbiw	r24, 0x00	; 0
    6b66:	d1 f6       	brne	.-76     	; 0x6b1c <autoParking+0x139c>
    6b68:	27 c0       	rjmp	.+78     	; 0x6bb8 <autoParking+0x1438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b6a:	8e 01       	movw	r16, r28
    6b6c:	0b 58       	subi	r16, 0x8B	; 139
    6b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    6b70:	fe 01       	movw	r30, r28
    6b72:	e9 58       	subi	r30, 0x89	; 137
    6b74:	ff 4f       	sbci	r31, 0xFF	; 255
    6b76:	60 81       	ld	r22, Z
    6b78:	71 81       	ldd	r23, Z+1	; 0x01
    6b7a:	82 81       	ldd	r24, Z+2	; 0x02
    6b7c:	93 81       	ldd	r25, Z+3	; 0x03
    6b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b82:	dc 01       	movw	r26, r24
    6b84:	cb 01       	movw	r24, r22
    6b86:	f8 01       	movw	r30, r16
    6b88:	91 83       	std	Z+1, r25	; 0x01
    6b8a:	80 83       	st	Z, r24
    6b8c:	de 01       	movw	r26, r28
    6b8e:	af 58       	subi	r26, 0x8F	; 143
    6b90:	bf 4f       	sbci	r27, 0xFF	; 255
    6b92:	fe 01       	movw	r30, r28
    6b94:	eb 58       	subi	r30, 0x8B	; 139
    6b96:	ff 4f       	sbci	r31, 0xFF	; 255
    6b98:	80 81       	ld	r24, Z
    6b9a:	91 81       	ldd	r25, Z+1	; 0x01
    6b9c:	8d 93       	st	X+, r24
    6b9e:	9c 93       	st	X, r25
    6ba0:	fe 01       	movw	r30, r28
    6ba2:	ef 58       	subi	r30, 0x8F	; 143
    6ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba6:	80 81       	ld	r24, Z
    6ba8:	91 81       	ldd	r25, Z+1	; 0x01
    6baa:	01 97       	sbiw	r24, 0x01	; 1
    6bac:	f1 f7       	brne	.-4      	; 0x6baa <autoParking+0x142a>
    6bae:	fe 01       	movw	r30, r28
    6bb0:	ef 58       	subi	r30, 0x8F	; 143
    6bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    6bb4:	91 83       	std	Z+1, r25	; 0x01
    6bb6:	80 83       	st	Z, r24
			_delay_ms(700);
			Backward();
    6bb8:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    6bbc:	fe 01       	movw	r30, r28
    6bbe:	e3 59       	subi	r30, 0x93	; 147
    6bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    6bc2:	80 e0       	ldi	r24, 0x00	; 0
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	aa ef       	ldi	r26, 0xFA	; 250
    6bc8:	b3 e4       	ldi	r27, 0x43	; 67
    6bca:	80 83       	st	Z, r24
    6bcc:	91 83       	std	Z+1, r25	; 0x01
    6bce:	a2 83       	std	Z+2, r26	; 0x02
    6bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bd2:	8e 01       	movw	r16, r28
    6bd4:	07 59       	subi	r16, 0x97	; 151
    6bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    6bd8:	fe 01       	movw	r30, r28
    6bda:	e3 59       	subi	r30, 0x93	; 147
    6bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    6bde:	60 81       	ld	r22, Z
    6be0:	71 81       	ldd	r23, Z+1	; 0x01
    6be2:	82 81       	ldd	r24, Z+2	; 0x02
    6be4:	93 81       	ldd	r25, Z+3	; 0x03
    6be6:	20 e0       	ldi	r18, 0x00	; 0
    6be8:	30 e0       	ldi	r19, 0x00	; 0
    6bea:	4a e7       	ldi	r20, 0x7A	; 122
    6bec:	55 e4       	ldi	r21, 0x45	; 69
    6bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bf2:	dc 01       	movw	r26, r24
    6bf4:	cb 01       	movw	r24, r22
    6bf6:	f8 01       	movw	r30, r16
    6bf8:	80 83       	st	Z, r24
    6bfa:	91 83       	std	Z+1, r25	; 0x01
    6bfc:	a2 83       	std	Z+2, r26	; 0x02
    6bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6c00:	fe 01       	movw	r30, r28
    6c02:	e7 59       	subi	r30, 0x97	; 151
    6c04:	ff 4f       	sbci	r31, 0xFF	; 255
    6c06:	60 81       	ld	r22, Z
    6c08:	71 81       	ldd	r23, Z+1	; 0x01
    6c0a:	82 81       	ldd	r24, Z+2	; 0x02
    6c0c:	93 81       	ldd	r25, Z+3	; 0x03
    6c0e:	20 e0       	ldi	r18, 0x00	; 0
    6c10:	30 e0       	ldi	r19, 0x00	; 0
    6c12:	40 e8       	ldi	r20, 0x80	; 128
    6c14:	5f e3       	ldi	r21, 0x3F	; 63
    6c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c1a:	88 23       	and	r24, r24
    6c1c:	44 f4       	brge	.+16     	; 0x6c2e <autoParking+0x14ae>
		__ticks = 1;
    6c1e:	fe 01       	movw	r30, r28
    6c20:	e9 59       	subi	r30, 0x99	; 153
    6c22:	ff 4f       	sbci	r31, 0xFF	; 255
    6c24:	81 e0       	ldi	r24, 0x01	; 1
    6c26:	90 e0       	ldi	r25, 0x00	; 0
    6c28:	91 83       	std	Z+1, r25	; 0x01
    6c2a:	80 83       	st	Z, r24
    6c2c:	64 c0       	rjmp	.+200    	; 0x6cf6 <autoParking+0x1576>
	else if (__tmp > 65535)
    6c2e:	fe 01       	movw	r30, r28
    6c30:	e7 59       	subi	r30, 0x97	; 151
    6c32:	ff 4f       	sbci	r31, 0xFF	; 255
    6c34:	60 81       	ld	r22, Z
    6c36:	71 81       	ldd	r23, Z+1	; 0x01
    6c38:	82 81       	ldd	r24, Z+2	; 0x02
    6c3a:	93 81       	ldd	r25, Z+3	; 0x03
    6c3c:	20 e0       	ldi	r18, 0x00	; 0
    6c3e:	3f ef       	ldi	r19, 0xFF	; 255
    6c40:	4f e7       	ldi	r20, 0x7F	; 127
    6c42:	57 e4       	ldi	r21, 0x47	; 71
    6c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c48:	18 16       	cp	r1, r24
    6c4a:	0c f0       	brlt	.+2      	; 0x6c4e <autoParking+0x14ce>
    6c4c:	43 c0       	rjmp	.+134    	; 0x6cd4 <autoParking+0x1554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c4e:	fe 01       	movw	r30, r28
    6c50:	e3 59       	subi	r30, 0x93	; 147
    6c52:	ff 4f       	sbci	r31, 0xFF	; 255
    6c54:	60 81       	ld	r22, Z
    6c56:	71 81       	ldd	r23, Z+1	; 0x01
    6c58:	82 81       	ldd	r24, Z+2	; 0x02
    6c5a:	93 81       	ldd	r25, Z+3	; 0x03
    6c5c:	20 e0       	ldi	r18, 0x00	; 0
    6c5e:	30 e0       	ldi	r19, 0x00	; 0
    6c60:	40 e2       	ldi	r20, 0x20	; 32
    6c62:	51 e4       	ldi	r21, 0x41	; 65
    6c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c68:	dc 01       	movw	r26, r24
    6c6a:	cb 01       	movw	r24, r22
    6c6c:	8e 01       	movw	r16, r28
    6c6e:	09 59       	subi	r16, 0x99	; 153
    6c70:	1f 4f       	sbci	r17, 0xFF	; 255
    6c72:	bc 01       	movw	r22, r24
    6c74:	cd 01       	movw	r24, r26
    6c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c7a:	dc 01       	movw	r26, r24
    6c7c:	cb 01       	movw	r24, r22
    6c7e:	f8 01       	movw	r30, r16
    6c80:	91 83       	std	Z+1, r25	; 0x01
    6c82:	80 83       	st	Z, r24
    6c84:	1f c0       	rjmp	.+62     	; 0x6cc4 <autoParking+0x1544>
    6c86:	fe 01       	movw	r30, r28
    6c88:	eb 59       	subi	r30, 0x9B	; 155
    6c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c8c:	80 e9       	ldi	r24, 0x90	; 144
    6c8e:	91 e0       	ldi	r25, 0x01	; 1
    6c90:	91 83       	std	Z+1, r25	; 0x01
    6c92:	80 83       	st	Z, r24
    6c94:	fe 01       	movw	r30, r28
    6c96:	eb 59       	subi	r30, 0x9B	; 155
    6c98:	ff 4f       	sbci	r31, 0xFF	; 255
    6c9a:	80 81       	ld	r24, Z
    6c9c:	91 81       	ldd	r25, Z+1	; 0x01
    6c9e:	01 97       	sbiw	r24, 0x01	; 1
    6ca0:	f1 f7       	brne	.-4      	; 0x6c9e <autoParking+0x151e>
    6ca2:	fe 01       	movw	r30, r28
    6ca4:	eb 59       	subi	r30, 0x9B	; 155
    6ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ca8:	91 83       	std	Z+1, r25	; 0x01
    6caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6cac:	de 01       	movw	r26, r28
    6cae:	a9 59       	subi	r26, 0x99	; 153
    6cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    6cb2:	fe 01       	movw	r30, r28
    6cb4:	e9 59       	subi	r30, 0x99	; 153
    6cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cb8:	80 81       	ld	r24, Z
    6cba:	91 81       	ldd	r25, Z+1	; 0x01
    6cbc:	01 97       	sbiw	r24, 0x01	; 1
    6cbe:	11 96       	adiw	r26, 0x01	; 1
    6cc0:	9c 93       	st	X, r25
    6cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cc4:	fe 01       	movw	r30, r28
    6cc6:	e9 59       	subi	r30, 0x99	; 153
    6cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    6cca:	80 81       	ld	r24, Z
    6ccc:	91 81       	ldd	r25, Z+1	; 0x01
    6cce:	00 97       	sbiw	r24, 0x00	; 0
    6cd0:	d1 f6       	brne	.-76     	; 0x6c86 <autoParking+0x1506>
    6cd2:	27 c0       	rjmp	.+78     	; 0x6d22 <autoParking+0x15a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6cd4:	8e 01       	movw	r16, r28
    6cd6:	09 59       	subi	r16, 0x99	; 153
    6cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    6cda:	fe 01       	movw	r30, r28
    6cdc:	e7 59       	subi	r30, 0x97	; 151
    6cde:	ff 4f       	sbci	r31, 0xFF	; 255
    6ce0:	60 81       	ld	r22, Z
    6ce2:	71 81       	ldd	r23, Z+1	; 0x01
    6ce4:	82 81       	ldd	r24, Z+2	; 0x02
    6ce6:	93 81       	ldd	r25, Z+3	; 0x03
    6ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cec:	dc 01       	movw	r26, r24
    6cee:	cb 01       	movw	r24, r22
    6cf0:	f8 01       	movw	r30, r16
    6cf2:	91 83       	std	Z+1, r25	; 0x01
    6cf4:	80 83       	st	Z, r24
    6cf6:	de 01       	movw	r26, r28
    6cf8:	ad 59       	subi	r26, 0x9D	; 157
    6cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    6cfc:	fe 01       	movw	r30, r28
    6cfe:	e9 59       	subi	r30, 0x99	; 153
    6d00:	ff 4f       	sbci	r31, 0xFF	; 255
    6d02:	80 81       	ld	r24, Z
    6d04:	91 81       	ldd	r25, Z+1	; 0x01
    6d06:	8d 93       	st	X+, r24
    6d08:	9c 93       	st	X, r25
    6d0a:	fe 01       	movw	r30, r28
    6d0c:	ed 59       	subi	r30, 0x9D	; 157
    6d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    6d10:	80 81       	ld	r24, Z
    6d12:	91 81       	ldd	r25, Z+1	; 0x01
    6d14:	01 97       	sbiw	r24, 0x01	; 1
    6d16:	f1 f7       	brne	.-4      	; 0x6d14 <autoParking+0x1594>
    6d18:	fe 01       	movw	r30, r28
    6d1a:	ed 59       	subi	r30, 0x9D	; 157
    6d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d1e:	91 83       	std	Z+1, r25	; 0x01
    6d20:	80 83       	st	Z, r24
			_delay_ms(500);
			Right_Forward_Parking(100);
    6d22:	84 e6       	ldi	r24, 0x64	; 100
    6d24:	0e 94 ed 19 	call	0x33da	; 0x33da <Right_Forward_Parking>
    6d28:	fe 01       	movw	r30, r28
    6d2a:	e1 5a       	subi	r30, 0xA1	; 161
    6d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d2e:	80 e0       	ldi	r24, 0x00	; 0
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	af e2       	ldi	r26, 0x2F	; 47
    6d34:	b4 e4       	ldi	r27, 0x44	; 68
    6d36:	80 83       	st	Z, r24
    6d38:	91 83       	std	Z+1, r25	; 0x01
    6d3a:	a2 83       	std	Z+2, r26	; 0x02
    6d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d3e:	8e 01       	movw	r16, r28
    6d40:	05 5a       	subi	r16, 0xA5	; 165
    6d42:	1f 4f       	sbci	r17, 0xFF	; 255
    6d44:	fe 01       	movw	r30, r28
    6d46:	e1 5a       	subi	r30, 0xA1	; 161
    6d48:	ff 4f       	sbci	r31, 0xFF	; 255
    6d4a:	60 81       	ld	r22, Z
    6d4c:	71 81       	ldd	r23, Z+1	; 0x01
    6d4e:	82 81       	ldd	r24, Z+2	; 0x02
    6d50:	93 81       	ldd	r25, Z+3	; 0x03
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	4a e7       	ldi	r20, 0x7A	; 122
    6d58:	55 e4       	ldi	r21, 0x45	; 69
    6d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d5e:	dc 01       	movw	r26, r24
    6d60:	cb 01       	movw	r24, r22
    6d62:	f8 01       	movw	r30, r16
    6d64:	80 83       	st	Z, r24
    6d66:	91 83       	std	Z+1, r25	; 0x01
    6d68:	a2 83       	std	Z+2, r26	; 0x02
    6d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d6c:	fe 01       	movw	r30, r28
    6d6e:	e5 5a       	subi	r30, 0xA5	; 165
    6d70:	ff 4f       	sbci	r31, 0xFF	; 255
    6d72:	60 81       	ld	r22, Z
    6d74:	71 81       	ldd	r23, Z+1	; 0x01
    6d76:	82 81       	ldd	r24, Z+2	; 0x02
    6d78:	93 81       	ldd	r25, Z+3	; 0x03
    6d7a:	20 e0       	ldi	r18, 0x00	; 0
    6d7c:	30 e0       	ldi	r19, 0x00	; 0
    6d7e:	40 e8       	ldi	r20, 0x80	; 128
    6d80:	5f e3       	ldi	r21, 0x3F	; 63
    6d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d86:	88 23       	and	r24, r24
    6d88:	44 f4       	brge	.+16     	; 0x6d9a <autoParking+0x161a>
		__ticks = 1;
    6d8a:	fe 01       	movw	r30, r28
    6d8c:	e7 5a       	subi	r30, 0xA7	; 167
    6d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6d90:	81 e0       	ldi	r24, 0x01	; 1
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	91 83       	std	Z+1, r25	; 0x01
    6d96:	80 83       	st	Z, r24
    6d98:	64 c0       	rjmp	.+200    	; 0x6e62 <autoParking+0x16e2>
	else if (__tmp > 65535)
    6d9a:	fe 01       	movw	r30, r28
    6d9c:	e5 5a       	subi	r30, 0xA5	; 165
    6d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6da0:	60 81       	ld	r22, Z
    6da2:	71 81       	ldd	r23, Z+1	; 0x01
    6da4:	82 81       	ldd	r24, Z+2	; 0x02
    6da6:	93 81       	ldd	r25, Z+3	; 0x03
    6da8:	20 e0       	ldi	r18, 0x00	; 0
    6daa:	3f ef       	ldi	r19, 0xFF	; 255
    6dac:	4f e7       	ldi	r20, 0x7F	; 127
    6dae:	57 e4       	ldi	r21, 0x47	; 71
    6db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6db4:	18 16       	cp	r1, r24
    6db6:	0c f0       	brlt	.+2      	; 0x6dba <autoParking+0x163a>
    6db8:	43 c0       	rjmp	.+134    	; 0x6e40 <autoParking+0x16c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6dba:	fe 01       	movw	r30, r28
    6dbc:	e1 5a       	subi	r30, 0xA1	; 161
    6dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    6dc0:	60 81       	ld	r22, Z
    6dc2:	71 81       	ldd	r23, Z+1	; 0x01
    6dc4:	82 81       	ldd	r24, Z+2	; 0x02
    6dc6:	93 81       	ldd	r25, Z+3	; 0x03
    6dc8:	20 e0       	ldi	r18, 0x00	; 0
    6dca:	30 e0       	ldi	r19, 0x00	; 0
    6dcc:	40 e2       	ldi	r20, 0x20	; 32
    6dce:	51 e4       	ldi	r21, 0x41	; 65
    6dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6dd4:	dc 01       	movw	r26, r24
    6dd6:	cb 01       	movw	r24, r22
    6dd8:	8e 01       	movw	r16, r28
    6dda:	07 5a       	subi	r16, 0xA7	; 167
    6ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    6dde:	bc 01       	movw	r22, r24
    6de0:	cd 01       	movw	r24, r26
    6de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6de6:	dc 01       	movw	r26, r24
    6de8:	cb 01       	movw	r24, r22
    6dea:	f8 01       	movw	r30, r16
    6dec:	91 83       	std	Z+1, r25	; 0x01
    6dee:	80 83       	st	Z, r24
    6df0:	1f c0       	rjmp	.+62     	; 0x6e30 <autoParking+0x16b0>
    6df2:	fe 01       	movw	r30, r28
    6df4:	e9 5a       	subi	r30, 0xA9	; 169
    6df6:	ff 4f       	sbci	r31, 0xFF	; 255
    6df8:	80 e9       	ldi	r24, 0x90	; 144
    6dfa:	91 e0       	ldi	r25, 0x01	; 1
    6dfc:	91 83       	std	Z+1, r25	; 0x01
    6dfe:	80 83       	st	Z, r24
    6e00:	fe 01       	movw	r30, r28
    6e02:	e9 5a       	subi	r30, 0xA9	; 169
    6e04:	ff 4f       	sbci	r31, 0xFF	; 255
    6e06:	80 81       	ld	r24, Z
    6e08:	91 81       	ldd	r25, Z+1	; 0x01
    6e0a:	01 97       	sbiw	r24, 0x01	; 1
    6e0c:	f1 f7       	brne	.-4      	; 0x6e0a <autoParking+0x168a>
    6e0e:	fe 01       	movw	r30, r28
    6e10:	e9 5a       	subi	r30, 0xA9	; 169
    6e12:	ff 4f       	sbci	r31, 0xFF	; 255
    6e14:	91 83       	std	Z+1, r25	; 0x01
    6e16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e18:	de 01       	movw	r26, r28
    6e1a:	a7 5a       	subi	r26, 0xA7	; 167
    6e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    6e1e:	fe 01       	movw	r30, r28
    6e20:	e7 5a       	subi	r30, 0xA7	; 167
    6e22:	ff 4f       	sbci	r31, 0xFF	; 255
    6e24:	80 81       	ld	r24, Z
    6e26:	91 81       	ldd	r25, Z+1	; 0x01
    6e28:	01 97       	sbiw	r24, 0x01	; 1
    6e2a:	11 96       	adiw	r26, 0x01	; 1
    6e2c:	9c 93       	st	X, r25
    6e2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e30:	fe 01       	movw	r30, r28
    6e32:	e7 5a       	subi	r30, 0xA7	; 167
    6e34:	ff 4f       	sbci	r31, 0xFF	; 255
    6e36:	80 81       	ld	r24, Z
    6e38:	91 81       	ldd	r25, Z+1	; 0x01
    6e3a:	00 97       	sbiw	r24, 0x00	; 0
    6e3c:	d1 f6       	brne	.-76     	; 0x6df2 <autoParking+0x1672>
    6e3e:	27 c0       	rjmp	.+78     	; 0x6e8e <autoParking+0x170e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e40:	8e 01       	movw	r16, r28
    6e42:	07 5a       	subi	r16, 0xA7	; 167
    6e44:	1f 4f       	sbci	r17, 0xFF	; 255
    6e46:	fe 01       	movw	r30, r28
    6e48:	e5 5a       	subi	r30, 0xA5	; 165
    6e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e4c:	60 81       	ld	r22, Z
    6e4e:	71 81       	ldd	r23, Z+1	; 0x01
    6e50:	82 81       	ldd	r24, Z+2	; 0x02
    6e52:	93 81       	ldd	r25, Z+3	; 0x03
    6e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e58:	dc 01       	movw	r26, r24
    6e5a:	cb 01       	movw	r24, r22
    6e5c:	f8 01       	movw	r30, r16
    6e5e:	91 83       	std	Z+1, r25	; 0x01
    6e60:	80 83       	st	Z, r24
    6e62:	de 01       	movw	r26, r28
    6e64:	ab 5a       	subi	r26, 0xAB	; 171
    6e66:	bf 4f       	sbci	r27, 0xFF	; 255
    6e68:	fe 01       	movw	r30, r28
    6e6a:	e7 5a       	subi	r30, 0xA7	; 167
    6e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e6e:	80 81       	ld	r24, Z
    6e70:	91 81       	ldd	r25, Z+1	; 0x01
    6e72:	8d 93       	st	X+, r24
    6e74:	9c 93       	st	X, r25
    6e76:	fe 01       	movw	r30, r28
    6e78:	eb 5a       	subi	r30, 0xAB	; 171
    6e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e7c:	80 81       	ld	r24, Z
    6e7e:	91 81       	ldd	r25, Z+1	; 0x01
    6e80:	01 97       	sbiw	r24, 0x01	; 1
    6e82:	f1 f7       	brne	.-4      	; 0x6e80 <autoParking+0x1700>
    6e84:	fe 01       	movw	r30, r28
    6e86:	eb 5a       	subi	r30, 0xAB	; 171
    6e88:	ff 4f       	sbci	r31, 0xFF	; 255
    6e8a:	91 83       	std	Z+1, r25	; 0x01
    6e8c:	80 83       	st	Z, r24
			_delay_ms(700);
			Backward();
    6e8e:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    6e92:	fe 01       	movw	r30, r28
    6e94:	ef 5a       	subi	r30, 0xAF	; 175
    6e96:	ff 4f       	sbci	r31, 0xFF	; 255
    6e98:	80 e0       	ldi	r24, 0x00	; 0
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	a8 e4       	ldi	r26, 0x48	; 72
    6e9e:	b3 e4       	ldi	r27, 0x43	; 67
    6ea0:	80 83       	st	Z, r24
    6ea2:	91 83       	std	Z+1, r25	; 0x01
    6ea4:	a2 83       	std	Z+2, r26	; 0x02
    6ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ea8:	8e 01       	movw	r16, r28
    6eaa:	03 5b       	subi	r16, 0xB3	; 179
    6eac:	1f 4f       	sbci	r17, 0xFF	; 255
    6eae:	fe 01       	movw	r30, r28
    6eb0:	ef 5a       	subi	r30, 0xAF	; 175
    6eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    6eb4:	60 81       	ld	r22, Z
    6eb6:	71 81       	ldd	r23, Z+1	; 0x01
    6eb8:	82 81       	ldd	r24, Z+2	; 0x02
    6eba:	93 81       	ldd	r25, Z+3	; 0x03
    6ebc:	20 e0       	ldi	r18, 0x00	; 0
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	4a e7       	ldi	r20, 0x7A	; 122
    6ec2:	55 e4       	ldi	r21, 0x45	; 69
    6ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ec8:	dc 01       	movw	r26, r24
    6eca:	cb 01       	movw	r24, r22
    6ecc:	f8 01       	movw	r30, r16
    6ece:	80 83       	st	Z, r24
    6ed0:	91 83       	std	Z+1, r25	; 0x01
    6ed2:	a2 83       	std	Z+2, r26	; 0x02
    6ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6ed6:	fe 01       	movw	r30, r28
    6ed8:	e3 5b       	subi	r30, 0xB3	; 179
    6eda:	ff 4f       	sbci	r31, 0xFF	; 255
    6edc:	60 81       	ld	r22, Z
    6ede:	71 81       	ldd	r23, Z+1	; 0x01
    6ee0:	82 81       	ldd	r24, Z+2	; 0x02
    6ee2:	93 81       	ldd	r25, Z+3	; 0x03
    6ee4:	20 e0       	ldi	r18, 0x00	; 0
    6ee6:	30 e0       	ldi	r19, 0x00	; 0
    6ee8:	40 e8       	ldi	r20, 0x80	; 128
    6eea:	5f e3       	ldi	r21, 0x3F	; 63
    6eec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6ef0:	88 23       	and	r24, r24
    6ef2:	44 f4       	brge	.+16     	; 0x6f04 <autoParking+0x1784>
		__ticks = 1;
    6ef4:	fe 01       	movw	r30, r28
    6ef6:	e5 5b       	subi	r30, 0xB5	; 181
    6ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    6efa:	81 e0       	ldi	r24, 0x01	; 1
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	91 83       	std	Z+1, r25	; 0x01
    6f00:	80 83       	st	Z, r24
    6f02:	64 c0       	rjmp	.+200    	; 0x6fcc <autoParking+0x184c>
	else if (__tmp > 65535)
    6f04:	fe 01       	movw	r30, r28
    6f06:	e3 5b       	subi	r30, 0xB3	; 179
    6f08:	ff 4f       	sbci	r31, 0xFF	; 255
    6f0a:	60 81       	ld	r22, Z
    6f0c:	71 81       	ldd	r23, Z+1	; 0x01
    6f0e:	82 81       	ldd	r24, Z+2	; 0x02
    6f10:	93 81       	ldd	r25, Z+3	; 0x03
    6f12:	20 e0       	ldi	r18, 0x00	; 0
    6f14:	3f ef       	ldi	r19, 0xFF	; 255
    6f16:	4f e7       	ldi	r20, 0x7F	; 127
    6f18:	57 e4       	ldi	r21, 0x47	; 71
    6f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6f1e:	18 16       	cp	r1, r24
    6f20:	0c f0       	brlt	.+2      	; 0x6f24 <autoParking+0x17a4>
    6f22:	43 c0       	rjmp	.+134    	; 0x6faa <autoParking+0x182a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f24:	fe 01       	movw	r30, r28
    6f26:	ef 5a       	subi	r30, 0xAF	; 175
    6f28:	ff 4f       	sbci	r31, 0xFF	; 255
    6f2a:	60 81       	ld	r22, Z
    6f2c:	71 81       	ldd	r23, Z+1	; 0x01
    6f2e:	82 81       	ldd	r24, Z+2	; 0x02
    6f30:	93 81       	ldd	r25, Z+3	; 0x03
    6f32:	20 e0       	ldi	r18, 0x00	; 0
    6f34:	30 e0       	ldi	r19, 0x00	; 0
    6f36:	40 e2       	ldi	r20, 0x20	; 32
    6f38:	51 e4       	ldi	r21, 0x41	; 65
    6f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f3e:	dc 01       	movw	r26, r24
    6f40:	cb 01       	movw	r24, r22
    6f42:	8e 01       	movw	r16, r28
    6f44:	05 5b       	subi	r16, 0xB5	; 181
    6f46:	1f 4f       	sbci	r17, 0xFF	; 255
    6f48:	bc 01       	movw	r22, r24
    6f4a:	cd 01       	movw	r24, r26
    6f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f50:	dc 01       	movw	r26, r24
    6f52:	cb 01       	movw	r24, r22
    6f54:	f8 01       	movw	r30, r16
    6f56:	91 83       	std	Z+1, r25	; 0x01
    6f58:	80 83       	st	Z, r24
    6f5a:	1f c0       	rjmp	.+62     	; 0x6f9a <autoParking+0x181a>
    6f5c:	fe 01       	movw	r30, r28
    6f5e:	e7 5b       	subi	r30, 0xB7	; 183
    6f60:	ff 4f       	sbci	r31, 0xFF	; 255
    6f62:	80 e9       	ldi	r24, 0x90	; 144
    6f64:	91 e0       	ldi	r25, 0x01	; 1
    6f66:	91 83       	std	Z+1, r25	; 0x01
    6f68:	80 83       	st	Z, r24
    6f6a:	fe 01       	movw	r30, r28
    6f6c:	e7 5b       	subi	r30, 0xB7	; 183
    6f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f70:	80 81       	ld	r24, Z
    6f72:	91 81       	ldd	r25, Z+1	; 0x01
    6f74:	01 97       	sbiw	r24, 0x01	; 1
    6f76:	f1 f7       	brne	.-4      	; 0x6f74 <autoParking+0x17f4>
    6f78:	fe 01       	movw	r30, r28
    6f7a:	e7 5b       	subi	r30, 0xB7	; 183
    6f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    6f7e:	91 83       	std	Z+1, r25	; 0x01
    6f80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f82:	de 01       	movw	r26, r28
    6f84:	a5 5b       	subi	r26, 0xB5	; 181
    6f86:	bf 4f       	sbci	r27, 0xFF	; 255
    6f88:	fe 01       	movw	r30, r28
    6f8a:	e5 5b       	subi	r30, 0xB5	; 181
    6f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    6f8e:	80 81       	ld	r24, Z
    6f90:	91 81       	ldd	r25, Z+1	; 0x01
    6f92:	01 97       	sbiw	r24, 0x01	; 1
    6f94:	11 96       	adiw	r26, 0x01	; 1
    6f96:	9c 93       	st	X, r25
    6f98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f9a:	fe 01       	movw	r30, r28
    6f9c:	e5 5b       	subi	r30, 0xB5	; 181
    6f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6fa0:	80 81       	ld	r24, Z
    6fa2:	91 81       	ldd	r25, Z+1	; 0x01
    6fa4:	00 97       	sbiw	r24, 0x00	; 0
    6fa6:	d1 f6       	brne	.-76     	; 0x6f5c <autoParking+0x17dc>
    6fa8:	27 c0       	rjmp	.+78     	; 0x6ff8 <autoParking+0x1878>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6faa:	8e 01       	movw	r16, r28
    6fac:	05 5b       	subi	r16, 0xB5	; 181
    6fae:	1f 4f       	sbci	r17, 0xFF	; 255
    6fb0:	fe 01       	movw	r30, r28
    6fb2:	e3 5b       	subi	r30, 0xB3	; 179
    6fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    6fb6:	60 81       	ld	r22, Z
    6fb8:	71 81       	ldd	r23, Z+1	; 0x01
    6fba:	82 81       	ldd	r24, Z+2	; 0x02
    6fbc:	93 81       	ldd	r25, Z+3	; 0x03
    6fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fc2:	dc 01       	movw	r26, r24
    6fc4:	cb 01       	movw	r24, r22
    6fc6:	f8 01       	movw	r30, r16
    6fc8:	91 83       	std	Z+1, r25	; 0x01
    6fca:	80 83       	st	Z, r24
    6fcc:	de 01       	movw	r26, r28
    6fce:	a9 5b       	subi	r26, 0xB9	; 185
    6fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    6fd2:	fe 01       	movw	r30, r28
    6fd4:	e5 5b       	subi	r30, 0xB5	; 181
    6fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    6fd8:	80 81       	ld	r24, Z
    6fda:	91 81       	ldd	r25, Z+1	; 0x01
    6fdc:	8d 93       	st	X+, r24
    6fde:	9c 93       	st	X, r25
    6fe0:	fe 01       	movw	r30, r28
    6fe2:	e9 5b       	subi	r30, 0xB9	; 185
    6fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    6fe6:	80 81       	ld	r24, Z
    6fe8:	91 81       	ldd	r25, Z+1	; 0x01
    6fea:	01 97       	sbiw	r24, 0x01	; 1
    6fec:	f1 f7       	brne	.-4      	; 0x6fea <autoParking+0x186a>
    6fee:	fe 01       	movw	r30, r28
    6ff0:	e9 5b       	subi	r30, 0xB9	; 185
    6ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ff4:	91 83       	std	Z+1, r25	; 0x01
    6ff6:	80 83       	st	Z, r24
			_delay_ms(200);
			Right_Forward_Parking(100);
    6ff8:	84 e6       	ldi	r24, 0x64	; 100
    6ffa:	0e 94 ed 19 	call	0x33da	; 0x33da <Right_Forward_Parking>
    6ffe:	fe 01       	movw	r30, r28
    7000:	ed 5b       	subi	r30, 0xBD	; 189
    7002:	ff 4f       	sbci	r31, 0xFF	; 255
    7004:	80 e0       	ldi	r24, 0x00	; 0
    7006:	90 e0       	ldi	r25, 0x00	; 0
    7008:	af e2       	ldi	r26, 0x2F	; 47
    700a:	b4 e4       	ldi	r27, 0x44	; 68
    700c:	80 83       	st	Z, r24
    700e:	91 83       	std	Z+1, r25	; 0x01
    7010:	a2 83       	std	Z+2, r26	; 0x02
    7012:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7014:	8e 01       	movw	r16, r28
    7016:	01 5c       	subi	r16, 0xC1	; 193
    7018:	1f 4f       	sbci	r17, 0xFF	; 255
    701a:	fe 01       	movw	r30, r28
    701c:	ed 5b       	subi	r30, 0xBD	; 189
    701e:	ff 4f       	sbci	r31, 0xFF	; 255
    7020:	60 81       	ld	r22, Z
    7022:	71 81       	ldd	r23, Z+1	; 0x01
    7024:	82 81       	ldd	r24, Z+2	; 0x02
    7026:	93 81       	ldd	r25, Z+3	; 0x03
    7028:	20 e0       	ldi	r18, 0x00	; 0
    702a:	30 e0       	ldi	r19, 0x00	; 0
    702c:	4a e7       	ldi	r20, 0x7A	; 122
    702e:	55 e4       	ldi	r21, 0x45	; 69
    7030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7034:	dc 01       	movw	r26, r24
    7036:	cb 01       	movw	r24, r22
    7038:	f8 01       	movw	r30, r16
    703a:	80 83       	st	Z, r24
    703c:	91 83       	std	Z+1, r25	; 0x01
    703e:	a2 83       	std	Z+2, r26	; 0x02
    7040:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7042:	fe 01       	movw	r30, r28
    7044:	ff 96       	adiw	r30, 0x3f	; 63
    7046:	60 81       	ld	r22, Z
    7048:	71 81       	ldd	r23, Z+1	; 0x01
    704a:	82 81       	ldd	r24, Z+2	; 0x02
    704c:	93 81       	ldd	r25, Z+3	; 0x03
    704e:	20 e0       	ldi	r18, 0x00	; 0
    7050:	30 e0       	ldi	r19, 0x00	; 0
    7052:	40 e8       	ldi	r20, 0x80	; 128
    7054:	5f e3       	ldi	r21, 0x3F	; 63
    7056:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    705a:	88 23       	and	r24, r24
    705c:	2c f4       	brge	.+10     	; 0x7068 <autoParking+0x18e8>
		__ticks = 1;
    705e:	81 e0       	ldi	r24, 0x01	; 1
    7060:	90 e0       	ldi	r25, 0x00	; 0
    7062:	9e af       	std	Y+62, r25	; 0x3e
    7064:	8d af       	std	Y+61, r24	; 0x3d
    7066:	46 c0       	rjmp	.+140    	; 0x70f4 <autoParking+0x1974>
	else if (__tmp > 65535)
    7068:	fe 01       	movw	r30, r28
    706a:	ff 96       	adiw	r30, 0x3f	; 63
    706c:	60 81       	ld	r22, Z
    706e:	71 81       	ldd	r23, Z+1	; 0x01
    7070:	82 81       	ldd	r24, Z+2	; 0x02
    7072:	93 81       	ldd	r25, Z+3	; 0x03
    7074:	20 e0       	ldi	r18, 0x00	; 0
    7076:	3f ef       	ldi	r19, 0xFF	; 255
    7078:	4f e7       	ldi	r20, 0x7F	; 127
    707a:	57 e4       	ldi	r21, 0x47	; 71
    707c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7080:	18 16       	cp	r1, r24
    7082:	64 f5       	brge	.+88     	; 0x70dc <autoParking+0x195c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7084:	fe 01       	movw	r30, r28
    7086:	ed 5b       	subi	r30, 0xBD	; 189
    7088:	ff 4f       	sbci	r31, 0xFF	; 255
    708a:	60 81       	ld	r22, Z
    708c:	71 81       	ldd	r23, Z+1	; 0x01
    708e:	82 81       	ldd	r24, Z+2	; 0x02
    7090:	93 81       	ldd	r25, Z+3	; 0x03
    7092:	20 e0       	ldi	r18, 0x00	; 0
    7094:	30 e0       	ldi	r19, 0x00	; 0
    7096:	40 e2       	ldi	r20, 0x20	; 32
    7098:	51 e4       	ldi	r21, 0x41	; 65
    709a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    709e:	dc 01       	movw	r26, r24
    70a0:	cb 01       	movw	r24, r22
    70a2:	bc 01       	movw	r22, r24
    70a4:	cd 01       	movw	r24, r26
    70a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70aa:	dc 01       	movw	r26, r24
    70ac:	cb 01       	movw	r24, r22
    70ae:	9e af       	std	Y+62, r25	; 0x3e
    70b0:	8d af       	std	Y+61, r24	; 0x3d
    70b2:	0f c0       	rjmp	.+30     	; 0x70d2 <autoParking+0x1952>
    70b4:	80 e9       	ldi	r24, 0x90	; 144
    70b6:	91 e0       	ldi	r25, 0x01	; 1
    70b8:	9c af       	std	Y+60, r25	; 0x3c
    70ba:	8b af       	std	Y+59, r24	; 0x3b
    70bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    70be:	9c ad       	ldd	r25, Y+60	; 0x3c
    70c0:	01 97       	sbiw	r24, 0x01	; 1
    70c2:	f1 f7       	brne	.-4      	; 0x70c0 <autoParking+0x1940>
    70c4:	9c af       	std	Y+60, r25	; 0x3c
    70c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    70ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    70cc:	01 97       	sbiw	r24, 0x01	; 1
    70ce:	9e af       	std	Y+62, r25	; 0x3e
    70d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    70d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    70d6:	00 97       	sbiw	r24, 0x00	; 0
    70d8:	69 f7       	brne	.-38     	; 0x70b4 <autoParking+0x1934>
    70da:	16 c0       	rjmp	.+44     	; 0x7108 <autoParking+0x1988>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70dc:	fe 01       	movw	r30, r28
    70de:	ff 96       	adiw	r30, 0x3f	; 63
    70e0:	60 81       	ld	r22, Z
    70e2:	71 81       	ldd	r23, Z+1	; 0x01
    70e4:	82 81       	ldd	r24, Z+2	; 0x02
    70e6:	93 81       	ldd	r25, Z+3	; 0x03
    70e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70ec:	dc 01       	movw	r26, r24
    70ee:	cb 01       	movw	r24, r22
    70f0:	9e af       	std	Y+62, r25	; 0x3e
    70f2:	8d af       	std	Y+61, r24	; 0x3d
    70f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    70f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    70f8:	9a af       	std	Y+58, r25	; 0x3a
    70fa:	89 af       	std	Y+57, r24	; 0x39
    70fc:	89 ad       	ldd	r24, Y+57	; 0x39
    70fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    7100:	01 97       	sbiw	r24, 0x01	; 1
    7102:	f1 f7       	brne	.-4      	; 0x7100 <autoParking+0x1980>
    7104:	9a af       	std	Y+58, r25	; 0x3a
    7106:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(700);
			Backward();
    7108:	0e 94 9d 18 	call	0x313a	; 0x313a <Backward>
    710c:	80 e0       	ldi	r24, 0x00	; 0
    710e:	90 e0       	ldi	r25, 0x00	; 0
    7110:	a8 e4       	ldi	r26, 0x48	; 72
    7112:	b3 e4       	ldi	r27, 0x43	; 67
    7114:	8d ab       	std	Y+53, r24	; 0x35
    7116:	9e ab       	std	Y+54, r25	; 0x36
    7118:	af ab       	std	Y+55, r26	; 0x37
    711a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    711c:	6d a9       	ldd	r22, Y+53	; 0x35
    711e:	7e a9       	ldd	r23, Y+54	; 0x36
    7120:	8f a9       	ldd	r24, Y+55	; 0x37
    7122:	98 ad       	ldd	r25, Y+56	; 0x38
    7124:	20 e0       	ldi	r18, 0x00	; 0
    7126:	30 e0       	ldi	r19, 0x00	; 0
    7128:	4a e7       	ldi	r20, 0x7A	; 122
    712a:	55 e4       	ldi	r21, 0x45	; 69
    712c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7130:	dc 01       	movw	r26, r24
    7132:	cb 01       	movw	r24, r22
    7134:	89 ab       	std	Y+49, r24	; 0x31
    7136:	9a ab       	std	Y+50, r25	; 0x32
    7138:	ab ab       	std	Y+51, r26	; 0x33
    713a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    713c:	69 a9       	ldd	r22, Y+49	; 0x31
    713e:	7a a9       	ldd	r23, Y+50	; 0x32
    7140:	8b a9       	ldd	r24, Y+51	; 0x33
    7142:	9c a9       	ldd	r25, Y+52	; 0x34
    7144:	20 e0       	ldi	r18, 0x00	; 0
    7146:	30 e0       	ldi	r19, 0x00	; 0
    7148:	40 e8       	ldi	r20, 0x80	; 128
    714a:	5f e3       	ldi	r21, 0x3F	; 63
    714c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7150:	88 23       	and	r24, r24
    7152:	2c f4       	brge	.+10     	; 0x715e <autoParking+0x19de>
		__ticks = 1;
    7154:	81 e0       	ldi	r24, 0x01	; 1
    7156:	90 e0       	ldi	r25, 0x00	; 0
    7158:	98 ab       	std	Y+48, r25	; 0x30
    715a:	8f a7       	std	Y+47, r24	; 0x2f
    715c:	3f c0       	rjmp	.+126    	; 0x71dc <autoParking+0x1a5c>
	else if (__tmp > 65535)
    715e:	69 a9       	ldd	r22, Y+49	; 0x31
    7160:	7a a9       	ldd	r23, Y+50	; 0x32
    7162:	8b a9       	ldd	r24, Y+51	; 0x33
    7164:	9c a9       	ldd	r25, Y+52	; 0x34
    7166:	20 e0       	ldi	r18, 0x00	; 0
    7168:	3f ef       	ldi	r19, 0xFF	; 255
    716a:	4f e7       	ldi	r20, 0x7F	; 127
    716c:	57 e4       	ldi	r21, 0x47	; 71
    716e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7172:	18 16       	cp	r1, r24
    7174:	4c f5       	brge	.+82     	; 0x71c8 <autoParking+0x1a48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7176:	6d a9       	ldd	r22, Y+53	; 0x35
    7178:	7e a9       	ldd	r23, Y+54	; 0x36
    717a:	8f a9       	ldd	r24, Y+55	; 0x37
    717c:	98 ad       	ldd	r25, Y+56	; 0x38
    717e:	20 e0       	ldi	r18, 0x00	; 0
    7180:	30 e0       	ldi	r19, 0x00	; 0
    7182:	40 e2       	ldi	r20, 0x20	; 32
    7184:	51 e4       	ldi	r21, 0x41	; 65
    7186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    718a:	dc 01       	movw	r26, r24
    718c:	cb 01       	movw	r24, r22
    718e:	bc 01       	movw	r22, r24
    7190:	cd 01       	movw	r24, r26
    7192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7196:	dc 01       	movw	r26, r24
    7198:	cb 01       	movw	r24, r22
    719a:	98 ab       	std	Y+48, r25	; 0x30
    719c:	8f a7       	std	Y+47, r24	; 0x2f
    719e:	0f c0       	rjmp	.+30     	; 0x71be <autoParking+0x1a3e>
    71a0:	80 e9       	ldi	r24, 0x90	; 144
    71a2:	91 e0       	ldi	r25, 0x01	; 1
    71a4:	9e a7       	std	Y+46, r25	; 0x2e
    71a6:	8d a7       	std	Y+45, r24	; 0x2d
    71a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    71aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    71ac:	01 97       	sbiw	r24, 0x01	; 1
    71ae:	f1 f7       	brne	.-4      	; 0x71ac <autoParking+0x1a2c>
    71b0:	9e a7       	std	Y+46, r25	; 0x2e
    71b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    71b6:	98 a9       	ldd	r25, Y+48	; 0x30
    71b8:	01 97       	sbiw	r24, 0x01	; 1
    71ba:	98 ab       	std	Y+48, r25	; 0x30
    71bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71be:	8f a5       	ldd	r24, Y+47	; 0x2f
    71c0:	98 a9       	ldd	r25, Y+48	; 0x30
    71c2:	00 97       	sbiw	r24, 0x00	; 0
    71c4:	69 f7       	brne	.-38     	; 0x71a0 <autoParking+0x1a20>
    71c6:	14 c0       	rjmp	.+40     	; 0x71f0 <autoParking+0x1a70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71c8:	69 a9       	ldd	r22, Y+49	; 0x31
    71ca:	7a a9       	ldd	r23, Y+50	; 0x32
    71cc:	8b a9       	ldd	r24, Y+51	; 0x33
    71ce:	9c a9       	ldd	r25, Y+52	; 0x34
    71d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71d4:	dc 01       	movw	r26, r24
    71d6:	cb 01       	movw	r24, r22
    71d8:	98 ab       	std	Y+48, r25	; 0x30
    71da:	8f a7       	std	Y+47, r24	; 0x2f
    71dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    71de:	98 a9       	ldd	r25, Y+48	; 0x30
    71e0:	9c a7       	std	Y+44, r25	; 0x2c
    71e2:	8b a7       	std	Y+43, r24	; 0x2b
    71e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    71e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    71e8:	01 97       	sbiw	r24, 0x01	; 1
    71ea:	f1 f7       	brne	.-4      	; 0x71e8 <autoParking+0x1a68>
    71ec:	9c a7       	std	Y+44, r25	; 0x2c
    71ee:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			Right_Forward_Parking(100);
    71f0:	84 e6       	ldi	r24, 0x64	; 100
    71f2:	0e 94 ed 19 	call	0x33da	; 0x33da <Right_Forward_Parking>
    71f6:	80 e0       	ldi	r24, 0x00	; 0
    71f8:	90 e0       	ldi	r25, 0x00	; 0
    71fa:	a8 e4       	ldi	r26, 0x48	; 72
    71fc:	b3 e4       	ldi	r27, 0x43	; 67
    71fe:	8f a3       	std	Y+39, r24	; 0x27
    7200:	98 a7       	std	Y+40, r25	; 0x28
    7202:	a9 a7       	std	Y+41, r26	; 0x29
    7204:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7206:	6f a1       	ldd	r22, Y+39	; 0x27
    7208:	78 a5       	ldd	r23, Y+40	; 0x28
    720a:	89 a5       	ldd	r24, Y+41	; 0x29
    720c:	9a a5       	ldd	r25, Y+42	; 0x2a
    720e:	20 e0       	ldi	r18, 0x00	; 0
    7210:	30 e0       	ldi	r19, 0x00	; 0
    7212:	4a e7       	ldi	r20, 0x7A	; 122
    7214:	55 e4       	ldi	r21, 0x45	; 69
    7216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    721a:	dc 01       	movw	r26, r24
    721c:	cb 01       	movw	r24, r22
    721e:	8b a3       	std	Y+35, r24	; 0x23
    7220:	9c a3       	std	Y+36, r25	; 0x24
    7222:	ad a3       	std	Y+37, r26	; 0x25
    7224:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7226:	6b a1       	ldd	r22, Y+35	; 0x23
    7228:	7c a1       	ldd	r23, Y+36	; 0x24
    722a:	8d a1       	ldd	r24, Y+37	; 0x25
    722c:	9e a1       	ldd	r25, Y+38	; 0x26
    722e:	20 e0       	ldi	r18, 0x00	; 0
    7230:	30 e0       	ldi	r19, 0x00	; 0
    7232:	40 e8       	ldi	r20, 0x80	; 128
    7234:	5f e3       	ldi	r21, 0x3F	; 63
    7236:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    723a:	88 23       	and	r24, r24
    723c:	2c f4       	brge	.+10     	; 0x7248 <autoParking+0x1ac8>
		__ticks = 1;
    723e:	81 e0       	ldi	r24, 0x01	; 1
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	9a a3       	std	Y+34, r25	; 0x22
    7244:	89 a3       	std	Y+33, r24	; 0x21
    7246:	3f c0       	rjmp	.+126    	; 0x72c6 <autoParking+0x1b46>
	else if (__tmp > 65535)
    7248:	6b a1       	ldd	r22, Y+35	; 0x23
    724a:	7c a1       	ldd	r23, Y+36	; 0x24
    724c:	8d a1       	ldd	r24, Y+37	; 0x25
    724e:	9e a1       	ldd	r25, Y+38	; 0x26
    7250:	20 e0       	ldi	r18, 0x00	; 0
    7252:	3f ef       	ldi	r19, 0xFF	; 255
    7254:	4f e7       	ldi	r20, 0x7F	; 127
    7256:	57 e4       	ldi	r21, 0x47	; 71
    7258:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    725c:	18 16       	cp	r1, r24
    725e:	4c f5       	brge	.+82     	; 0x72b2 <autoParking+0x1b32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7260:	6f a1       	ldd	r22, Y+39	; 0x27
    7262:	78 a5       	ldd	r23, Y+40	; 0x28
    7264:	89 a5       	ldd	r24, Y+41	; 0x29
    7266:	9a a5       	ldd	r25, Y+42	; 0x2a
    7268:	20 e0       	ldi	r18, 0x00	; 0
    726a:	30 e0       	ldi	r19, 0x00	; 0
    726c:	40 e2       	ldi	r20, 0x20	; 32
    726e:	51 e4       	ldi	r21, 0x41	; 65
    7270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7274:	dc 01       	movw	r26, r24
    7276:	cb 01       	movw	r24, r22
    7278:	bc 01       	movw	r22, r24
    727a:	cd 01       	movw	r24, r26
    727c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7280:	dc 01       	movw	r26, r24
    7282:	cb 01       	movw	r24, r22
    7284:	9a a3       	std	Y+34, r25	; 0x22
    7286:	89 a3       	std	Y+33, r24	; 0x21
    7288:	0f c0       	rjmp	.+30     	; 0x72a8 <autoParking+0x1b28>
    728a:	80 e9       	ldi	r24, 0x90	; 144
    728c:	91 e0       	ldi	r25, 0x01	; 1
    728e:	98 a3       	std	Y+32, r25	; 0x20
    7290:	8f 8f       	std	Y+31, r24	; 0x1f
    7292:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7294:	98 a1       	ldd	r25, Y+32	; 0x20
    7296:	01 97       	sbiw	r24, 0x01	; 1
    7298:	f1 f7       	brne	.-4      	; 0x7296 <autoParking+0x1b16>
    729a:	98 a3       	std	Y+32, r25	; 0x20
    729c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    729e:	89 a1       	ldd	r24, Y+33	; 0x21
    72a0:	9a a1       	ldd	r25, Y+34	; 0x22
    72a2:	01 97       	sbiw	r24, 0x01	; 1
    72a4:	9a a3       	std	Y+34, r25	; 0x22
    72a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72a8:	89 a1       	ldd	r24, Y+33	; 0x21
    72aa:	9a a1       	ldd	r25, Y+34	; 0x22
    72ac:	00 97       	sbiw	r24, 0x00	; 0
    72ae:	69 f7       	brne	.-38     	; 0x728a <autoParking+0x1b0a>
    72b0:	14 c0       	rjmp	.+40     	; 0x72da <autoParking+0x1b5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72b2:	6b a1       	ldd	r22, Y+35	; 0x23
    72b4:	7c a1       	ldd	r23, Y+36	; 0x24
    72b6:	8d a1       	ldd	r24, Y+37	; 0x25
    72b8:	9e a1       	ldd	r25, Y+38	; 0x26
    72ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72be:	dc 01       	movw	r26, r24
    72c0:	cb 01       	movw	r24, r22
    72c2:	9a a3       	std	Y+34, r25	; 0x22
    72c4:	89 a3       	std	Y+33, r24	; 0x21
    72c6:	89 a1       	ldd	r24, Y+33	; 0x21
    72c8:	9a a1       	ldd	r25, Y+34	; 0x22
    72ca:	9e 8f       	std	Y+30, r25	; 0x1e
    72cc:	8d 8f       	std	Y+29, r24	; 0x1d
    72ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    72d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    72d2:	01 97       	sbiw	r24, 0x01	; 1
    72d4:	f1 f7       	brne	.-4      	; 0x72d2 <autoParking+0x1b52>
    72d6:	9e 8f       	std	Y+30, r25	; 0x1e
    72d8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			Stop();
    72da:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
    72de:	80 e0       	ldi	r24, 0x00	; 0
    72e0:	90 e0       	ldi	r25, 0x00	; 0
    72e2:	af e2       	ldi	r26, 0x2F	; 47
    72e4:	b4 e4       	ldi	r27, 0x44	; 68
    72e6:	89 8f       	std	Y+25, r24	; 0x19
    72e8:	9a 8f       	std	Y+26, r25	; 0x1a
    72ea:	ab 8f       	std	Y+27, r26	; 0x1b
    72ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    72ee:	69 8d       	ldd	r22, Y+25	; 0x19
    72f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    72f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72f6:	20 e0       	ldi	r18, 0x00	; 0
    72f8:	30 e0       	ldi	r19, 0x00	; 0
    72fa:	4a e7       	ldi	r20, 0x7A	; 122
    72fc:	55 e4       	ldi	r21, 0x45	; 69
    72fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7302:	dc 01       	movw	r26, r24
    7304:	cb 01       	movw	r24, r22
    7306:	8d 8b       	std	Y+21, r24	; 0x15
    7308:	9e 8b       	std	Y+22, r25	; 0x16
    730a:	af 8b       	std	Y+23, r26	; 0x17
    730c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    730e:	6d 89       	ldd	r22, Y+21	; 0x15
    7310:	7e 89       	ldd	r23, Y+22	; 0x16
    7312:	8f 89       	ldd	r24, Y+23	; 0x17
    7314:	98 8d       	ldd	r25, Y+24	; 0x18
    7316:	20 e0       	ldi	r18, 0x00	; 0
    7318:	30 e0       	ldi	r19, 0x00	; 0
    731a:	40 e8       	ldi	r20, 0x80	; 128
    731c:	5f e3       	ldi	r21, 0x3F	; 63
    731e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7322:	88 23       	and	r24, r24
    7324:	2c f4       	brge	.+10     	; 0x7330 <autoParking+0x1bb0>
		__ticks = 1;
    7326:	81 e0       	ldi	r24, 0x01	; 1
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	9c 8b       	std	Y+20, r25	; 0x14
    732c:	8b 8b       	std	Y+19, r24	; 0x13
    732e:	3f c0       	rjmp	.+126    	; 0x73ae <autoParking+0x1c2e>
	else if (__tmp > 65535)
    7330:	6d 89       	ldd	r22, Y+21	; 0x15
    7332:	7e 89       	ldd	r23, Y+22	; 0x16
    7334:	8f 89       	ldd	r24, Y+23	; 0x17
    7336:	98 8d       	ldd	r25, Y+24	; 0x18
    7338:	20 e0       	ldi	r18, 0x00	; 0
    733a:	3f ef       	ldi	r19, 0xFF	; 255
    733c:	4f e7       	ldi	r20, 0x7F	; 127
    733e:	57 e4       	ldi	r21, 0x47	; 71
    7340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7344:	18 16       	cp	r1, r24
    7346:	4c f5       	brge	.+82     	; 0x739a <autoParking+0x1c1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7348:	69 8d       	ldd	r22, Y+25	; 0x19
    734a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    734c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    734e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7350:	20 e0       	ldi	r18, 0x00	; 0
    7352:	30 e0       	ldi	r19, 0x00	; 0
    7354:	40 e2       	ldi	r20, 0x20	; 32
    7356:	51 e4       	ldi	r21, 0x41	; 65
    7358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    735c:	dc 01       	movw	r26, r24
    735e:	cb 01       	movw	r24, r22
    7360:	bc 01       	movw	r22, r24
    7362:	cd 01       	movw	r24, r26
    7364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7368:	dc 01       	movw	r26, r24
    736a:	cb 01       	movw	r24, r22
    736c:	9c 8b       	std	Y+20, r25	; 0x14
    736e:	8b 8b       	std	Y+19, r24	; 0x13
    7370:	0f c0       	rjmp	.+30     	; 0x7390 <autoParking+0x1c10>
    7372:	80 e9       	ldi	r24, 0x90	; 144
    7374:	91 e0       	ldi	r25, 0x01	; 1
    7376:	9a 8b       	std	Y+18, r25	; 0x12
    7378:	89 8b       	std	Y+17, r24	; 0x11
    737a:	89 89       	ldd	r24, Y+17	; 0x11
    737c:	9a 89       	ldd	r25, Y+18	; 0x12
    737e:	01 97       	sbiw	r24, 0x01	; 1
    7380:	f1 f7       	brne	.-4      	; 0x737e <autoParking+0x1bfe>
    7382:	9a 8b       	std	Y+18, r25	; 0x12
    7384:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7386:	8b 89       	ldd	r24, Y+19	; 0x13
    7388:	9c 89       	ldd	r25, Y+20	; 0x14
    738a:	01 97       	sbiw	r24, 0x01	; 1
    738c:	9c 8b       	std	Y+20, r25	; 0x14
    738e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7390:	8b 89       	ldd	r24, Y+19	; 0x13
    7392:	9c 89       	ldd	r25, Y+20	; 0x14
    7394:	00 97       	sbiw	r24, 0x00	; 0
    7396:	69 f7       	brne	.-38     	; 0x7372 <autoParking+0x1bf2>
    7398:	14 c0       	rjmp	.+40     	; 0x73c2 <autoParking+0x1c42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    739a:	6d 89       	ldd	r22, Y+21	; 0x15
    739c:	7e 89       	ldd	r23, Y+22	; 0x16
    739e:	8f 89       	ldd	r24, Y+23	; 0x17
    73a0:	98 8d       	ldd	r25, Y+24	; 0x18
    73a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73a6:	dc 01       	movw	r26, r24
    73a8:	cb 01       	movw	r24, r22
    73aa:	9c 8b       	std	Y+20, r25	; 0x14
    73ac:	8b 8b       	std	Y+19, r24	; 0x13
    73ae:	8b 89       	ldd	r24, Y+19	; 0x13
    73b0:	9c 89       	ldd	r25, Y+20	; 0x14
    73b2:	98 8b       	std	Y+16, r25	; 0x10
    73b4:	8f 87       	std	Y+15, r24	; 0x0f
    73b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    73b8:	98 89       	ldd	r25, Y+16	; 0x10
    73ba:	01 97       	sbiw	r24, 0x01	; 1
    73bc:	f1 f7       	brne	.-4      	; 0x73ba <autoParking+0x1c3a>
    73be:	98 8b       	std	Y+16, r25	; 0x10
    73c0:	8f 87       	std	Y+15, r24	; 0x0f
    73c2:	80 e0       	ldi	r24, 0x00	; 0
    73c4:	90 e0       	ldi	r25, 0x00	; 0
    73c6:	af e2       	ldi	r26, 0x2F	; 47
    73c8:	b4 e4       	ldi	r27, 0x44	; 68
    73ca:	8b 87       	std	Y+11, r24	; 0x0b
    73cc:	9c 87       	std	Y+12, r25	; 0x0c
    73ce:	ad 87       	std	Y+13, r26	; 0x0d
    73d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    73d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    73d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    73d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    73da:	20 e0       	ldi	r18, 0x00	; 0
    73dc:	30 e0       	ldi	r19, 0x00	; 0
    73de:	4a e7       	ldi	r20, 0x7A	; 122
    73e0:	55 e4       	ldi	r21, 0x45	; 69
    73e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    73e6:	dc 01       	movw	r26, r24
    73e8:	cb 01       	movw	r24, r22
    73ea:	8f 83       	std	Y+7, r24	; 0x07
    73ec:	98 87       	std	Y+8, r25	; 0x08
    73ee:	a9 87       	std	Y+9, r26	; 0x09
    73f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    73f2:	6f 81       	ldd	r22, Y+7	; 0x07
    73f4:	78 85       	ldd	r23, Y+8	; 0x08
    73f6:	89 85       	ldd	r24, Y+9	; 0x09
    73f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    73fa:	20 e0       	ldi	r18, 0x00	; 0
    73fc:	30 e0       	ldi	r19, 0x00	; 0
    73fe:	40 e8       	ldi	r20, 0x80	; 128
    7400:	5f e3       	ldi	r21, 0x3F	; 63
    7402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7406:	88 23       	and	r24, r24
    7408:	2c f4       	brge	.+10     	; 0x7414 <autoParking+0x1c94>
		__ticks = 1;
    740a:	81 e0       	ldi	r24, 0x01	; 1
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	9e 83       	std	Y+6, r25	; 0x06
    7410:	8d 83       	std	Y+5, r24	; 0x05
    7412:	3f c0       	rjmp	.+126    	; 0x7492 <autoParking+0x1d12>
	else if (__tmp > 65535)
    7414:	6f 81       	ldd	r22, Y+7	; 0x07
    7416:	78 85       	ldd	r23, Y+8	; 0x08
    7418:	89 85       	ldd	r24, Y+9	; 0x09
    741a:	9a 85       	ldd	r25, Y+10	; 0x0a
    741c:	20 e0       	ldi	r18, 0x00	; 0
    741e:	3f ef       	ldi	r19, 0xFF	; 255
    7420:	4f e7       	ldi	r20, 0x7F	; 127
    7422:	57 e4       	ldi	r21, 0x47	; 71
    7424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7428:	18 16       	cp	r1, r24
    742a:	4c f5       	brge	.+82     	; 0x747e <autoParking+0x1cfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    742c:	6b 85       	ldd	r22, Y+11	; 0x0b
    742e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7430:	8d 85       	ldd	r24, Y+13	; 0x0d
    7432:	9e 85       	ldd	r25, Y+14	; 0x0e
    7434:	20 e0       	ldi	r18, 0x00	; 0
    7436:	30 e0       	ldi	r19, 0x00	; 0
    7438:	40 e2       	ldi	r20, 0x20	; 32
    743a:	51 e4       	ldi	r21, 0x41	; 65
    743c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7440:	dc 01       	movw	r26, r24
    7442:	cb 01       	movw	r24, r22
    7444:	bc 01       	movw	r22, r24
    7446:	cd 01       	movw	r24, r26
    7448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    744c:	dc 01       	movw	r26, r24
    744e:	cb 01       	movw	r24, r22
    7450:	9e 83       	std	Y+6, r25	; 0x06
    7452:	8d 83       	std	Y+5, r24	; 0x05
    7454:	0f c0       	rjmp	.+30     	; 0x7474 <autoParking+0x1cf4>
    7456:	80 e9       	ldi	r24, 0x90	; 144
    7458:	91 e0       	ldi	r25, 0x01	; 1
    745a:	9c 83       	std	Y+4, r25	; 0x04
    745c:	8b 83       	std	Y+3, r24	; 0x03
    745e:	8b 81       	ldd	r24, Y+3	; 0x03
    7460:	9c 81       	ldd	r25, Y+4	; 0x04
    7462:	01 97       	sbiw	r24, 0x01	; 1
    7464:	f1 f7       	brne	.-4      	; 0x7462 <autoParking+0x1ce2>
    7466:	9c 83       	std	Y+4, r25	; 0x04
    7468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    746a:	8d 81       	ldd	r24, Y+5	; 0x05
    746c:	9e 81       	ldd	r25, Y+6	; 0x06
    746e:	01 97       	sbiw	r24, 0x01	; 1
    7470:	9e 83       	std	Y+6, r25	; 0x06
    7472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7474:	8d 81       	ldd	r24, Y+5	; 0x05
    7476:	9e 81       	ldd	r25, Y+6	; 0x06
    7478:	00 97       	sbiw	r24, 0x00	; 0
    747a:	69 f7       	brne	.-38     	; 0x7456 <autoParking+0x1cd6>
    747c:	1e c0       	rjmp	.+60     	; 0x74ba <autoParking+0x1d3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    747e:	6f 81       	ldd	r22, Y+7	; 0x07
    7480:	78 85       	ldd	r23, Y+8	; 0x08
    7482:	89 85       	ldd	r24, Y+9	; 0x09
    7484:	9a 85       	ldd	r25, Y+10	; 0x0a
    7486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    748a:	dc 01       	movw	r26, r24
    748c:	cb 01       	movw	r24, r22
    748e:	9e 83       	std	Y+6, r25	; 0x06
    7490:	8d 83       	std	Y+5, r24	; 0x05
    7492:	8d 81       	ldd	r24, Y+5	; 0x05
    7494:	9e 81       	ldd	r25, Y+6	; 0x06
    7496:	9a 83       	std	Y+2, r25	; 0x02
    7498:	89 83       	std	Y+1, r24	; 0x01
    749a:	89 81       	ldd	r24, Y+1	; 0x01
    749c:	9a 81       	ldd	r25, Y+2	; 0x02
    749e:	01 97       	sbiw	r24, 0x01	; 1
    74a0:	f1 f7       	brne	.-4      	; 0x749e <autoParking+0x1d1e>
    74a2:	9a 83       	std	Y+2, r25	; 0x02
    74a4:	89 83       	std	Y+1, r24	; 0x01
    74a6:	09 c0       	rjmp	.+18     	; 0x74ba <autoParking+0x1d3a>

	readDistance();

	Forward();

	while (30 <= g_distanceRight)
    74a8:	80 91 af 01 	lds	r24, 0x01AF
    74ac:	90 91 b0 01 	lds	r25, 0x01B0
    74b0:	8e 31       	cpi	r24, 0x1E	; 30
    74b2:	91 05       	cpc	r25, r1
    74b4:	10 f0       	brcs	.+4      	; 0x74ba <autoParking+0x1d3a>
    74b6:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <autoParking+0x198>
			_delay_ms(700);

			break;
		}
	}
	if (5 > l_counter)
    74ba:	fe 01       	movw	r30, r28
    74bc:	eb 5c       	subi	r30, 0xCB	; 203
    74be:	fe 4f       	sbci	r31, 0xFE	; 254
    74c0:	80 81       	ld	r24, Z
    74c2:	85 30       	cpi	r24, 0x05	; 5
    74c4:	38 f4       	brcc	.+14     	; 0x74d4 <autoParking+0x1d54>
	{
		LCD_displayStringRowColumn(1, 0, "NO SPACE");
    74c6:	20 e7       	ldi	r18, 0x70	; 112
    74c8:	30 e0       	ldi	r19, 0x00	; 0
    74ca:	81 e0       	ldi	r24, 0x01	; 1
    74cc:	60 e0       	ldi	r22, 0x00	; 0
    74ce:	a9 01       	movw	r20, r18
    74d0:	0e 94 20 27 	call	0x4e40	; 0x4e40 <LCD_displayStringRowColumn>
	}

	Stop();
    74d4:	0e 94 3e 19 	call	0x327c	; 0x327c <Stop>
}
    74d8:	cb 5c       	subi	r28, 0xCB	; 203
    74da:	de 4f       	sbci	r29, 0xFE	; 254
    74dc:	0f b6       	in	r0, 0x3f	; 63
    74de:	f8 94       	cli
    74e0:	de bf       	out	0x3e, r29	; 62
    74e2:	0f be       	out	0x3f, r0	; 63
    74e4:	cd bf       	out	0x3d, r28	; 61
    74e6:	cf 91       	pop	r28
    74e8:	df 91       	pop	r29
    74ea:	1f 91       	pop	r17
    74ec:	0f 91       	pop	r16
    74ee:	08 95       	ret

000074f0 <__divmodhi4>:
    74f0:	97 fb       	bst	r25, 7
    74f2:	09 2e       	mov	r0, r25
    74f4:	07 26       	eor	r0, r23
    74f6:	0a d0       	rcall	.+20     	; 0x750c <__divmodhi4_neg1>
    74f8:	77 fd       	sbrc	r23, 7
    74fa:	04 d0       	rcall	.+8      	; 0x7504 <__divmodhi4_neg2>
    74fc:	2e d0       	rcall	.+92     	; 0x755a <__udivmodhi4>
    74fe:	06 d0       	rcall	.+12     	; 0x750c <__divmodhi4_neg1>
    7500:	00 20       	and	r0, r0
    7502:	1a f4       	brpl	.+6      	; 0x750a <__divmodhi4_exit>

00007504 <__divmodhi4_neg2>:
    7504:	70 95       	com	r23
    7506:	61 95       	neg	r22
    7508:	7f 4f       	sbci	r23, 0xFF	; 255

0000750a <__divmodhi4_exit>:
    750a:	08 95       	ret

0000750c <__divmodhi4_neg1>:
    750c:	f6 f7       	brtc	.-4      	; 0x750a <__divmodhi4_exit>
    750e:	90 95       	com	r25
    7510:	81 95       	neg	r24
    7512:	9f 4f       	sbci	r25, 0xFF	; 255
    7514:	08 95       	ret

00007516 <__udivmodsi4>:
    7516:	a1 e2       	ldi	r26, 0x21	; 33
    7518:	1a 2e       	mov	r1, r26
    751a:	aa 1b       	sub	r26, r26
    751c:	bb 1b       	sub	r27, r27
    751e:	fd 01       	movw	r30, r26
    7520:	0d c0       	rjmp	.+26     	; 0x753c <__udivmodsi4_ep>

00007522 <__udivmodsi4_loop>:
    7522:	aa 1f       	adc	r26, r26
    7524:	bb 1f       	adc	r27, r27
    7526:	ee 1f       	adc	r30, r30
    7528:	ff 1f       	adc	r31, r31
    752a:	a2 17       	cp	r26, r18
    752c:	b3 07       	cpc	r27, r19
    752e:	e4 07       	cpc	r30, r20
    7530:	f5 07       	cpc	r31, r21
    7532:	20 f0       	brcs	.+8      	; 0x753c <__udivmodsi4_ep>
    7534:	a2 1b       	sub	r26, r18
    7536:	b3 0b       	sbc	r27, r19
    7538:	e4 0b       	sbc	r30, r20
    753a:	f5 0b       	sbc	r31, r21

0000753c <__udivmodsi4_ep>:
    753c:	66 1f       	adc	r22, r22
    753e:	77 1f       	adc	r23, r23
    7540:	88 1f       	adc	r24, r24
    7542:	99 1f       	adc	r25, r25
    7544:	1a 94       	dec	r1
    7546:	69 f7       	brne	.-38     	; 0x7522 <__udivmodsi4_loop>
    7548:	60 95       	com	r22
    754a:	70 95       	com	r23
    754c:	80 95       	com	r24
    754e:	90 95       	com	r25
    7550:	9b 01       	movw	r18, r22
    7552:	ac 01       	movw	r20, r24
    7554:	bd 01       	movw	r22, r26
    7556:	cf 01       	movw	r24, r30
    7558:	08 95       	ret

0000755a <__udivmodhi4>:
    755a:	aa 1b       	sub	r26, r26
    755c:	bb 1b       	sub	r27, r27
    755e:	51 e1       	ldi	r21, 0x11	; 17
    7560:	07 c0       	rjmp	.+14     	; 0x7570 <__udivmodhi4_ep>

00007562 <__udivmodhi4_loop>:
    7562:	aa 1f       	adc	r26, r26
    7564:	bb 1f       	adc	r27, r27
    7566:	a6 17       	cp	r26, r22
    7568:	b7 07       	cpc	r27, r23
    756a:	10 f0       	brcs	.+4      	; 0x7570 <__udivmodhi4_ep>
    756c:	a6 1b       	sub	r26, r22
    756e:	b7 0b       	sbc	r27, r23

00007570 <__udivmodhi4_ep>:
    7570:	88 1f       	adc	r24, r24
    7572:	99 1f       	adc	r25, r25
    7574:	5a 95       	dec	r21
    7576:	a9 f7       	brne	.-22     	; 0x7562 <__udivmodhi4_loop>
    7578:	80 95       	com	r24
    757a:	90 95       	com	r25
    757c:	bc 01       	movw	r22, r24
    757e:	cd 01       	movw	r24, r26
    7580:	08 95       	ret

00007582 <__prologue_saves__>:
    7582:	2f 92       	push	r2
    7584:	3f 92       	push	r3
    7586:	4f 92       	push	r4
    7588:	5f 92       	push	r5
    758a:	6f 92       	push	r6
    758c:	7f 92       	push	r7
    758e:	8f 92       	push	r8
    7590:	9f 92       	push	r9
    7592:	af 92       	push	r10
    7594:	bf 92       	push	r11
    7596:	cf 92       	push	r12
    7598:	df 92       	push	r13
    759a:	ef 92       	push	r14
    759c:	ff 92       	push	r15
    759e:	0f 93       	push	r16
    75a0:	1f 93       	push	r17
    75a2:	cf 93       	push	r28
    75a4:	df 93       	push	r29
    75a6:	cd b7       	in	r28, 0x3d	; 61
    75a8:	de b7       	in	r29, 0x3e	; 62
    75aa:	ca 1b       	sub	r28, r26
    75ac:	db 0b       	sbc	r29, r27
    75ae:	0f b6       	in	r0, 0x3f	; 63
    75b0:	f8 94       	cli
    75b2:	de bf       	out	0x3e, r29	; 62
    75b4:	0f be       	out	0x3f, r0	; 63
    75b6:	cd bf       	out	0x3d, r28	; 61
    75b8:	09 94       	ijmp

000075ba <__epilogue_restores__>:
    75ba:	2a 88       	ldd	r2, Y+18	; 0x12
    75bc:	39 88       	ldd	r3, Y+17	; 0x11
    75be:	48 88       	ldd	r4, Y+16	; 0x10
    75c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    75c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    75c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    75c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    75c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    75ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    75cc:	b9 84       	ldd	r11, Y+9	; 0x09
    75ce:	c8 84       	ldd	r12, Y+8	; 0x08
    75d0:	df 80       	ldd	r13, Y+7	; 0x07
    75d2:	ee 80       	ldd	r14, Y+6	; 0x06
    75d4:	fd 80       	ldd	r15, Y+5	; 0x05
    75d6:	0c 81       	ldd	r16, Y+4	; 0x04
    75d8:	1b 81       	ldd	r17, Y+3	; 0x03
    75da:	aa 81       	ldd	r26, Y+2	; 0x02
    75dc:	b9 81       	ldd	r27, Y+1	; 0x01
    75de:	ce 0f       	add	r28, r30
    75e0:	d1 1d       	adc	r29, r1
    75e2:	0f b6       	in	r0, 0x3f	; 63
    75e4:	f8 94       	cli
    75e6:	de bf       	out	0x3e, r29	; 62
    75e8:	0f be       	out	0x3f, r0	; 63
    75ea:	cd bf       	out	0x3d, r28	; 61
    75ec:	ed 01       	movw	r28, r26
    75ee:	08 95       	ret

000075f0 <itoa>:
    75f0:	fb 01       	movw	r30, r22
    75f2:	9f 01       	movw	r18, r30
    75f4:	e8 94       	clt
    75f6:	42 30       	cpi	r20, 0x02	; 2
    75f8:	c4 f0       	brlt	.+48     	; 0x762a <itoa+0x3a>
    75fa:	45 32       	cpi	r20, 0x25	; 37
    75fc:	b4 f4       	brge	.+44     	; 0x762a <itoa+0x3a>
    75fe:	4a 30       	cpi	r20, 0x0A	; 10
    7600:	29 f4       	brne	.+10     	; 0x760c <itoa+0x1c>
    7602:	97 fb       	bst	r25, 7
    7604:	1e f4       	brtc	.+6      	; 0x760c <itoa+0x1c>
    7606:	90 95       	com	r25
    7608:	81 95       	neg	r24
    760a:	9f 4f       	sbci	r25, 0xFF	; 255
    760c:	64 2f       	mov	r22, r20
    760e:	77 27       	eor	r23, r23
    7610:	0e 94 ad 3a 	call	0x755a	; 0x755a <__udivmodhi4>
    7614:	80 5d       	subi	r24, 0xD0	; 208
    7616:	8a 33       	cpi	r24, 0x3A	; 58
    7618:	0c f0       	brlt	.+2      	; 0x761c <itoa+0x2c>
    761a:	89 5d       	subi	r24, 0xD9	; 217
    761c:	81 93       	st	Z+, r24
    761e:	cb 01       	movw	r24, r22
    7620:	00 97       	sbiw	r24, 0x00	; 0
    7622:	a1 f7       	brne	.-24     	; 0x760c <itoa+0x1c>
    7624:	16 f4       	brtc	.+4      	; 0x762a <itoa+0x3a>
    7626:	5d e2       	ldi	r21, 0x2D	; 45
    7628:	51 93       	st	Z+, r21
    762a:	10 82       	st	Z, r1
    762c:	c9 01       	movw	r24, r18
    762e:	0c 94 19 3b 	jmp	0x7632	; 0x7632 <strrev>

00007632 <strrev>:
    7632:	dc 01       	movw	r26, r24
    7634:	fc 01       	movw	r30, r24
    7636:	67 2f       	mov	r22, r23
    7638:	71 91       	ld	r23, Z+
    763a:	77 23       	and	r23, r23
    763c:	e1 f7       	brne	.-8      	; 0x7636 <strrev+0x4>
    763e:	32 97       	sbiw	r30, 0x02	; 2
    7640:	04 c0       	rjmp	.+8      	; 0x764a <strrev+0x18>
    7642:	7c 91       	ld	r23, X
    7644:	6d 93       	st	X+, r22
    7646:	70 83       	st	Z, r23
    7648:	62 91       	ld	r22, -Z
    764a:	ae 17       	cp	r26, r30
    764c:	bf 07       	cpc	r27, r31
    764e:	c8 f3       	brcs	.-14     	; 0x7642 <strrev+0x10>
    7650:	08 95       	ret

00007652 <_exit>:
    7652:	f8 94       	cli

00007654 <__stop_program>:
    7654:	ff cf       	rjmp	.-2      	; 0x7654 <__stop_program>
